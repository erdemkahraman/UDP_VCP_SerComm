
UDP_VCP_SerComm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c70  0801500c  0801500c  0002500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c7c  08017c7c  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08017c7c  08017c7c  00027c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c84  08017c84  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c84  08017c84  00027c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c88  08017c88  00027c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08017c8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083e0  20000200  08017e8c  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085e0  08017e8c  000385e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004251d  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007fec  00000000  00000000  0007274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  0007a738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  0007c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000384ba  00000000  00000000  0007e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034840  00000000  00000000  000b6b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001191d0  00000000  00000000  000eb3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00204572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e20  00000000  00000000  002045c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	08014ff4 	.word	0x08014ff4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	08014ff4 	.word	0x08014ff4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fc7f 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f814 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f90a 	bl	80007fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f8a8 	bl	800073c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 80005ec:	f006 fdc8 	bl	8007180 <MX_LWIP_Init>
  MX_USART6_UART_Init();
 80005f0:	f000 f8d4 	bl	800079c <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 80005f4:	f012 ff08 	bl	8013408 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  udp_echoserver_init();
 80005f8:	f000 fbc6 	bl	8000d88 <udp_echoserver_init>
  while (1)
  {
    /* USER CODE END WHILE */
	//  sprintf(udp_data,"%d \n",str1);
	 //  CDC_Transmit_FS("attempt", 10);
	   ethernetif_input(&gnetif);
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <main+0x30>)
 80005fe:	f007 f9a9 	bl	8007954 <ethernetif_input>
	   sys_check_timeouts();
 8000602:	f00f fe8b 	bl	801031c <sys_check_timeouts>
	   ethernetif_input(&gnetif);
 8000606:	e7f9      	b.n	80005fc <main+0x24>
 8000608:	2000066c 	.word	0x2000066c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0b8      	sub	sp, #224	; 0xe0
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000616:	2234      	movs	r2, #52	; 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f013 fcbc 	bl	8013f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2290      	movs	r2, #144	; 0x90
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f013 fcad 	bl	8013f98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063e:	f003 fa09 	bl	8003a54 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <SystemClock_Config+0x124>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	4a3a      	ldr	r2, [pc, #232]	; (8000730 <SystemClock_Config+0x124>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <SystemClock_Config+0x124>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <SystemClock_Config+0x128>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000662:	4a34      	ldr	r2, [pc, #208]	; (8000734 <SystemClock_Config+0x128>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6013      	str	r3, [r2, #0]
 800066a:	4b32      	ldr	r3, [pc, #200]	; (8000734 <SystemClock_Config+0x128>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000692:	2304      	movs	r3, #4
 8000694:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fa30 	bl	8003b14 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ba:	f000 f953 	bl	8000964 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006be:	f003 f9d9 	bl	8003a74 <HAL_PWREx_EnableOverDrive>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c8:	f000 f94c 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fcbc 	bl	8004070 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006fe:	f000 f931 	bl	8000964 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <SystemClock_Config+0x12c>)
 8000704:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000706:	2300      	movs	r3, #0
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800070a:	2300      	movs	r3, #0
 800070c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fedd 	bl	80044d8 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000724:	f000 f91e 	bl	8000964 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	37e0      	adds	r7, #224	; 0xe0
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000
 8000738:	00200900 	.word	0x00200900

0800073c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <MX_USART3_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART3_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART3_UART_Init+0x58>)
 8000780:	f004 fdb2 	bl	80052e8 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f8eb 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200004f0 	.word	0x200004f0
 8000798:	40004800 	.word	0x40004800

0800079c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <MX_USART6_UART_Init+0x58>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007a8:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <MX_USART6_UART_Init+0x5c>)
 80007aa:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007c0:	220c      	movs	r2, #12
 80007c2:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_USART6_UART_Init+0x54>)
 80007de:	f004 fd83 	bl	80052e8 <HAL_UART_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART6_UART_Init+0x50>
  {
    Error_Handler();
 80007e8:	f000 f8bc 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000574 	.word	0x20000574
 80007f4:	40011400 	.word	0x40011400
 80007f8:	000f4240 	.word	0x000f4240

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b46      	ldr	r3, [pc, #280]	; (800092c <MX_GPIO_Init+0x130>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a45      	ldr	r2, [pc, #276]	; (800092c <MX_GPIO_Init+0x130>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b43      	ldr	r3, [pc, #268]	; (800092c <MX_GPIO_Init+0x130>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <MX_GPIO_Init+0x130>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a3f      	ldr	r2, [pc, #252]	; (800092c <MX_GPIO_Init+0x130>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b3d      	ldr	r3, [pc, #244]	; (800092c <MX_GPIO_Init+0x130>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <MX_GPIO_Init+0x130>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a39      	ldr	r2, [pc, #228]	; (800092c <MX_GPIO_Init+0x130>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0x130>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a33      	ldr	r2, [pc, #204]	; (800092c <MX_GPIO_Init+0x130>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <MX_GPIO_Init+0x130>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <MX_GPIO_Init+0x130>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <MX_GPIO_Init+0x130>)
 8000878:	f043 0308 	orr.w	r3, r3, #8
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0x130>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0308 	and.w	r3, r3, #8
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0x130>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a27      	ldr	r2, [pc, #156]	; (800092c <MX_GPIO_Init+0x130>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_GPIO_Init+0x130>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a8:	4821      	ldr	r0, [pc, #132]	; (8000930 <MX_GPIO_Init+0x134>)
 80008aa:	f001 fefb 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4820      	ldr	r0, [pc, #128]	; (8000934 <MX_GPIO_Init+0x138>)
 80008b4:	f001 fef6 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_GPIO_Init+0x13c>)
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481b      	ldr	r0, [pc, #108]	; (800093c <MX_GPIO_Init+0x140>)
 80008ce:	f001 fd3d 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80008d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_GPIO_Init+0x134>)
 80008ec:	f001 fd2e 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	480b      	ldr	r0, [pc, #44]	; (8000934 <MX_GPIO_Init+0x138>)
 8000908:	f001 fd20 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_GPIO_Init+0x138>)
 8000920:	f001 fd14 	bl	800234c <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3730      	adds	r7, #48	; 0x30
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400
 8000934:	40021800 	.word	0x40021800
 8000938:	10110000 	.word	0x10110000
 800093c:	40020800 	.word	0x40020800

08000940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d101      	bne.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000952:	f000 fad1 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40010000 	.word	0x40010000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <HAL_MspInit+0x44>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <HAL_MspInit+0x44>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <HAL_MspInit+0x44>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x44>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x44>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x44>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a2e      	ldr	r2, [pc, #184]	; (8000a90 <HAL_UART_MspInit+0xd8>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d129      	bne.n	8000a2e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a2d      	ldr	r2, [pc, #180]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 80009e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a27      	ldr	r2, [pc, #156]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481c      	ldr	r0, [pc, #112]	; (8000a98 <HAL_UART_MspInit+0xe0>)
 8000a28:	f001 fc90 	bl	800234c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000a2c:	e02c      	b.n	8000a88 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART6)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <HAL_UART_MspInit+0xe4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d127      	bne.n	8000a88 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3c:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a3e:	f043 0320 	orr.w	r3, r3, #32
 8000a42:	6453      	str	r3, [r2, #68]	; 0x44
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_UART_MspInit+0xdc>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a68:	23c0      	movs	r3, #192	; 0xc0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <HAL_UART_MspInit+0xe8>)
 8000a84:	f001 fc62 	bl	800234c <HAL_GPIO_Init>
}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004800 	.word	0x40004800
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40011400 	.word	0x40011400
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	; 0x30
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2019      	movs	r0, #25
 8000aba:	f000 fb19 	bl	80010f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000abe:	2019      	movs	r0, #25
 8000ac0:	f000 fb32 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_InitTick+0x9c>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_InitTick+0x9c>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_InitTick+0x9c>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fcc4 	bl	8004474 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aec:	f003 fcae 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8000af0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <HAL_InitTick+0xa0>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9b      	lsrs	r3, r3, #18
 8000afc:	3b01      	subs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_InitTick+0xa8>)
 8000b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b22:	f004 f901 	bl	8004d28 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_InitTick+0xa4>)
 8000b2e:	f004 f95d 	bl	8004dec <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000618 	.word	0x20000618
 8000b4c:	40010000 	.word	0x40010000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bae:	f004 f995 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000618 	.word	0x20000618

08000bbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <OTG_FS_IRQHandler+0x10>)
 8000bc2:	f001 fece 	bl	8002962 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200081cc 	.word	0x200081cc

08000bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_kill>:

int _kill(int pid, int sig)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <_kill+0x20>)
 8000bec:	2216      	movs	r2, #22
 8000bee:	601a      	str	r2, [r3, #0]
	return -1;
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	200085d0 	.word	0x200085d0

08000c04 <_exit>:

void _exit (int status)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffe5 	bl	8000be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c16:	e7fe      	b.n	8000c16 <_exit+0x12>

08000c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e00a      	b.n	8000c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4601      	mov	r1, r0
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	60ba      	str	r2, [r7, #8]
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf0      	blt.n	8000c2a <_read+0x12>
	}

return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e009      	b.n	8000c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf1      	blt.n	8000c64 <_write+0x12>
	}
	return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_close>:

int _close(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <_isatty>:

int _isatty(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d205      	bcs.n	8000d30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <_sbrk+0x6c>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	371c      	adds	r7, #28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20080000 	.word	0x20080000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	2000021c 	.word	0x2000021c
 8000d5c:	200085e0 	.word	0x200085e0
 8000d60:	200085d0 	.word	0x200085d0

08000d64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000d8e:	f010 f833 	bl	8010df8 <udp_new>
 8000d92:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d01f      	beq.n	8000dda <udp_echoserver_init+0x52>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000d9a:	f241 328c 	movw	r2, #5004	; 0x138c
 8000d9e:	4911      	ldr	r1, [pc, #68]	; (8000de4 <udp_echoserver_init+0x5c>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f00f fea9 	bl	8010af8 <udp_bind>
 8000da6:	4603      	mov	r3, r0
 8000da8:	70fb      	strb	r3, [r7, #3]
      if(IP_ADDR_ANY != NULL)(HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET));
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <udp_echoserver_init+0x60>)
 8000db2:	f001 fc77 	bl	80026a4 <HAL_GPIO_WritePin>
      if(err == ERR_OK)
 8000db6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d10a      	bne.n	8000dd4 <udp_echoserver_init+0x4c>
      {
      	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <udp_echoserver_init+0x60>)
 8000dc4:	f001 fc6e 	bl	80026a4 <HAL_GPIO_WritePin>
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <udp_echoserver_init+0x64>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f00f ffb1 	bl	8010d34 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000dd2:	e002      	b.n	8000dda <udp_echoserver_init+0x52>
        udp_remove(upcb);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f00f ffcd 	bl	8010d74 <udp_remove>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	08017b1c 	.word	0x08017b1c
 8000de8:	40020400 	.word	0x40020400
 8000dec:	08000df1 	.word	0x08000df1

08000df0 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]


  strncpy(str1,p->payload,p->len);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6859      	ldr	r1, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	895b      	ldrh	r3, [r3, #10]
 8000e06:	461a      	mov	r2, r3
 8000e08:	481d      	ldr	r0, [pc, #116]	; (8000e80 <udp_echoserver_receive_callback+0x90>)
 8000e0a:	f013 f9df 	bl	80141cc <strncpy>
  str1[p->len]=0;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	895b      	ldrh	r3, [r3, #10]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <udp_echoserver_receive_callback+0x90>)
 8000e16:	2100      	movs	r1, #0
 8000e18:	5499      	strb	r1, [r3, r2]
  p->payload = str2;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <udp_echoserver_receive_callback+0x94>)
 8000e1e:	605a      	str	r2, [r3, #4]
	  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000e20:	f241 328c 	movw	r2, #5004	; 0x138c
 8000e24:	6839      	ldr	r1, [r7, #0]
 8000e26:	68b8      	ldr	r0, [r7, #8]
 8000e28:	f00f feee 	bl	8010c08 <udp_connect>

  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	68b8      	ldr	r0, [r7, #8]
 8000e30:	f00f fc78 	bl	8010724 <udp_send>

  CDC_Transmit_FS(str1, sizeof(str1));
 8000e34:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <udp_echoserver_receive_callback+0x90>)
 8000e3a:	f012 fba3 	bl	8013584 <CDC_Transmit_FS>
  if(str1[1]!=0){
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <udp_echoserver_receive_callback+0x90>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <udp_echoserver_receive_callback+0x70>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	480f      	ldr	r0, [pc, #60]	; (8000e88 <udp_echoserver_receive_callback+0x98>)
 8000e4c:	f001 fc2a 	bl	80026a4 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000e50:	2014      	movs	r0, #20
 8000e52:	f000 f871 	bl	8000f38 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <udp_echoserver_receive_callback+0x98>)
 8000e5c:	f001 fc22 	bl	80026a4 <HAL_GPIO_WritePin>
  }
  memset(str1,0x00,342);
 8000e60:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8000e64:	2100      	movs	r1, #0
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <udp_echoserver_receive_callback+0x90>)
 8000e68:	f013 f896 	bl	8013f98 <memset>
  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000e6c:	68b8      	ldr	r0, [r7, #8]
 8000e6e:	f00f ff39 	bl	8010ce4 <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f009 fd54 	bl	800a920 <pbuf_free>
   
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000220 	.word	0x20000220
 8000e84:	200005f8 	.word	0x200005f8
 8000e88:	40020400 	.word	0x40020400

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff ff55 	bl	8000d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f013 f81d 	bl	8013ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb8b 	bl	80005d8 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8000ed0:	08017c8c 	.word	0x08017c8c
  ldr r2, =_sbss
 8000ed4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000ed8:	200085e0 	.word	0x200085e0

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>

08000ede <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f8f9 	bl	80010da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff fddb 	bl	8000aa4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f7ff fd3f 	bl	8000970 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000664 	.word	0x20000664

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000664 	.word	0x20000664

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	05fa0000 	.word	0x05fa0000

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff4c 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001102:	f7ff ff61 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 8001106:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f7ff ffb1 	bl	8001074 <NVIC_EncodePriority>
 8001112:	4602      	mov	r2, r0
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff80 	bl	8001020 <__NVIC_SetPriority>
}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff54 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001154:	4ba9      	ldr	r3, [pc, #676]	; (80013fc <HAL_ETH_Init+0x2b8>)
 8001156:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e181      	b.n	800146e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f006 f930 	bl	80073e4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	4b9e      	ldr	r3, [pc, #632]	; (8001400 <HAL_ETH_Init+0x2bc>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	4a9d      	ldr	r2, [pc, #628]	; (8001400 <HAL_ETH_Init+0x2bc>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6453      	str	r3, [r2, #68]	; 0x44
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <HAL_ETH_Init+0x2bc>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800119c:	4b99      	ldr	r3, [pc, #612]	; (8001404 <HAL_ETH_Init+0x2c0>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a98      	ldr	r2, [pc, #608]	; (8001404 <HAL_ETH_Init+0x2c0>)
 80011a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011a6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011a8:	4b96      	ldr	r3, [pc, #600]	; (8001404 <HAL_ETH_Init+0x2c0>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4994      	ldr	r1, [pc, #592]	; (8001404 <HAL_ETH_Init+0x2c0>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0201 	orr.w	r2, r2, #1
 80011c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011cc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ce:	f7ff fea7 	bl	8000f20 <HAL_GetTick>
 80011d2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011d4:	e011      	b.n	80011fa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011d6:	f7ff fea3 	bl	8000f20 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011e4:	d909      	bls.n	80011fa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e139      	b.n	800146e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e4      	bne.n	80011d6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f023 031c 	bic.w	r3, r3, #28
 800121a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800121c:	f003 f8f6 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8001220:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4a78      	ldr	r2, [pc, #480]	; (8001408 <HAL_ETH_Init+0x2c4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d908      	bls.n	800123c <HAL_ETH_Init+0xf8>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4a77      	ldr	r2, [pc, #476]	; (800140c <HAL_ETH_Init+0x2c8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d804      	bhi.n	800123c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e027      	b.n	800128c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4a73      	ldr	r2, [pc, #460]	; (800140c <HAL_ETH_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d908      	bls.n	8001256 <HAL_ETH_Init+0x112>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4a6d      	ldr	r2, [pc, #436]	; (80013fc <HAL_ETH_Init+0x2b8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d204      	bcs.n	8001256 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f043 030c 	orr.w	r3, r3, #12
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	e01a      	b.n	800128c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4a68      	ldr	r2, [pc, #416]	; (80013fc <HAL_ETH_Init+0x2b8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d303      	bcc.n	8001266 <HAL_ETH_Init+0x122>
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4a6b      	ldr	r2, [pc, #428]	; (8001410 <HAL_ETH_Init+0x2cc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d911      	bls.n	800128a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_ETH_Init+0x2cc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d908      	bls.n	8001280 <HAL_ETH_Init+0x13c>
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4a68      	ldr	r2, [pc, #416]	; (8001414 <HAL_ETH_Init+0x2d0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d804      	bhi.n	8001280 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e005      	b.n	800128c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	e000      	b.n	800128c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800128a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001294:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001298:	2100      	movs	r1, #0
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fb98 	bl	80019d0 <HAL_ETH_WritePHYRegister>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fd4d 	bl	8001d4c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0d7      	b.n	800146e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012be:	20ff      	movs	r0, #255	; 0xff
 80012c0:	f7ff fe3a 	bl	8000f38 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a5 	beq.w	8001418 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ce:	f7ff fe27 	bl	8000f20 <HAL_GetTick>
 80012d2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	461a      	mov	r2, r3
 80012da:	2101      	movs	r1, #1
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fb0f 	bl	8001900 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012e2:	f7ff fe1d 	bl	8000f20 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d90f      	bls.n	8001314 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fd26 	bl	8001d4c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e0ac      	b.n	800146e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0da      	beq.n	80012d4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800131e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fb53 	bl	80019d0 <HAL_ETH_WritePHYRegister>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fd08 	bl	8001d4c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001344:	2301      	movs	r3, #1
 8001346:	e092      	b.n	800146e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001348:	f7ff fdea 	bl	8000f20 <HAL_GetTick>
 800134c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	461a      	mov	r2, r3
 8001354:	2101      	movs	r1, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fad2 	bl	8001900 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800135c:	f7ff fde0 	bl	8000f20 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d90f      	bls.n	800138e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001372:	6939      	ldr	r1, [r7, #16]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fce9 	bl	8001d4c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e06f      	b.n	800146e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0da      	beq.n	800134e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	461a      	mov	r2, r3
 800139e:	2110      	movs	r1, #16
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 faad 	bl	8001900 <HAL_ETH_ReadPHYRegister>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fcca 	bl	8001d4c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013c0:	2301      	movs	r3, #1
 80013c2:	e054      	b.n	800146e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	e002      	b.n	80013de <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e035      	b.n	800145c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	e030      	b.n	800145c <HAL_ETH_Init+0x318>
 80013fa:	bf00      	nop
 80013fc:	03938700 	.word	0x03938700
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	01312cff 	.word	0x01312cff
 800140c:	02160ebf 	.word	0x02160ebf
 8001410:	05f5e0ff 	.word	0x05f5e0ff
 8001414:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001428:	4313      	orrs	r3, r2
 800142a:	b29b      	uxth	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 facd 	bl	80019d0 <HAL_ETH_WritePHYRegister>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001440:	6939      	ldr	r1, [r7, #16]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fc82 	bl	8001d4c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e00c      	b.n	800146e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001454:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001458:	f7ff fd6e 	bl	8000f38 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800145c:	6939      	ldr	r1, [r7, #16]
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fc74 	bl	8001d4c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3720      	adds	r7, #32
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop

08001478 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_ETH_DMATxDescListInit+0x20>
 8001494:	2302      	movs	r3, #2
 8001496:	e052      	b.n	800153e <HAL_ETH_DMATxDescListInit+0xc6>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e030      	b.n	8001516 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	015b      	lsls	r3, r3, #5
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	4413      	add	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014c4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d208      	bcs.n	800150a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	015b      	lsls	r3, r3, #5
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4413      	add	r3, r2
 8001502:	461a      	mov	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	e002      	b.n	8001510 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	3301      	adds	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d3ca      	bcc.n	80014b4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f241 0310 	movw	r3, #4112	; 0x1010
 8001528:	440b      	add	r3, r1
 800152a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800154a:	b480      	push	{r7}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	60b9      	str	r1, [r7, #8]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_ETH_DMARxDescListInit+0x20>
 8001566:	2302      	movs	r3, #2
 8001568:	e056      	b.n	8001618 <HAL_ETH_DMARxDescListInit+0xce>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e034      	b.n	80015f0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	015b      	lsls	r3, r3, #5
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	4413      	add	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001596:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800159e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	461a      	mov	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d208      	bcs.n	80015e4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	4413      	add	r3, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e002      	b.n	80015ea <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3c6      	bcc.n	8001586 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	f241 030c 	movw	r3, #4108	; 0x100c
 8001602:	440b      	add	r3, r1
 8001604:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ETH_TransmitFrame+0x24>
 8001644:	2302      	movs	r3, #2
 8001646:	e0cd      	b.n	80017e4 <HAL_ETH_TransmitFrame+0x1c0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800166e:	2301      	movs	r3, #1
 8001670:	e0b8      	b.n	80017e4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	da09      	bge.n	8001690 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2212      	movs	r2, #18
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0a9      	b.n	80017e4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001696:	4293      	cmp	r3, r2
 8001698:	d915      	bls.n	80016c6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	4a54      	ldr	r2, [pc, #336]	; (80017f0 <HAL_ETH_TransmitFrame+0x1cc>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0a9b      	lsrs	r3, r3, #10
 80016a4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_ETH_TransmitFrame+0x1cc>)
 80016aa:	fba3 1302 	umull	r1, r3, r3, r2
 80016ae:	0a9b      	lsrs	r3, r3, #10
 80016b0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e001      	b.n	80016ca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d11c      	bne.n	800170a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016de:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016ea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016fa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
 8001708:	e04b      	b.n	80017a2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	e044      	b.n	800179a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800171e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001734:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800173e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3b01      	subs	r3, #1
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	429a      	cmp	r2, r3
 8001748:	d116      	bne.n	8001778 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001758:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <HAL_ETH_TransmitFrame+0x1d0>)
 800175e:	fb02 f203 	mul.w	r2, r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800176a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001776:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001786:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	461a      	mov	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	3301      	adds	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3b6      	bcc.n	8001710 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	f241 0314 	movw	r3, #4116	; 0x1014
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f241 0314 	movw	r3, #4116	; 0x1014
 80017be:	4413      	add	r3, r2
 80017c0:	2204      	movs	r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f241 0304 	movw	r3, #4100	; 0x1004
 80017cc:	4413      	add	r3, r2
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	ac02b00b 	.word	0xac02b00b
 80017f4:	fffffa0c 	.word	0xfffffa0c

080017f8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ETH_GetReceivedFrame+0x1a>
 800180e:	2302      	movs	r3, #2
 8001810:	e070      	b.n	80018f4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db5a      	blt.n	80018e2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d030      	beq.n	800189c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001848:	2b01      	cmp	r3, #1
 800184a:	d103      	bne.n	8001854 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0c1b      	lsrs	r3, r3, #16
 8001864:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001868:	3b04      	subs	r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e02b      	b.n	80018f4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d010      	beq.n	80018cc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
 80018ca:	e00a      	b.n	80018e2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	461a      	mov	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	460b      	mov	r3, r1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b82      	cmp	r3, #130	; 0x82
 8001920:	d101      	bne.n	8001926 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	e050      	b.n	80019c8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2282      	movs	r2, #130	; 0x82
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 031c 	and.w	r3, r3, #28
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8a1b      	ldrh	r3, [r3, #16]
 8001942:	02db      	lsls	r3, r3, #11
 8001944:	b29b      	uxth	r3, r3
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	019b      	lsls	r3, r3, #6
 8001950:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f023 0302 	bic.w	r3, r3, #2
 8001960:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001972:	f7ff fad5 	bl	8000f20 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001978:	e015      	b.n	80019a6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800197a:	f7ff fad1 	bl	8000f20 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d309      	bcc.n	800199e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e014      	b.n	80019c8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e4      	bne.n	800197a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	460b      	mov	r3, r1
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b42      	cmp	r3, #66	; 0x42
 80019f0:	d101      	bne.n	80019f6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	e04e      	b.n	8001a94 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2242      	movs	r2, #66	; 0x42
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 031c 	and.w	r3, r3, #28
 8001a0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8a1b      	ldrh	r3, [r3, #16]
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a1c:	897b      	ldrh	r3, [r7, #10]
 8001a1e:	019b      	lsls	r3, r3, #6
 8001a20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fa68 	bl	8000f20 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a52:	e015      	b.n	8001a80 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a54:	f7ff fa64 	bl	8000f20 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d309      	bcc.n	8001a78 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e00d      	b.n	8001a94 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e4      	bne.n	8001a54 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ETH_Start+0x16>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e01f      	b.n	8001af2 <HAL_ETH_Start+0x56>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fb44 	bl	8002150 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fb7b 	bl	80021c4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fc12 	bl	80022f8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fbaf 	bl	8002238 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fbdc 	bl	8002298 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_ETH_Stop+0x16>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e01f      	b.n	8001b50 <HAL_ETH_Stop+0x56>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fba1 	bl	8002268 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fbce 	bl	80022c8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fb66 	bl	80021fe <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fbe0 	bl	80022f8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fb26 	bl	800218a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_ETH_ConfigMAC+0x1c>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0e4      	b.n	8001d3e <HAL_ETH_ConfigMAC+0x1e6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80b1 	beq.w	8001cee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ba4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001baa:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001bb0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001bb6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001bbc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001bc2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001bc8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001bce:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001bd4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001bda:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001be0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001be6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff f99a 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c14:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c1a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c20:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c26:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c2c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c32:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c3e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c40:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff f974 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c60:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c6a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c82:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001c88:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c8e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c94:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c9a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ca0:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff f93d 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff f92a 	bl	8000f38 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	61da      	str	r2, [r3, #28]
 8001cec:	e01e      	b.n	8001d2c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cfc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff f90a 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	ff20810f 	.word	0xff20810f

08001d4c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0b0      	sub	sp, #192	; 0xc0
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d68:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d70:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d103      	bne.n	8001d9a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d96:	663b      	str	r3, [r7, #96]	; 0x60
 8001d98:	e001      	b.n	8001d9e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001da8:	2300      	movs	r3, #0
 8001daa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001db8:	2340      	movs	r3, #64	; 0x40
 8001dba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e24:	4bab      	ldr	r3, [pc, #684]	; (80020d4 <ETH_MACDMAConfig+0x388>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e30:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e34:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e38:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e3e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e42:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001e46:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001e4c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001e50:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e54:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e58:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e5c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e60:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001e62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7ff f859 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e8e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e94:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e98:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e9e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ea4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001eaa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001eb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ebc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ebe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7ff f834 	bl	8000f38 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ee2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001eec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f00:	4013      	ands	r3, r2
 8001f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f0a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f10:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f16:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f1c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f22:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f28:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f3c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7fe fff5 	bl	8000f38 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f56:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f58:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f7fe ffe0 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f80:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f94:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fd6:	4413      	add	r3, r2
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001fde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <ETH_MACDMAConfig+0x38c>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001fec:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ff0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ff2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ff4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ff6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ff8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ffa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ffc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001ffe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002000:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002002:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002006:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800200a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800200c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f241 0318 	movw	r3, #4120	; 0x1018
 800201e:	4413      	add	r3, r2
 8002020:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002024:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 0318 	movw	r3, #4120	; 0x1018
 800202e:	4413      	add	r3, r2
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002036:	2001      	movs	r0, #1
 8002038:	f7fe ff7e 	bl	8000f38 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f241 0318 	movw	r3, #4120	; 0x1018
 8002044:	4413      	add	r3, r2
 8002046:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800204c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002050:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002054:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002058:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800205c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002060:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002062:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002066:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002074:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002084:	2001      	movs	r0, #1
 8002086:	f7fe ff57 	bl	8000f38 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002092:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002096:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10d      	bne.n	80020bc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80020a8:	4413      	add	r3, r2
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6811      	ldr	r1, [r2, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <ETH_MACDMAConfig+0x390>)
 80020b2:	431a      	orrs	r2, r3
 80020b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80020b8:	440b      	add	r3, r1
 80020ba:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	461a      	mov	r2, r3
 80020c2:	2100      	movs	r1, #0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f80b 	bl	80020e0 <ETH_MACAddressConfig>
}
 80020ca:	bf00      	nop
 80020cc:	37c0      	adds	r7, #192	; 0xc0
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	ff20810f 	.word	0xff20810f
 80020d8:	f8de3f23 	.word	0xf8de3f23
 80020dc:	00010040 	.word	0x00010040

080020e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	3204      	adds	r2, #4
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <ETH_MACAddressConfig+0x68>)
 8002102:	4413      	add	r3, r2
 8002104:	461a      	mov	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3303      	adds	r3, #3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	061a      	lsls	r2, r3, #24
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3302      	adds	r3, #2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3301      	adds	r3, #1
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	4313      	orrs	r3, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <ETH_MACAddressConfig+0x6c>)
 8002132:	4413      	add	r3, r2
 8002134:	461a      	mov	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40028040 	.word	0x40028040
 800214c:	40028044 	.word	0x40028044

08002150 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0208 	orr.w	r2, r2, #8
 800216a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002174:	2001      	movs	r0, #1
 8002176:	f7fe fedf 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0208 	bic.w	r2, r2, #8
 80021a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe fec2 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0204 	orr.w	r2, r2, #4
 80021de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7fe fea5 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0204 	bic.w	r2, r2, #4
 8002218:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002222:	2001      	movs	r0, #1
 8002224:	f7fe fe88 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f241 0318 	movw	r3, #4120	; 0x1018
 8002248:	4413      	add	r3, r2
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6811      	ldr	r1, [r2, #0]
 8002250:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002254:	f241 0318 	movw	r3, #4120	; 0x1018
 8002258:	440b      	add	r3, r1
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	f241 0318 	movw	r3, #4120	; 0x1018
 8002278:	4413      	add	r3, r2
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6811      	ldr	r1, [r2, #0]
 8002280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002284:	f241 0318 	movw	r3, #4120	; 0x1018
 8002288:	440b      	add	r3, r1
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	f043 0202 	orr.w	r2, r3, #2
 80022b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b8:	440b      	add	r3, r1
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6811      	ldr	r1, [r2, #0]
 80022e0:	f023 0202 	bic.w	r2, r3, #2
 80022e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80022e8:	440b      	add	r3, r1
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	f241 0318 	movw	r3, #4120	; 0x1018
 800230c:	4413      	add	r3, r2
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6811      	ldr	r1, [r2, #0]
 8002314:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002318:	f241 0318 	movw	r3, #4120	; 0x1018
 800231c:	440b      	add	r3, r1
 800231e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	f241 0318 	movw	r3, #4120	; 0x1018
 8002328:	4413      	add	r3, r2
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800232e:	2001      	movs	r0, #1
 8002330:	f7fe fe02 	bl	8000f38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	f241 0318 	movw	r3, #4120	; 0x1018
 800233e:	440b      	add	r3, r1
 8002340:	601a      	str	r2, [r3, #0]
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e175      	b.n	8002658 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8164 	bne.w	8002652 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d00b      	beq.n	80023aa <HAL_GPIO_Init+0x5e>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800239e:	2b11      	cmp	r3, #17
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b12      	cmp	r3, #18
 80023a8:	d130      	bne.n	800240c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0201 	and.w	r2, r3, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x100>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b12      	cmp	r3, #18
 800244a:	d123      	bne.n	8002494 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80be 	beq.w	8002652 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_GPIO_Init+0x324>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_GPIO_Init+0x324>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_GPIO_Init+0x324>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ee:	4a61      	ldr	r2, [pc, #388]	; (8002674 <HAL_GPIO_Init+0x328>)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_GPIO_Init+0x32c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d037      	beq.n	800258a <HAL_GPIO_Init+0x23e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_GPIO_Init+0x330>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d031      	beq.n	8002586 <HAL_GPIO_Init+0x23a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a56      	ldr	r2, [pc, #344]	; (8002680 <HAL_GPIO_Init+0x334>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d02b      	beq.n	8002582 <HAL_GPIO_Init+0x236>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a55      	ldr	r2, [pc, #340]	; (8002684 <HAL_GPIO_Init+0x338>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d025      	beq.n	800257e <HAL_GPIO_Init+0x232>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a54      	ldr	r2, [pc, #336]	; (8002688 <HAL_GPIO_Init+0x33c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d01f      	beq.n	800257a <HAL_GPIO_Init+0x22e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a53      	ldr	r2, [pc, #332]	; (800268c <HAL_GPIO_Init+0x340>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d019      	beq.n	8002576 <HAL_GPIO_Init+0x22a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_GPIO_Init+0x344>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0x226>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a51      	ldr	r2, [pc, #324]	; (8002694 <HAL_GPIO_Init+0x348>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00d      	beq.n	800256e <HAL_GPIO_Init+0x222>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a50      	ldr	r2, [pc, #320]	; (8002698 <HAL_GPIO_Init+0x34c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x21e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	; (800269c <HAL_GPIO_Init+0x350>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d101      	bne.n	8002566 <HAL_GPIO_Init+0x21a>
 8002562:	2309      	movs	r3, #9
 8002564:	e012      	b.n	800258c <HAL_GPIO_Init+0x240>
 8002566:	230a      	movs	r3, #10
 8002568:	e010      	b.n	800258c <HAL_GPIO_Init+0x240>
 800256a:	2308      	movs	r3, #8
 800256c:	e00e      	b.n	800258c <HAL_GPIO_Init+0x240>
 800256e:	2307      	movs	r3, #7
 8002570:	e00c      	b.n	800258c <HAL_GPIO_Init+0x240>
 8002572:	2306      	movs	r3, #6
 8002574:	e00a      	b.n	800258c <HAL_GPIO_Init+0x240>
 8002576:	2305      	movs	r3, #5
 8002578:	e008      	b.n	800258c <HAL_GPIO_Init+0x240>
 800257a:	2304      	movs	r3, #4
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x240>
 800257e:	2303      	movs	r3, #3
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x240>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x240>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x240>
 800258a:	2300      	movs	r3, #0
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800259c:	4935      	ldr	r1, [pc, #212]	; (8002674 <HAL_GPIO_Init+0x328>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025aa:	4b3d      	ldr	r3, [pc, #244]	; (80026a0 <HAL_GPIO_Init+0x354>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ce:	4a34      	ldr	r2, [pc, #208]	; (80026a0 <HAL_GPIO_Init+0x354>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <HAL_GPIO_Init+0x354>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025f8:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_GPIO_Init+0x354>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_GPIO_Init+0x354>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002622:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <HAL_GPIO_Init+0x354>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_GPIO_Init+0x354>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_GPIO_Init+0x354>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	f67f ae86 	bls.w	800236c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40013800 	.word	0x40013800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020400 	.word	0x40020400
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40021400 	.word	0x40021400
 8002690:	40021800 	.word	0x40021800
 8002694:	40021c00 	.word	0x40021c00
 8002698:	40022000 	.word	0x40022000
 800269c:	40022400 	.word	0x40022400
 80026a0:	40013c00 	.word	0x40013c00

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
 80026b0:	4613      	mov	r3, r2
 80026b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b4:	787b      	ldrb	r3, [r7, #1]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ba:	887a      	ldrh	r2, [r7, #2]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	619a      	str	r2, [r3, #24]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d8:	b08f      	sub	sp, #60	; 0x3c
 80026da:	af0a      	add	r7, sp, #40	; 0x28
 80026dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e116      	b.n	8002916 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f011 f898 	bl	8013838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2203      	movs	r2, #3
 800270c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f003 fb01 	bl	8005d2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	687e      	ldr	r6, [r7, #4]
 8002734:	466d      	mov	r5, sp
 8002736:	f106 0410 	add.w	r4, r6, #16
 800273a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002746:	e885 0003 	stmia.w	r5, {r0, r1}
 800274a:	1d33      	adds	r3, r6, #4
 800274c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f003 f9e2 	bl	8005b18 <USB_CoreInit>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e0d7      	b.n	8002916 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f003 faef 	bl	8005d50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e04a      	b.n	800280e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	333d      	adds	r3, #61	; 0x3d
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	333c      	adds	r3, #60	; 0x3c
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	b298      	uxth	r0, r3
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3342      	adds	r3, #66	; 0x42
 80027b4:	4602      	mov	r2, r0
 80027b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	333f      	adds	r3, #63	; 0x3f
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3344      	adds	r3, #68	; 0x44
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3348      	adds	r3, #72	; 0x48
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3350      	adds	r3, #80	; 0x50
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	3301      	adds	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d3af      	bcc.n	8002778 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e044      	b.n	80028a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	3301      	adds	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3b5      	bcc.n	800281e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	687e      	ldr	r6, [r7, #4]
 80028ba:	466d      	mov	r5, sp
 80028bc:	f106 0410 	add.w	r4, r6, #16
 80028c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80028d0:	1d33      	adds	r3, r6, #4
 80028d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f003 fa65 	bl	8005da4 <USB_DevInit>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e014      	b.n	8002916 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2b01      	cmp	r3, #1
 8002902:	d102      	bne.n	800290a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f001 f881 	bl	8003a0c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f004 fabd 	bl	8006e8e <USB_DevDisconnect>

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800291e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_PCD_Start+0x16>
 8002930:	2302      	movs	r3, #2
 8002932:	e012      	b.n	800295a <HAL_PCD_Start+0x3c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 f9e3 	bl	8005d0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fa7e 	bl	8006e4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002962:	b590      	push	{r4, r7, lr}
 8002964:	b08d      	sub	sp, #52	; 0x34
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f004 fb3c 	bl	8006ff6 <USB_GetMode>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 83ca 	bne.w	800311a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f004 faa0 	bl	8006ed0 <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 83c0 	beq.w	8003118 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fa97 	bl	8006ed0 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f002 0202 	and.w	r2, r2, #2
 80029ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fa85 	bl	8006ed0 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	d161      	bne.n	8002a94 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0210 	bic.w	r2, r2, #16
 80029de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	0c5b      	lsrs	r3, r3, #17
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d124      	bne.n	8002a56 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d035      	beq.n	8002a84 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	6a38      	ldr	r0, [r7, #32]
 8002a2c:	f004 f8eb 	bl	8006c06 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3c:	441a      	add	r2, r3
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	091b      	lsrs	r3, r3, #4
 8002a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4e:	441a      	add	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	619a      	str	r2, [r3, #24]
 8002a54:	e016      	b.n	8002a84 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	0c5b      	lsrs	r3, r3, #17
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d110      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6a38      	ldr	r0, [r7, #32]
 8002a6e:	f004 f8ca 	bl	8006c06 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7e:	441a      	add	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0210 	orr.w	r2, r2, #16
 8002a92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 fa19 	bl	8006ed0 <USB_ReadInterrupts>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aa8:	d16e      	bne.n	8002b88 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f004 fa1f 	bl	8006ef6 <USB_ReadDevAllOutEpInterrupt>
 8002ab8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002aba:	e062      	b.n	8002b82 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d057      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fa44 	bl	8006f5e <USB_ReadDevOutEPInterrupt>
 8002ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aee:	461a      	mov	r2, r3
 8002af0:	2301      	movs	r3, #1
 8002af2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fdde 	bl	80036b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b12:	461a      	mov	r2, r3
 8002b14:	2308      	movs	r3, #8
 8002b16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fed8 	bl	80038d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	2310      	movs	r3, #16
 8002b3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b52:	461a      	mov	r2, r3
 8002b54:	2320      	movs	r3, #32
 8002b56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	085b      	lsrs	r3, r3, #1
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d199      	bne.n	8002abc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 f99f 	bl	8006ed0 <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b9c:	f040 80c0 	bne.w	8002d20 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 f9c0 	bl	8006f2a <USB_ReadDevAllInEpInterrupt>
 8002baa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bb0:	e0b2      	b.n	8002d18 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a7 	beq.w	8002d0c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 f9e6 	bl	8006f9a <USB_ReadDevInEPInterrupt>
 8002bce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d057      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	2201      	movs	r2, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69f9      	ldr	r1, [r7, #28]
 8002bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d132      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3348      	adds	r3, #72	; 0x48
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4403      	add	r3, r0
 8002c38:	3344      	adds	r3, #68	; 0x44
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4419      	add	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4403      	add	r3, r0
 8002c4c:	3348      	adds	r3, #72	; 0x48
 8002c4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x31c>
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3350      	adds	r3, #80	; 0x50
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c76:	461a      	mov	r2, r3
 8002c78:	2101      	movs	r1, #1
 8002c7a:	f004 f9ef 	bl	800705c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f010 fe68 	bl	801395a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fc48 	bl	800359c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3301      	adds	r3, #1
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f47f af49 	bne.w	8002bb2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 f8d3 	bl	8006ed0 <USB_ReadInterrupts>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d34:	d122      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f011 f84a 	bl	8013df8 <HAL_PCDEx_LPM_Callback>
 8002d64:	e002      	b.n	8002d6c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f010 fe6e 	bl	8013a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 f8a5 	bl	8006ed0 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d90:	d112      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f010 fe2a 	bl	80139fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 f887 	bl	8006ed0 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dcc:	d121      	bne.n	8002e12 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ddc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e02:	2101      	movs	r1, #1
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f010 fff7 	bl	8013df8 <HAL_PCDEx_LPM_Callback>
 8002e0a:	e002      	b.n	8002e12 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f010 fdf5 	bl	80139fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 f85a 	bl	8006ed0 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e26:	f040 80c7 	bne.w	8002fb8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2110      	movs	r1, #16
 8002e44:	4618      	mov	r0, r3
 8002e46:	f003 f91b 	bl	8006080 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4e:	e056      	b.n	8002efe <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e74:	0151      	lsls	r1, r2, #5
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	440a      	add	r2, r1
 8002e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e82:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e94:	0151      	lsls	r1, r2, #5
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	440a      	add	r2, r1
 8002e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ea2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec8:	0151      	lsls	r1, r2, #5
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	440a      	add	r2, r1
 8002ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ed6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee8:	0151      	lsls	r1, r2, #5
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	440a      	add	r2, r1
 8002eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ef6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	3301      	adds	r3, #1
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3a3      	bcc.n	8002e50 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d016      	beq.n	8002f52 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f34:	f043 030b 	orr.w	r3, r3, #11
 8002f38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	69fa      	ldr	r2, [r7, #28]
 8002f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4a:	f043 030b 	orr.w	r3, r3, #11
 8002f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f50:	e015      	b.n	8002f7e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f60:	4619      	mov	r1, r3
 8002f62:	f242 032b 	movw	r3, #8235	; 0x202b
 8002f66:	4313      	orrs	r3, r2
 8002f68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f78:	f043 030b 	orr.w	r3, r3, #11
 8002f7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f004 f85a 	bl	800705c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 ff87 	bl	8006ed0 <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fcc:	d124      	bne.n	8003018 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 f81e 	bl	8007014 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 f8b0 	bl	8006142 <USB_GetDevSpeed>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681c      	ldr	r4, [r3, #0]
 8002fee:	f001 fa0d 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8002ff2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f002 fde3 	bl	8005bc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f010 fcd1 	bl	80139aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003016:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 ff57 	bl	8006ed0 <USB_ReadInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d10a      	bne.n	8003042 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f010 fcae 	bl	801398e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f002 0208 	and.w	r2, r2, #8
 8003040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 ff42 	bl	8006ed0 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003056:	d10f      	bne.n	8003078 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f010 fd10 	bl	8013a88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003076:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 ff27 	bl	8006ed0 <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800308c:	d10f      	bne.n	80030ae <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	b2db      	uxtb	r3, r3
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f010 fce3 	bl	8013a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80030ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 ff0c 	bl	8006ed0 <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d10a      	bne.n	80030da <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f010 fcf1 	bl	8013aac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fef6 	bl	8006ed0 <USB_ReadInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d115      	bne.n	800311a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f010 fce1 	bl	8013ac8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	e000      	b.n	800311a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003118:	bf00      	nop
    }
  }
}
 800311a:	3734      	adds	r7, #52	; 0x34
 800311c:	46bd      	mov	sp, r7
 800311e:	bd90      	pop	{r4, r7, pc}

08003120 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_PCD_SetAddress+0x1a>
 8003136:	2302      	movs	r3, #2
 8003138:	e013      	b.n	8003162 <HAL_PCD_SetAddress+0x42>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f003 fe54 	bl	8006e00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	4608      	mov	r0, r1
 8003174:	4611      	mov	r1, r2
 8003176:	461a      	mov	r2, r3
 8003178:	4603      	mov	r3, r0
 800317a:	70fb      	strb	r3, [r7, #3]
 800317c:	460b      	mov	r3, r1
 800317e:	803b      	strh	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da0f      	bge.n	80031b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 020f 	and.w	r2, r3, #15
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	3338      	adds	r3, #56	; 0x38
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	4413      	add	r3, r2
 80031a4:	3304      	adds	r3, #4
 80031a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	705a      	strb	r2, [r3, #1]
 80031ae:	e00f      	b.n	80031d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	f003 020f 	and.w	r2, r3, #15
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031dc:	883a      	ldrh	r2, [r7, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	78ba      	ldrb	r2, [r7, #2]
 80031e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	785b      	ldrb	r3, [r3, #1]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031fa:	78bb      	ldrb	r3, [r7, #2]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d102      	bne.n	8003206 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_PCD_EP_Open+0xaa>
 8003210:	2302      	movs	r3, #2
 8003212:	e00e      	b.n	8003232 <HAL_PCD_EP_Open+0xc8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 ffb2 	bl	800618c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003230:	7afb      	ldrb	r3, [r7, #11]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324a:	2b00      	cmp	r3, #0
 800324c:	da0f      	bge.n	800326e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 020f 	and.w	r2, r3, #15
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	3338      	adds	r3, #56	; 0x38
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	705a      	strb	r2, [r3, #1]
 800326c:	e00f      	b.n	800328e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	3304      	adds	r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_PCD_EP_Close+0x6e>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e00e      	b.n	80032c6 <HAL_PCD_EP_Close+0x8c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fff0 	bl	800629c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	460b      	mov	r3, r1
 80032dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032de:	7afb      	ldrb	r3, [r7, #11]
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003310:	7afb      	ldrb	r3, [r7, #11]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	b2da      	uxtb	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	f003 fad3 	bl	80068ec <USB_EP0StartXfer>
 8003346:	e008      	b.n	800335a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	6979      	ldr	r1, [r7, #20]
 8003356:	f003 f87d 	bl	8006454 <USB_EPStartXfer>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 020f 	and.w	r2, r3, #15
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	7afb      	ldrb	r3, [r7, #11]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3338      	adds	r3, #56	; 0x38
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2201      	movs	r2, #1
 80033d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d4:	7afb      	ldrb	r3, [r7, #11]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	f003 fa71 	bl	80068ec <USB_EP0StartXfer>
 800340a:	e008      	b.n	800341e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	f003 f81b 	bl	8006454 <USB_EPStartXfer>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	d901      	bls.n	8003446 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e050      	b.n	80034e8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da0f      	bge.n	800346e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	f003 020f 	and.w	r2, r3, #15
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3338      	adds	r3, #56	; 0x38
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	705a      	strb	r2, [r3, #1]
 800346c:	e00d      	b.n	800348a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_PCD_EP_SetStall+0x82>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e01e      	b.n	80034e8 <HAL_PCD_EP_SetStall+0xc0>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 fbcd 	bl	8006c58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	b2d9      	uxtb	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034d8:	461a      	mov	r2, r3
 80034da:	f003 fdbf 	bl	800705c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 020f 	and.w	r2, r3, #15
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d901      	bls.n	800350e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e042      	b.n	8003594 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0f      	bge.n	8003536 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3338      	adds	r3, #56	; 0x38
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	705a      	strb	r2, [r3, #1]
 8003534:	e00f      	b.n	8003556 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_PCD_EP_ClrStall+0x86>
 8003572:	2302      	movs	r3, #2
 8003574:	e00e      	b.n	8003594 <HAL_PCD_EP_ClrStall+0xa4>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	4618      	mov	r0, r3
 8003586:	f003 fbd5 	bl	8006d34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	3338      	adds	r3, #56	; 0x38
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d901      	bls.n	80035d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e06c      	b.n	80036ae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d902      	bls.n	80035f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3303      	adds	r3, #3
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f8:	e02b      	b.n	8003652 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	429a      	cmp	r2, r3
 800360e:	d902      	bls.n	8003616 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3303      	adds	r3, #3
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800362e:	b2db      	uxtb	r3, r3
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4603      	mov	r3, r0
 8003634:	6978      	ldr	r0, [r7, #20]
 8003636:	f003 fab1 	bl	8006b9c <USB_WritePacket>

    ep->xfer_buff  += len;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	441a      	add	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	441a      	add	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	b29b      	uxth	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d809      	bhi.n	800367c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003670:	429a      	cmp	r2, r3
 8003672:	d203      	bcs.n	800367c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1be      	bne.n	80035fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	429a      	cmp	r2, r3
 8003686:	d811      	bhi.n	80036ac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	2201      	movs	r2, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	6939      	ldr	r1, [r7, #16]
 80036a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a8:	4013      	ands	r3, r2
 80036aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	333c      	adds	r3, #60	; 0x3c
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f040 80a0 	bne.w	8003830 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f240 80dd 	bls.w	80038be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80d7 	beq.w	80038be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	461a      	mov	r2, r3
 800371e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003722:	6093      	str	r3, [r2, #8]
 8003724:	e0cb      	b.n	80038be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373c:	461a      	mov	r2, r3
 800373e:	2320      	movs	r3, #32
 8003740:	6093      	str	r3, [r2, #8]
 8003742:	e0bc      	b.n	80038be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 80b7 	bne.w	80038be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d90f      	bls.n	8003778 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376e:	461a      	mov	r2, r3
 8003770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003774:	6093      	str	r3, [r2, #8]
 8003776:	e0a2      	b.n	80038be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800378a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	440b      	add	r3, r1
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800379e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4403      	add	r3, r0
 80037ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4403      	add	r3, r0
 80037d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4419      	add	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4403      	add	r3, r0
 80037ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d114      	bne.n	8003822 <PCD_EP_OutXfrComplete_int+0x16a>
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d108      	bne.n	8003822 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800381a:	461a      	mov	r2, r3
 800381c:	2101      	movs	r1, #1
 800381e:	f003 fc1d 	bl	800705c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f010 f87b 	bl	8013924 <HAL_PCD_DataOutStageCallback>
 800382e:	e046      	b.n	80038be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a26      	ldr	r2, [pc, #152]	; (80038cc <PCD_EP_OutXfrComplete_int+0x214>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d124      	bne.n	8003882 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003854:	6093      	str	r3, [r2, #8]
 8003856:	e032      	b.n	80038be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	461a      	mov	r2, r3
 8003870:	2320      	movs	r3, #32
 8003872:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4619      	mov	r1, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f010 f852 	bl	8013924 <HAL_PCD_DataOutStageCallback>
 8003880:	e01d      	b.n	80038be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d114      	bne.n	80038b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038aa:	461a      	mov	r2, r3
 80038ac:	2100      	movs	r1, #0
 80038ae:	f003 fbd5 	bl	800705c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f010 f833 	bl	8013924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	4f54300a 	.word	0x4f54300a
 80038cc:	4f54310a 	.word	0x4f54310a

080038d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	333c      	adds	r3, #60	; 0x3c
 80038e8:	3304      	adds	r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <PCD_EP_OutSetupPacket_int+0x88>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d90e      	bls.n	8003924 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	461a      	mov	r2, r3
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f00f ffeb 	bl	8013900 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <PCD_EP_OutSetupPacket_int+0x88>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d90c      	bls.n	800394c <PCD_EP_OutSetupPacket_int+0x7c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d108      	bne.n	800394c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003944:	461a      	mov	r2, r3
 8003946:	2101      	movs	r1, #1
 8003948:	f003 fb88 	bl	800705c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	4f54300a 	.word	0x4f54300a

0800395c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	70fb      	strb	r3, [r7, #3]
 8003968:	4613      	mov	r3, r2
 800396a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800397a:	883b      	ldrh	r3, [r7, #0]
 800397c:	0419      	lsls	r1, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	430a      	orrs	r2, r1
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
 8003988:	e028      	b.n	80039dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4413      	add	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e00d      	b.n	80039ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	3340      	adds	r3, #64	; 0x40
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	4413      	add	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	3301      	adds	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	7bfa      	ldrb	r2, [r7, #15]
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	3b01      	subs	r3, #1
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d3ec      	bcc.n	800399e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039c4:	883b      	ldrh	r3, [r7, #0]
 80039c6:	0418      	lsls	r0, r3, #16
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	4302      	orrs	r2, r0
 80039d4:	3340      	adds	r3, #64	; 0x40
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	10000003 	.word	0x10000003

08003a54 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40007000 	.word	0x40007000

08003a74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4b23      	ldr	r3, [pc, #140]	; (8003b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a88:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_PWREx_EnableOverDrive+0x98>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa2:	f7fd fa3d 	bl	8000f20 <HAL_GetTick>
 8003aa6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003aa8:	e009      	b.n	8003abe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aaa:	f7fd fa39 	bl	8000f20 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab8:	d901      	bls.n	8003abe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e022      	b.n	8003b04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aca:	d1ee      	bne.n	8003aaa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad8:	f7fd fa22 	bl	8000f20 <HAL_GetTick>
 8003adc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ade:	e009      	b.n	8003af4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ae0:	f7fd fa1e 	bl	8000f20 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aee:	d901      	bls.n	8003af4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e007      	b.n	8003b04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b00:	d1ee      	bne.n	8003ae0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40007000 	.word	0x40007000

08003b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e29b      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8087 	beq.w	8003c46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b38:	4b96      	ldr	r3, [pc, #600]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d00c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b44:	4b93      	ldr	r3, [pc, #588]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d112      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62>
 8003b50:	4b90      	ldr	r3, [pc, #576]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5c:	d10b      	bne.n	8003b76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5e:	4b8d      	ldr	r3, [pc, #564]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d06c      	beq.n	8003c44 <HAL_RCC_OscConfig+0x130>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d168      	bne.n	8003c44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e275      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x7a>
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a83      	ldr	r2, [pc, #524]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	e02e      	b.n	8003bec <HAL_RCC_OscConfig+0xd8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x9c>
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7e      	ldr	r2, [pc, #504]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b7c      	ldr	r3, [pc, #496]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7b      	ldr	r2, [pc, #492]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xd8>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0xc0>
 8003bba:	4b76      	ldr	r3, [pc, #472]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a75      	ldr	r2, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a72      	ldr	r2, [pc, #456]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xd8>
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6e      	ldr	r2, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b6c      	ldr	r3, [pc, #432]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6b      	ldr	r2, [pc, #428]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fd f994 	bl	8000f20 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7fd f990 	bl	8000f20 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e229      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xe8>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd f980 	bl	8000f20 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd f97c 	bl	8000f20 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e215      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b57      	ldr	r3, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x110>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d069      	beq.n	8003d26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c52:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x190>
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1e9      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	493d      	ldr	r1, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	e040      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d023      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a38      	ldr	r2, [pc, #224]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd f932 	bl	8000f20 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fd f92e 	bl	8000f20 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1c7      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4929      	ldr	r1, [pc, #164]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
 8003cf2:	e018      	b.n	8003d26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f023 0301 	bic.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd f90e 	bl	8000f20 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fd f90a 	bl	8000f20 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1a3      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d038      	beq.n	8003da4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d019      	beq.n	8003d6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	4b16      	ldr	r3, [pc, #88]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7fd f8eb 	bl	8000f20 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fd f8e7 	bl	8000f20 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e180      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x23a>
 8003d6c:	e01a      	b.n	8003da4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <HAL_RCC_OscConfig+0x280>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f8d1 	bl	8000f20 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d82:	f7fd f8cd 	bl	8000f20 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d903      	bls.n	8003d98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e166      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
 8003d94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	4b92      	ldr	r3, [pc, #584]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ee      	bne.n	8003d82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80a4 	beq.w	8003efa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4b8c      	ldr	r3, [pc, #560]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4b89      	ldr	r3, [pc, #548]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a88      	ldr	r2, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dda:	4b83      	ldr	r3, [pc, #524]	; (8003fe8 <HAL_RCC_OscConfig+0x4d4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003de6:	4b80      	ldr	r3, [pc, #512]	; (8003fe8 <HAL_RCC_OscConfig+0x4d4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7f      	ldr	r2, [pc, #508]	; (8003fe8 <HAL_RCC_OscConfig+0x4d4>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fd f895 	bl	8000f20 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd f891 	bl	8000f20 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	; 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e12a      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0c:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x4d4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x31a>
 8003e20:	4b70      	ldr	r3, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a6f      	ldr	r2, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	e02d      	b.n	8003e8a <HAL_RCC_OscConfig+0x376>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x33c>
 8003e36:	4b6b      	ldr	r3, [pc, #428]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a6a      	ldr	r2, [pc, #424]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	f023 0304 	bic.w	r3, r3, #4
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCC_OscConfig+0x376>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x35e>
 8003e58:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a5e      	ldr	r2, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x376>
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd f845 	bl	8000f20 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd f841 	bl	8000f20 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0d8      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ee      	beq.n	8003e9a <HAL_RCC_OscConfig+0x386>
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fd f82f 	bl	8000f20 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd f82b 	bl	8000f20 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0c2      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80ae 	beq.w	8004060 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f04:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d06d      	beq.n	8003fec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d14b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a31      	ldr	r2, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fc fffc 	bl	8000f20 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fc fff8 	bl	8000f20 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e091      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	071b      	lsls	r3, r3, #28
 8003f76:	491b      	ldr	r1, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fc ffca 	bl	8000f20 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fc ffc6 	bl	8000f20 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e05f      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x47c>
 8003fae:	e057      	b.n	8004060 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fc ffb0 	bl	8000f20 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fc ffac 	bl	8000f20 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e045      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_OscConfig+0x4d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4b0>
 8003fe2:	e03d      	b.n	8004060 <HAL_RCC_OscConfig+0x54c>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <HAL_RCC_OscConfig+0x558>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d030      	beq.n	800405c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d129      	bne.n	800405c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d122      	bne.n	800405c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004022:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004024:	4293      	cmp	r3, r2
 8004026:	d119      	bne.n	800405c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d10f      	bne.n	800405c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d107      	bne.n	800405c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d001      	beq.n	8004060 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800

08004070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0d0      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d910      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b67      	ldr	r3, [pc, #412]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 020f 	bic.w	r2, r3, #15
 800409e:	4965      	ldr	r1, [pc, #404]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b63      	ldr	r3, [pc, #396]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0b8      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e8:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80040ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b50      	ldr	r3, [pc, #320]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	494d      	ldr	r1, [pc, #308]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d040      	beq.n	8004194 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d115      	bne.n	8004152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e073      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06b      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4936      	ldr	r1, [pc, #216]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004164:	f7fc fedc 	bl	8000f20 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fc fed8 	bl	8000f20 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e053      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d210      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 020f 	bic.w	r2, r3, #15
 80041aa:	4922      	ldr	r1, [pc, #136]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	; (8004234 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e032      	b.n	800422a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4916      	ldr	r1, [pc, #88]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490e      	ldr	r1, [pc, #56]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004202:	f000 f821 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_ClockConfig+0x1c8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	490a      	ldr	r1, [pc, #40]	; (800423c <HAL_RCC_ClockConfig+0x1cc>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a09      	ldr	r2, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1d0>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1d4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc fc3e 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00
 8004238:	40023800 	.word	0x40023800
 800423c:	08017a34 	.word	0x08017a34
 8004240:	20000000 	.word	0x20000000
 8004244:	20000004 	.word	0x20000004

08004248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	2300      	movs	r3, #0
 800425a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004260:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	d00d      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x40>
 800426c:	2b08      	cmp	r3, #8
 800426e:	f200 80bd 	bhi.w	80043ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x34>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d003      	beq.n	8004282 <HAL_RCC_GetSysClockFreq+0x3a>
 800427a:	e0b7      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800427e:	60bb      	str	r3, [r7, #8]
      break;
 8004280:	e0b7      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004282:	4b61      	ldr	r3, [pc, #388]	; (8004408 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004284:	60bb      	str	r3, [r7, #8]
      break;
 8004286:	e0b4      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004288:	4b5d      	ldr	r3, [pc, #372]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004290:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004292:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04d      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b58      	ldr	r3, [pc, #352]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	461a      	mov	r2, r3
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	ea02 0800 	and.w	r8, r2, r0
 80042b6:	ea03 0901 	and.w	r9, r3, r1
 80042ba:	4640      	mov	r0, r8
 80042bc:	4649      	mov	r1, r9
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	014b      	lsls	r3, r1, #5
 80042c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042cc:	0142      	lsls	r2, r0, #5
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	ebb0 0008 	subs.w	r0, r0, r8
 80042d6:	eb61 0109 	sbc.w	r1, r1, r9
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	018b      	lsls	r3, r1, #6
 80042e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042e8:	0182      	lsls	r2, r0, #6
 80042ea:	1a12      	subs	r2, r2, r0
 80042ec:	eb63 0301 	sbc.w	r3, r3, r1
 80042f0:	f04f 0000 	mov.w	r0, #0
 80042f4:	f04f 0100 	mov.w	r1, #0
 80042f8:	00d9      	lsls	r1, r3, #3
 80042fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042fe:	00d0      	lsls	r0, r2, #3
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	eb12 0208 	adds.w	r2, r2, r8
 8004308:	eb43 0309 	adc.w	r3, r3, r9
 800430c:	f04f 0000 	mov.w	r0, #0
 8004310:	f04f 0100 	mov.w	r1, #0
 8004314:	0259      	lsls	r1, r3, #9
 8004316:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800431a:	0250      	lsls	r0, r2, #9
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4610      	mov	r0, r2
 8004322:	4619      	mov	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	f7fb ffd8 	bl	80002e0 <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e04a      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b31      	ldr	r3, [pc, #196]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	461a      	mov	r2, r3
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f240 10ff 	movw	r0, #511	; 0x1ff
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	ea02 0400 	and.w	r4, r2, r0
 8004352:	ea03 0501 	and.w	r5, r3, r1
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	014b      	lsls	r3, r1, #5
 8004364:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004368:	0142      	lsls	r2, r0, #5
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	1b00      	subs	r0, r0, r4
 8004370:	eb61 0105 	sbc.w	r1, r1, r5
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	018b      	lsls	r3, r1, #6
 800437e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004382:	0182      	lsls	r2, r0, #6
 8004384:	1a12      	subs	r2, r2, r0
 8004386:	eb63 0301 	sbc.w	r3, r3, r1
 800438a:	f04f 0000 	mov.w	r0, #0
 800438e:	f04f 0100 	mov.w	r1, #0
 8004392:	00d9      	lsls	r1, r3, #3
 8004394:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004398:	00d0      	lsls	r0, r2, #3
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	1912      	adds	r2, r2, r4
 80043a0:	eb45 0303 	adc.w	r3, r5, r3
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	0299      	lsls	r1, r3, #10
 80043ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043b2:	0290      	lsls	r0, r2, #10
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	461a      	mov	r2, r3
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f7fb ff8c 	bl	80002e0 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	60bb      	str	r3, [r7, #8]
      break;
 80043ea:	e002      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043ee:	60bb      	str	r3, [r7, #8]
      break;
 80043f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f2:	68bb      	ldr	r3, [r7, #8]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a9b      	lsrs	r3, r3, #10
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4903      	ldr	r1, [pc, #12]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40023800 	.word	0x40023800
 8004448:	08017a44 	.word	0x08017a44

0800444c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004450:	f7ff ffdc 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0b5b      	lsrs	r3, r3, #13
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	08017a44 	.word	0x08017a44

08004474 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	220f      	movs	r2, #15
 8004482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0203 	and.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800449c:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_GetClockConfig+0x5c>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <HAL_RCC_GetClockConfig+0x60>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	601a      	str	r2, [r3, #0]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40023c00 	.word	0x40023c00

080044d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004500:	4b69      	ldr	r3, [pc, #420]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a68      	ldr	r2, [pc, #416]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800450a:	6093      	str	r3, [r2, #8]
 800450c:	4b66      	ldr	r3, [pc, #408]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	4964      	ldr	r1, [pc, #400]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d017      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004532:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	4959      	ldr	r1, [pc, #356]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d017      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800456e:	4b4e      	ldr	r3, [pc, #312]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	494a      	ldr	r1, [pc, #296]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458c:	d101      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 808b 	beq.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045d4:	4b35      	ldr	r3, [pc, #212]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a34      	ldr	r2, [pc, #208]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fc fc9e 	bl	8000f20 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e8:	f7fc fc9a 	bl	8000f20 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e38f      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045fa:	4b2c      	ldr	r3, [pc, #176]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d035      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d02e      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004624:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462e:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a1a      	ldr	r2, [pc, #104]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004646:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b01      	cmp	r3, #1
 8004656:	d114      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fc fc62 	bl	8000f20 <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fc fc5e 	bl	8000f20 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e351      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ee      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468e:	d111      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800469e:	400b      	ands	r3, r1
 80046a0:	4901      	ldr	r1, [pc, #4]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
 80046a6:	e00b      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40007000 	.word	0x40007000
 80046b0:	0ffffcff 	.word	0x0ffffcff
 80046b4:	4bb3      	ldr	r3, [pc, #716]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4ab2      	ldr	r2, [pc, #712]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	4bb0      	ldr	r3, [pc, #704]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	49ad      	ldr	r1, [pc, #692]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d010      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046de:	4ba9      	ldr	r3, [pc, #676]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e4:	4aa7      	ldr	r2, [pc, #668]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046ee:	4ba5      	ldr	r3, [pc, #660]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	49a2      	ldr	r1, [pc, #648]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470c:	4b9d      	ldr	r3, [pc, #628]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800471a:	499a      	ldr	r1, [pc, #616]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472e:	4b95      	ldr	r3, [pc, #596]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800473c:	4991      	ldr	r1, [pc, #580]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004750:	4b8c      	ldr	r3, [pc, #560]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	4989      	ldr	r1, [pc, #548]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004772:	4b84      	ldr	r3, [pc, #528]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004778:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	4980      	ldr	r1, [pc, #512]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004794:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	4978      	ldr	r1, [pc, #480]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b6:	4b73      	ldr	r3, [pc, #460]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f023 020c 	bic.w	r2, r3, #12
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c4:	496f      	ldr	r1, [pc, #444]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047d8:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	4967      	ldr	r1, [pc, #412]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047fa:	4b62      	ldr	r3, [pc, #392]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	495e      	ldr	r1, [pc, #376]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	4956      	ldr	r1, [pc, #344]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800483e:	4b51      	ldr	r3, [pc, #324]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004860:	4b48      	ldr	r3, [pc, #288]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486e:	4945      	ldr	r1, [pc, #276]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004882:	4b40      	ldr	r3, [pc, #256]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	493c      	ldr	r1, [pc, #240]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048a4:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b2:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d011      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d4:	492b      	ldr	r1, [pc, #172]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e4:	d101      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004914:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004938:	4912      	ldr	r1, [pc, #72]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004952:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495c:	4909      	ldr	r1, [pc, #36]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004970:	4b04      	ldr	r3, [pc, #16]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	e002      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800
 8004988:	4986      	ldr	r1, [pc, #536]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800499c:	4b81      	ldr	r3, [pc, #516]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ac:	497d      	ldr	r1, [pc, #500]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d006      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80d6 	beq.w	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c8:	4b76      	ldr	r3, [pc, #472]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a75      	ldr	r2, [pc, #468]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fc faa4 	bl	8000f20 <HAL_GetTick>
 80049d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049dc:	f7fc faa0 	bl	8000f20 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	; 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e195      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ee:	4b6d      	ldr	r3, [pc, #436]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d021      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11d      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a0e:	4b65      	ldr	r3, [pc, #404]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a1c:	4b61      	ldr	r3, [pc, #388]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a22:	0e1b      	lsrs	r3, r3, #24
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	019a      	lsls	r2, r3, #6
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	4958      	ldr	r1, [pc, #352]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d02e      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a74:	d129      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a76:	4b4b      	ldr	r3, [pc, #300]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a84:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8a:	0f1b      	lsrs	r3, r3, #28
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	493e      	ldr	r1, [pc, #248]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ab2:	4b3c      	ldr	r3, [pc, #240]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab8:	f023 021f 	bic.w	r2, r3, #31
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	4938      	ldr	r1, [pc, #224]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01d      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ad6:	4b33      	ldr	r3, [pc, #204]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004adc:	0e1b      	lsrs	r3, r3, #24
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aea:	0f1b      	lsrs	r3, r3, #28
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	019a      	lsls	r2, r3, #6
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	431a      	orrs	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	061b      	lsls	r3, r3, #24
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	071b      	lsls	r3, r3, #28
 8004b0a:	4926      	ldr	r1, [pc, #152]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d011      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	491a      	ldr	r1, [pc, #104]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b42:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4e:	f7fc f9e7 	bl	8000f20 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b56:	f7fc f9e3 	bl	8000f20 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e0d8      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b68:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	f040 80ce 	bne.w	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fc f9ca 	bl	8000f20 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8e:	e00b      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b90:	f7fc f9c6 	bl	8000f20 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d904      	bls.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e0bb      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba8:	4b5e      	ldr	r3, [pc, #376]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb4:	d0ec      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d02e      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d12a      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bec:	4b4d      	ldr	r3, [pc, #308]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	0f1b      	lsrs	r3, r3, #28
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	019a      	lsls	r2, r3, #6
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	4944      	ldr	r1, [pc, #272]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c1a:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	493d      	ldr	r1, [pc, #244]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d022      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c48:	d11d      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c4a:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	0e1b      	lsrs	r3, r3, #24
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c58:	4b32      	ldr	r3, [pc, #200]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	0f1b      	lsrs	r3, r3, #28
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	019a      	lsls	r2, r3, #6
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	431a      	orrs	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	071b      	lsls	r3, r3, #28
 8004c7e:	4929      	ldr	r1, [pc, #164]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d028      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c92:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	0e1b      	lsrs	r3, r3, #24
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ca0:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	019a      	lsls	r2, r3, #6
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	071b      	lsls	r3, r3, #28
 8004cc6:	4917      	ldr	r1, [pc, #92]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	4911      	ldr	r1, [pc, #68]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf0:	f7fc f916 	bl	8000f20 <HAL_GetTick>
 8004cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cf8:	f7fc f912 	bl	8000f20 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b64      	cmp	r3, #100	; 0x64
 8004d04:	d901      	bls.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e007      	b.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d16:	d1ef      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3720      	adds	r7, #32
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800

08004d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e049      	b.n	8004dce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f841 	bl	8004dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f000 fa00 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d001      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e054      	b.n	8004eae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a26      	ldr	r2, [pc, #152]	; (8004ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d01d      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <HAL_TIM_Base_Start_IT+0xe0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x80>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d115      	bne.n	8004e98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xec>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d015      	beq.n	8004eaa <HAL_TIM_Base_Start_IT+0xbe>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d011      	beq.n	8004eaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e96:	e008      	b.n	8004eaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40010400 	.word	0x40010400
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40001800 	.word	0x40001800
 8004ed8:	00010007 	.word	0x00010007

08004edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0202 	mvn.w	r2, #2
 8004f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f905 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8f7 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f908 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0204 	mvn.w	r2, #4
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8db 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8cd 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8de 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0208 	mvn.w	r2, #8
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8b1 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8a3 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f8b4 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0210 	mvn.w	r2, #16
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2208      	movs	r2, #8
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f887 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f879 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f88a 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10e      	bne.n	8005060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d107      	bne.n	8005060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0201 	mvn.w	r2, #1
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fc70 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d10e      	bne.n	800508c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	d107      	bne.n	800508c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f91a 	bl	80052c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d10e      	bne.n	80050ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f90d 	bl	80052d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d10e      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b40      	cmp	r3, #64	; 0x40
 80050d4:	d107      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f838 	bl	8005156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d10e      	bne.n	8005112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d107      	bne.n	8005112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0220 	mvn.w	r2, #32
 800510a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f8cd 	bl	80052ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a40      	ldr	r2, [pc, #256]	; (8005280 <TIM_Base_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3d      	ldr	r2, [pc, #244]	; (8005284 <TIM_Base_SetConfig+0x118>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <TIM_Base_SetConfig+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3b      	ldr	r2, [pc, #236]	; (800528c <TIM_Base_SetConfig+0x120>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <TIM_Base_SetConfig+0x124>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <TIM_Base_SetConfig+0x114>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d027      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <TIM_Base_SetConfig+0x118>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d023      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <TIM_Base_SetConfig+0x11c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <TIM_Base_SetConfig+0x120>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <TIM_Base_SetConfig+0x124>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d017      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_Base_SetConfig+0x128>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_Base_SetConfig+0x12c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a26      	ldr	r2, [pc, #152]	; (800529c <TIM_Base_SetConfig+0x130>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <TIM_Base_SetConfig+0x134>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <TIM_Base_SetConfig+0x138>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <TIM_Base_SetConfig+0x13c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <TIM_Base_SetConfig+0x114>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xf8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0c      	ldr	r2, [pc, #48]	; (8005290 <TIM_Base_SetConfig+0x124>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40010400 	.word	0x40010400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	40001800 	.word	0x40001800
 80052a4:	40001c00 	.word	0x40001c00
 80052a8:	40002000 	.word	0x40002000

080052ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e040      	b.n	800537c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb fb54 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	; 0x24
 8005314:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f82c 	bl	8005384 <UART_SetConfig>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e022      	b.n	800537c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa82 	bl	8005848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb09 	bl	800598c <UART_CheckIdleState>
 800537a:	4603      	mov	r3, r0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4ba7      	ldr	r3, [pc, #668]	; (800564c <UART_SetConfig+0x2c8>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	6979      	ldr	r1, [r7, #20]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a95      	ldr	r2, [pc, #596]	; (8005650 <UART_SetConfig+0x2cc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d120      	bne.n	8005442 <UART_SetConfig+0xbe>
 8005400:	4b94      	ldr	r3, [pc, #592]	; (8005654 <UART_SetConfig+0x2d0>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b03      	cmp	r3, #3
 800540c:	d816      	bhi.n	800543c <UART_SetConfig+0xb8>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0x90>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005425 	.word	0x08005425
 8005418:	08005431 	.word	0x08005431
 800541c:	0800542b 	.word	0x0800542b
 8005420:	08005437 	.word	0x08005437
 8005424:	2301      	movs	r3, #1
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e14f      	b.n	80056ca <UART_SetConfig+0x346>
 800542a:	2302      	movs	r3, #2
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e14c      	b.n	80056ca <UART_SetConfig+0x346>
 8005430:	2304      	movs	r3, #4
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e149      	b.n	80056ca <UART_SetConfig+0x346>
 8005436:	2308      	movs	r3, #8
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e146      	b.n	80056ca <UART_SetConfig+0x346>
 800543c:	2310      	movs	r3, #16
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e143      	b.n	80056ca <UART_SetConfig+0x346>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a84      	ldr	r2, [pc, #528]	; (8005658 <UART_SetConfig+0x2d4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d132      	bne.n	80054b2 <UART_SetConfig+0x12e>
 800544c:	4b81      	ldr	r3, [pc, #516]	; (8005654 <UART_SetConfig+0x2d0>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d828      	bhi.n	80054ac <UART_SetConfig+0x128>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0xdc>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005495 	.word	0x08005495
 8005464:	080054ad 	.word	0x080054ad
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054ad 	.word	0x080054ad
 8005470:	080054a1 	.word	0x080054a1
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054ad 	.word	0x080054ad
 8005480:	0800549b 	.word	0x0800549b
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054a7 	.word	0x080054a7
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e117      	b.n	80056ca <UART_SetConfig+0x346>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e114      	b.n	80056ca <UART_SetConfig+0x346>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e111      	b.n	80056ca <UART_SetConfig+0x346>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e10e      	b.n	80056ca <UART_SetConfig+0x346>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e10b      	b.n	80056ca <UART_SetConfig+0x346>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a69      	ldr	r2, [pc, #420]	; (800565c <UART_SetConfig+0x2d8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d120      	bne.n	80054fe <UART_SetConfig+0x17a>
 80054bc:	4b65      	ldr	r3, [pc, #404]	; (8005654 <UART_SetConfig+0x2d0>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054c6:	2b30      	cmp	r3, #48	; 0x30
 80054c8:	d013      	beq.n	80054f2 <UART_SetConfig+0x16e>
 80054ca:	2b30      	cmp	r3, #48	; 0x30
 80054cc:	d814      	bhi.n	80054f8 <UART_SetConfig+0x174>
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d009      	beq.n	80054e6 <UART_SetConfig+0x162>
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d810      	bhi.n	80054f8 <UART_SetConfig+0x174>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <UART_SetConfig+0x15c>
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d006      	beq.n	80054ec <UART_SetConfig+0x168>
 80054de:	e00b      	b.n	80054f8 <UART_SetConfig+0x174>
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e0f1      	b.n	80056ca <UART_SetConfig+0x346>
 80054e6:	2302      	movs	r3, #2
 80054e8:	77fb      	strb	r3, [r7, #31]
 80054ea:	e0ee      	b.n	80056ca <UART_SetConfig+0x346>
 80054ec:	2304      	movs	r3, #4
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e0eb      	b.n	80056ca <UART_SetConfig+0x346>
 80054f2:	2308      	movs	r3, #8
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e0e8      	b.n	80056ca <UART_SetConfig+0x346>
 80054f8:	2310      	movs	r3, #16
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0e5      	b.n	80056ca <UART_SetConfig+0x346>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a57      	ldr	r2, [pc, #348]	; (8005660 <UART_SetConfig+0x2dc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d120      	bne.n	800554a <UART_SetConfig+0x1c6>
 8005508:	4b52      	ldr	r3, [pc, #328]	; (8005654 <UART_SetConfig+0x2d0>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005512:	2bc0      	cmp	r3, #192	; 0xc0
 8005514:	d013      	beq.n	800553e <UART_SetConfig+0x1ba>
 8005516:	2bc0      	cmp	r3, #192	; 0xc0
 8005518:	d814      	bhi.n	8005544 <UART_SetConfig+0x1c0>
 800551a:	2b80      	cmp	r3, #128	; 0x80
 800551c:	d009      	beq.n	8005532 <UART_SetConfig+0x1ae>
 800551e:	2b80      	cmp	r3, #128	; 0x80
 8005520:	d810      	bhi.n	8005544 <UART_SetConfig+0x1c0>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <UART_SetConfig+0x1a8>
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d006      	beq.n	8005538 <UART_SetConfig+0x1b4>
 800552a:	e00b      	b.n	8005544 <UART_SetConfig+0x1c0>
 800552c:	2300      	movs	r3, #0
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e0cb      	b.n	80056ca <UART_SetConfig+0x346>
 8005532:	2302      	movs	r3, #2
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e0c8      	b.n	80056ca <UART_SetConfig+0x346>
 8005538:	2304      	movs	r3, #4
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e0c5      	b.n	80056ca <UART_SetConfig+0x346>
 800553e:	2308      	movs	r3, #8
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e0c2      	b.n	80056ca <UART_SetConfig+0x346>
 8005544:	2310      	movs	r3, #16
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e0bf      	b.n	80056ca <UART_SetConfig+0x346>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a45      	ldr	r2, [pc, #276]	; (8005664 <UART_SetConfig+0x2e0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d125      	bne.n	80055a0 <UART_SetConfig+0x21c>
 8005554:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <UART_SetConfig+0x2d0>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005562:	d017      	beq.n	8005594 <UART_SetConfig+0x210>
 8005564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005568:	d817      	bhi.n	800559a <UART_SetConfig+0x216>
 800556a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556e:	d00b      	beq.n	8005588 <UART_SetConfig+0x204>
 8005570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005574:	d811      	bhi.n	800559a <UART_SetConfig+0x216>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <UART_SetConfig+0x1fe>
 800557a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557e:	d006      	beq.n	800558e <UART_SetConfig+0x20a>
 8005580:	e00b      	b.n	800559a <UART_SetConfig+0x216>
 8005582:	2300      	movs	r3, #0
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e0a0      	b.n	80056ca <UART_SetConfig+0x346>
 8005588:	2302      	movs	r3, #2
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e09d      	b.n	80056ca <UART_SetConfig+0x346>
 800558e:	2304      	movs	r3, #4
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e09a      	b.n	80056ca <UART_SetConfig+0x346>
 8005594:	2308      	movs	r3, #8
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e097      	b.n	80056ca <UART_SetConfig+0x346>
 800559a:	2310      	movs	r3, #16
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e094      	b.n	80056ca <UART_SetConfig+0x346>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a30      	ldr	r2, [pc, #192]	; (8005668 <UART_SetConfig+0x2e4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d125      	bne.n	80055f6 <UART_SetConfig+0x272>
 80055aa:	4b2a      	ldr	r3, [pc, #168]	; (8005654 <UART_SetConfig+0x2d0>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055b8:	d017      	beq.n	80055ea <UART_SetConfig+0x266>
 80055ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055be:	d817      	bhi.n	80055f0 <UART_SetConfig+0x26c>
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c4:	d00b      	beq.n	80055de <UART_SetConfig+0x25a>
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ca:	d811      	bhi.n	80055f0 <UART_SetConfig+0x26c>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <UART_SetConfig+0x254>
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d006      	beq.n	80055e4 <UART_SetConfig+0x260>
 80055d6:	e00b      	b.n	80055f0 <UART_SetConfig+0x26c>
 80055d8:	2301      	movs	r3, #1
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e075      	b.n	80056ca <UART_SetConfig+0x346>
 80055de:	2302      	movs	r3, #2
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e072      	b.n	80056ca <UART_SetConfig+0x346>
 80055e4:	2304      	movs	r3, #4
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e06f      	b.n	80056ca <UART_SetConfig+0x346>
 80055ea:	2308      	movs	r3, #8
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e06c      	b.n	80056ca <UART_SetConfig+0x346>
 80055f0:	2310      	movs	r3, #16
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e069      	b.n	80056ca <UART_SetConfig+0x346>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <UART_SetConfig+0x2e8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d137      	bne.n	8005670 <UART_SetConfig+0x2ec>
 8005600:	4b14      	ldr	r3, [pc, #80]	; (8005654 <UART_SetConfig+0x2d0>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800560a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800560e:	d017      	beq.n	8005640 <UART_SetConfig+0x2bc>
 8005610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005614:	d817      	bhi.n	8005646 <UART_SetConfig+0x2c2>
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800561a:	d00b      	beq.n	8005634 <UART_SetConfig+0x2b0>
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005620:	d811      	bhi.n	8005646 <UART_SetConfig+0x2c2>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <UART_SetConfig+0x2aa>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562a:	d006      	beq.n	800563a <UART_SetConfig+0x2b6>
 800562c:	e00b      	b.n	8005646 <UART_SetConfig+0x2c2>
 800562e:	2300      	movs	r3, #0
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e04a      	b.n	80056ca <UART_SetConfig+0x346>
 8005634:	2302      	movs	r3, #2
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e047      	b.n	80056ca <UART_SetConfig+0x346>
 800563a:	2304      	movs	r3, #4
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e044      	b.n	80056ca <UART_SetConfig+0x346>
 8005640:	2308      	movs	r3, #8
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e041      	b.n	80056ca <UART_SetConfig+0x346>
 8005646:	2310      	movs	r3, #16
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e03e      	b.n	80056ca <UART_SetConfig+0x346>
 800564c:	efff69f3 	.word	0xefff69f3
 8005650:	40011000 	.word	0x40011000
 8005654:	40023800 	.word	0x40023800
 8005658:	40004400 	.word	0x40004400
 800565c:	40004800 	.word	0x40004800
 8005660:	40004c00 	.word	0x40004c00
 8005664:	40005000 	.word	0x40005000
 8005668:	40011400 	.word	0x40011400
 800566c:	40007800 	.word	0x40007800
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a71      	ldr	r2, [pc, #452]	; (800583c <UART_SetConfig+0x4b8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d125      	bne.n	80056c6 <UART_SetConfig+0x342>
 800567a:	4b71      	ldr	r3, [pc, #452]	; (8005840 <UART_SetConfig+0x4bc>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005684:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005688:	d017      	beq.n	80056ba <UART_SetConfig+0x336>
 800568a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800568e:	d817      	bhi.n	80056c0 <UART_SetConfig+0x33c>
 8005690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005694:	d00b      	beq.n	80056ae <UART_SetConfig+0x32a>
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d811      	bhi.n	80056c0 <UART_SetConfig+0x33c>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <UART_SetConfig+0x324>
 80056a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a4:	d006      	beq.n	80056b4 <UART_SetConfig+0x330>
 80056a6:	e00b      	b.n	80056c0 <UART_SetConfig+0x33c>
 80056a8:	2300      	movs	r3, #0
 80056aa:	77fb      	strb	r3, [r7, #31]
 80056ac:	e00d      	b.n	80056ca <UART_SetConfig+0x346>
 80056ae:	2302      	movs	r3, #2
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e00a      	b.n	80056ca <UART_SetConfig+0x346>
 80056b4:	2304      	movs	r3, #4
 80056b6:	77fb      	strb	r3, [r7, #31]
 80056b8:	e007      	b.n	80056ca <UART_SetConfig+0x346>
 80056ba:	2308      	movs	r3, #8
 80056bc:	77fb      	strb	r3, [r7, #31]
 80056be:	e004      	b.n	80056ca <UART_SetConfig+0x346>
 80056c0:	2310      	movs	r3, #16
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e001      	b.n	80056ca <UART_SetConfig+0x346>
 80056c6:	2310      	movs	r3, #16
 80056c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d2:	d15b      	bne.n	800578c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d827      	bhi.n	800572a <UART_SetConfig+0x3a6>
 80056da:	a201      	add	r2, pc, #4	; (adr r2, 80056e0 <UART_SetConfig+0x35c>)
 80056dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e0:	08005705 	.word	0x08005705
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005715 	.word	0x08005715
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800571b 	.word	0x0800571b
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	0800572b 	.word	0x0800572b
 80056fc:	0800572b 	.word	0x0800572b
 8005700:	08005723 	.word	0x08005723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fe fe8e 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8005708:	61b8      	str	r0, [r7, #24]
        break;
 800570a:	e013      	b.n	8005734 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fe fe9e 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 8005710:	61b8      	str	r0, [r7, #24]
        break;
 8005712:	e00f      	b.n	8005734 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005714:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <UART_SetConfig+0x4c0>)
 8005716:	61bb      	str	r3, [r7, #24]
        break;
 8005718:	e00c      	b.n	8005734 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571a:	f7fe fd95 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 800571e:	61b8      	str	r0, [r7, #24]
        break;
 8005720:	e008      	b.n	8005734 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005726:	61bb      	str	r3, [r7, #24]
        break;
 8005728:	e004      	b.n	8005734 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	77bb      	strb	r3, [r7, #30]
        break;
 8005732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d074      	beq.n	8005824 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	005a      	lsls	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	b29b      	uxth	r3, r3
 8005750:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b0f      	cmp	r3, #15
 8005756:	d916      	bls.n	8005786 <UART_SetConfig+0x402>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575e:	d212      	bcs.n	8005786 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	b29b      	uxth	r3, r3
 8005764:	f023 030f 	bic.w	r3, r3, #15
 8005768:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	b29a      	uxth	r2, r3
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	4313      	orrs	r3, r2
 800577a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	89fa      	ldrh	r2, [r7, #14]
 8005782:	60da      	str	r2, [r3, #12]
 8005784:	e04e      	b.n	8005824 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	77bb      	strb	r3, [r7, #30]
 800578a:	e04b      	b.n	8005824 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800578c:	7ffb      	ldrb	r3, [r7, #31]
 800578e:	2b08      	cmp	r3, #8
 8005790:	d827      	bhi.n	80057e2 <UART_SetConfig+0x45e>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <UART_SetConfig+0x414>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057bd 	.word	0x080057bd
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057cd 	.word	0x080057cd
 80057a4:	080057e3 	.word	0x080057e3
 80057a8:	080057d3 	.word	0x080057d3
 80057ac:	080057e3 	.word	0x080057e3
 80057b0:	080057e3 	.word	0x080057e3
 80057b4:	080057e3 	.word	0x080057e3
 80057b8:	080057db 	.word	0x080057db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057bc:	f7fe fe32 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 80057c0:	61b8      	str	r0, [r7, #24]
        break;
 80057c2:	e013      	b.n	80057ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c4:	f7fe fe42 	bl	800444c <HAL_RCC_GetPCLK2Freq>
 80057c8:	61b8      	str	r0, [r7, #24]
        break;
 80057ca:	e00f      	b.n	80057ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <UART_SetConfig+0x4c0>)
 80057ce:	61bb      	str	r3, [r7, #24]
        break;
 80057d0:	e00c      	b.n	80057ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057d2:	f7fe fd39 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 80057d6:	61b8      	str	r0, [r7, #24]
        break;
 80057d8:	e008      	b.n	80057ec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	61bb      	str	r3, [r7, #24]
        break;
 80057e0:	e004      	b.n	80057ec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	77bb      	strb	r3, [r7, #30]
        break;
 80057ea:	bf00      	nop
    }

    if (pclk != 0U)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d018      	beq.n	8005824 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	085a      	lsrs	r2, r3, #1
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	441a      	add	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	fbb2 f3f3 	udiv	r3, r2, r3
 8005804:	b29b      	uxth	r3, r3
 8005806:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d908      	bls.n	8005820 <UART_SetConfig+0x49c>
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005814:	d204      	bcs.n	8005820 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	60da      	str	r2, [r3, #12]
 800581e:	e001      	b.n	8005824 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005830:	7fbb      	ldrb	r3, [r7, #30]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40007c00 	.word	0x40007c00
 8005840:	40023800 	.word	0x40023800
 8005844:	00f42400 	.word	0x00f42400

08005848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01a      	beq.n	800595e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005946:	d10a      	bne.n	800595e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af02      	add	r7, sp, #8
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800599c:	f7fb fac0 	bl	8000f20 <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10e      	bne.n	80059ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f82d 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e023      	b.n	8005a16 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d10e      	bne.n	80059fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f817 	bl	8005a1e <UART_WaitOnFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e00d      	b.n	8005a16 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	e05e      	b.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d05a      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fb fa72 	bl	8000f20 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11b      	bne.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a5c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e043      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d02c      	beq.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa2:	d124      	bne.n	8005aee <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005abc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e00f      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d091      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 001c 	add.w	r0, r7, #28
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d120      	bne.n	8005b72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <USB_CoreInit+0xac>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d105      	bne.n	8005b66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fad6 	bl	8007118 <USB_CoreReset>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	73fb      	strb	r3, [r7, #15]
 8005b70:	e010      	b.n	8005b94 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 faca 	bl	8007118 <USB_CoreReset>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10b      	bne.n	8005bb2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f043 0206 	orr.w	r2, r3, #6
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f043 0220 	orr.w	r2, r3, #32
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bbe:	b004      	add	sp, #16
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	ffbdffbf 	.word	0xffbdffbf

08005bc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d165      	bne.n	8005ca8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4a41      	ldr	r2, [pc, #260]	; (8005ce4 <USB_SetTurnaroundTime+0x11c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d906      	bls.n	8005bf2 <USB_SetTurnaroundTime+0x2a>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4a40      	ldr	r2, [pc, #256]	; (8005ce8 <USB_SetTurnaroundTime+0x120>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d202      	bcs.n	8005bf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bec:	230f      	movs	r3, #15
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e062      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4a3c      	ldr	r2, [pc, #240]	; (8005ce8 <USB_SetTurnaroundTime+0x120>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d306      	bcc.n	8005c08 <USB_SetTurnaroundTime+0x40>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4a3b      	ldr	r2, [pc, #236]	; (8005cec <USB_SetTurnaroundTime+0x124>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d202      	bcs.n	8005c08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c02:	230e      	movs	r3, #14
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e057      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a38      	ldr	r2, [pc, #224]	; (8005cec <USB_SetTurnaroundTime+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d306      	bcc.n	8005c1e <USB_SetTurnaroundTime+0x56>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4a37      	ldr	r2, [pc, #220]	; (8005cf0 <USB_SetTurnaroundTime+0x128>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d202      	bcs.n	8005c1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c18:	230d      	movs	r3, #13
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e04c      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4a33      	ldr	r2, [pc, #204]	; (8005cf0 <USB_SetTurnaroundTime+0x128>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d306      	bcc.n	8005c34 <USB_SetTurnaroundTime+0x6c>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4a32      	ldr	r2, [pc, #200]	; (8005cf4 <USB_SetTurnaroundTime+0x12c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d802      	bhi.n	8005c34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c2e:	230c      	movs	r3, #12
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e041      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <USB_SetTurnaroundTime+0x12c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d906      	bls.n	8005c4a <USB_SetTurnaroundTime+0x82>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <USB_SetTurnaroundTime+0x130>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d802      	bhi.n	8005c4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c44:	230b      	movs	r3, #11
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	e036      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a2a      	ldr	r2, [pc, #168]	; (8005cf8 <USB_SetTurnaroundTime+0x130>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d906      	bls.n	8005c60 <USB_SetTurnaroundTime+0x98>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4a29      	ldr	r2, [pc, #164]	; (8005cfc <USB_SetTurnaroundTime+0x134>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d802      	bhi.n	8005c60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e02b      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4a26      	ldr	r2, [pc, #152]	; (8005cfc <USB_SetTurnaroundTime+0x134>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d906      	bls.n	8005c76 <USB_SetTurnaroundTime+0xae>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4a25      	ldr	r2, [pc, #148]	; (8005d00 <USB_SetTurnaroundTime+0x138>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d202      	bcs.n	8005c76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c70:	2309      	movs	r3, #9
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e020      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <USB_SetTurnaroundTime+0x138>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d306      	bcc.n	8005c8c <USB_SetTurnaroundTime+0xc4>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <USB_SetTurnaroundTime+0x13c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d802      	bhi.n	8005c8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c86:	2308      	movs	r3, #8
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e015      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <USB_SetTurnaroundTime+0x13c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d906      	bls.n	8005ca2 <USB_SetTurnaroundTime+0xda>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <USB_SetTurnaroundTime+0x140>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d202      	bcs.n	8005ca2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c9c:	2307      	movs	r3, #7
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e00a      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ca2:	2306      	movs	r3, #6
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e007      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cae:	2309      	movs	r3, #9
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e001      	b.n	8005cb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cb4:	2309      	movs	r3, #9
 8005cb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	029b      	lsls	r3, r3, #10
 8005ccc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	00d8acbf 	.word	0x00d8acbf
 8005ce8:	00e4e1c0 	.word	0x00e4e1c0
 8005cec:	00f42400 	.word	0x00f42400
 8005cf0:	01067380 	.word	0x01067380
 8005cf4:	011a499f 	.word	0x011a499f
 8005cf8:	01312cff 	.word	0x01312cff
 8005cfc:	014ca43f 	.word	0x014ca43f
 8005d00:	016e3600 	.word	0x016e3600
 8005d04:	01a6ab1f 	.word	0x01a6ab1f
 8005d08:	01e84800 	.word	0x01e84800

08005d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f043 0201 	orr.w	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d106      	bne.n	8005d7c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	60da      	str	r2, [r3, #12]
 8005d7a:	e00b      	b.n	8005d94 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	e001      	b.n	8005d94 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e003      	b.n	8005d9c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d94:	2032      	movs	r0, #50	; 0x32
 8005d96:	f7fb f8cf 	bl	8000f38 <HAL_Delay>

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005da4:	b084      	sub	sp, #16
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e009      	b.n	8005dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3340      	adds	r3, #64	; 0x40
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b0e      	cmp	r3, #14
 8005ddc:	d9f2      	bls.n	8005dc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11c      	bne.n	8005e1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df2:	f043 0302 	orr.w	r3, r3, #2
 8005df6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e005      	b.n	8005e2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	461a      	mov	r2, r3
 8005e46:	680b      	ldr	r3, [r1, #0]
 8005e48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10c      	bne.n	8005e6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e56:	2100      	movs	r1, #0
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f959 	bl	8006110 <USB_SetDevSpeed>
 8005e5e:	e018      	b.n	8005e92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e60:	2101      	movs	r1, #1
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f954 	bl	8006110 <USB_SetDevSpeed>
 8005e68:	e013      	b.n	8005e92 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d10c      	bne.n	8005e8a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e76:	2100      	movs	r1, #0
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f949 	bl	8006110 <USB_SetDevSpeed>
 8005e7e:	e008      	b.n	8005e92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e80:	2101      	movs	r1, #1
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f944 	bl	8006110 <USB_SetDevSpeed>
 8005e88:	e003      	b.n	8005e92 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f93f 	bl	8006110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e92:	2110      	movs	r1, #16
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f8f3 	bl	8006080 <USB_FlushTxFifo>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f911 	bl	80060cc <USB_FlushRxFifo>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e043      	b.n	8005f66 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef4:	d118      	bne.n	8005f28 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e013      	b.n	8005f3a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e008      	b.n	8005f3a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	461a      	mov	r2, r3
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d3b7      	bcc.n	8005ede <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e043      	b.n	8005ffc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f8a:	d118      	bne.n	8005fbe <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e013      	b.n	8005fd0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	e008      	b.n	8005fd0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2300      	movs	r3, #0
 8005fce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ff4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d3b7      	bcc.n	8005f74 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006016:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006024:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b00      	cmp	r3, #0
 800602a:	d105      	bne.n	8006038 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f043 0210 	orr.w	r2, r3, #16
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <USB_DevInit+0x2d4>)
 800603e:	4313      	orrs	r3, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f043 0208 	orr.w	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d105      	bne.n	8006068 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	4b06      	ldr	r3, [pc, #24]	; (800607c <USB_DevInit+0x2d8>)
 8006062:	4313      	orrs	r3, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006074:	b004      	add	sp, #16
 8006076:	4770      	bx	lr
 8006078:	803c3800 	.word	0x803c3800
 800607c:	40000004 	.word	0x40000004

08006080 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	019b      	lsls	r3, r3, #6
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3301      	adds	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <USB_FlushTxFifo+0x48>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d901      	bls.n	80060ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e006      	b.n	80060ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d0f0      	beq.n	800609a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	00030d40 	.word	0x00030d40

080060cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2210      	movs	r2, #16
 80060dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <USB_FlushRxFifo+0x40>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e006      	b.n	80060fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d0f0      	beq.n	80060de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	00030d40 	.word	0x00030d40

08006110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006130:	4313      	orrs	r3, r2
 8006132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0306 	and.w	r3, r3, #6
 800615a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006162:	2300      	movs	r3, #0
 8006164:	75fb      	strb	r3, [r7, #23]
 8006166:	e00a      	b.n	800617e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d002      	beq.n	8006174 <USB_GetDevSpeed+0x32>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b06      	cmp	r3, #6
 8006172:	d102      	bne.n	800617a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006174:	2302      	movs	r3, #2
 8006176:	75fb      	strb	r3, [r7, #23]
 8006178:	e001      	b.n	800617e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800617a:	230f      	movs	r3, #15
 800617c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d139      	bne.n	800621c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	2101      	movs	r1, #1
 80061ba:	fa01 f303 	lsl.w	r3, r1, r3
 80061be:	b29b      	uxth	r3, r3
 80061c0:	68f9      	ldr	r1, [r7, #12]
 80061c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d153      	bne.n	8006288 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	78db      	ldrb	r3, [r3, #3]
 80061fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	059b      	lsls	r3, r3, #22
 8006202:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006204:	431a      	orrs	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	0159      	lsls	r1, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	440b      	add	r3, r1
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	4619      	mov	r1, r3
 8006214:	4b20      	ldr	r3, [pc, #128]	; (8006298 <USB_ActivateEndpoint+0x10c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	600b      	str	r3, [r1, #0]
 800621a:	e035      	b.n	8006288 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	68f9      	ldr	r1, [r7, #12]
 8006236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623a:	4313      	orrs	r3, r2
 800623c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d119      	bne.n	8006288 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	78db      	ldrb	r3, [r3, #3]
 800626e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006270:	430b      	orrs	r3, r1
 8006272:	431a      	orrs	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	0159      	lsls	r1, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	440b      	add	r3, r1
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	4619      	mov	r1, r3
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <USB_ActivateEndpoint+0x10c>)
 8006284:	4313      	orrs	r3, r2
 8006286:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	10008000 	.word	0x10008000

0800629c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d161      	bne.n	800637c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ce:	d11f      	bne.n	8006310 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800630e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	2101      	movs	r1, #1
 8006322:	fa01 f303 	lsl.w	r3, r1, r3
 8006326:	b29b      	uxth	r3, r3
 8006328:	43db      	mvns	r3, r3
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006330:	4013      	ands	r3, r2
 8006332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	2101      	movs	r1, #1
 8006346:	fa01 f303 	lsl.w	r3, r1, r3
 800634a:	b29b      	uxth	r3, r3
 800634c:	43db      	mvns	r3, r3
 800634e:	68f9      	ldr	r1, [r7, #12]
 8006350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006354:	4013      	ands	r3, r2
 8006356:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	0159      	lsls	r1, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	440b      	add	r3, r1
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	4619      	mov	r1, r3
 8006374:	4b35      	ldr	r3, [pc, #212]	; (800644c <USB_DeactivateEndpoint+0x1b0>)
 8006376:	4013      	ands	r3, r2
 8006378:	600b      	str	r3, [r1, #0]
 800637a:	e060      	b.n	800643e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800638e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006392:	d11f      	bne.n	80063d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ea:	041b      	lsls	r3, r3, #16
 80063ec:	43db      	mvns	r3, r3
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f4:	4013      	ands	r3, r2
 80063f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	43db      	mvns	r3, r3
 8006412:	68f9      	ldr	r1, [r7, #12]
 8006414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006418:	4013      	ands	r3, r2
 800641a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	0159      	lsls	r1, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	440b      	add	r3, r1
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	4619      	mov	r1, r3
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <USB_DeactivateEndpoint+0x1b4>)
 800643a:	4013      	ands	r3, r2
 800643c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	ec337800 	.word	0xec337800
 8006450:	eff37800 	.word	0xeff37800

08006454 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08a      	sub	sp, #40	; 0x28
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 8163 	bne.w	800673c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d132      	bne.n	80064e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	0159      	lsls	r1, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	440b      	add	r3, r1
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	4619      	mov	r1, r3
 800649a:	4ba5      	ldr	r3, [pc, #660]	; (8006730 <USB_EPStartXfer+0x2dc>)
 800649c:	4013      	ands	r3, r2
 800649e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	0159      	lsls	r1, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	440b      	add	r3, r1
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	4619      	mov	r1, r3
 80064dc:	4b95      	ldr	r3, [pc, #596]	; (8006734 <USB_EPStartXfer+0x2e0>)
 80064de:	4013      	ands	r3, r2
 80064e0:	610b      	str	r3, [r1, #16]
 80064e2:	e074      	b.n	80065ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	0159      	lsls	r1, r3, #5
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	440b      	add	r3, r1
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	4619      	mov	r1, r3
 8006500:	4b8c      	ldr	r3, [pc, #560]	; (8006734 <USB_EPStartXfer+0x2e0>)
 8006502:	4013      	ands	r3, r2
 8006504:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	0159      	lsls	r1, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	440b      	add	r3, r1
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	4619      	mov	r1, r3
 8006522:	4b83      	ldr	r3, [pc, #524]	; (8006730 <USB_EPStartXfer+0x2dc>)
 8006524:	4013      	ands	r3, r2
 8006526:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6959      	ldr	r1, [r3, #20]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	440b      	add	r3, r1
 8006540:	1e59      	subs	r1, r3, #1
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	fbb1 f3f3 	udiv	r3, r1, r3
 800654a:	04d9      	lsls	r1, r3, #19
 800654c:	4b7a      	ldr	r3, [pc, #488]	; (8006738 <USB_EPStartXfer+0x2e4>)
 800654e:	400b      	ands	r3, r1
 8006550:	69b9      	ldr	r1, [r7, #24]
 8006552:	0148      	lsls	r0, r1, #5
 8006554:	69f9      	ldr	r1, [r7, #28]
 8006556:	4401      	add	r1, r0
 8006558:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800655c:	4313      	orrs	r3, r2
 800655e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	691a      	ldr	r2, [r3, #16]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006576:	69b9      	ldr	r1, [r7, #24]
 8006578:	0148      	lsls	r0, r1, #5
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	4401      	add	r1, r0
 800657e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006582:	4313      	orrs	r3, r2
 8006584:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	78db      	ldrb	r3, [r3, #3]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d11f      	bne.n	80065ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80065ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d14b      	bne.n	800666c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d009      	beq.n	80065f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	461a      	mov	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d128      	bne.n	800664a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d110      	bne.n	800662a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e00f      	b.n	800664a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006648:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	0151      	lsls	r1, r2, #5
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	440a      	add	r2, r1
 8006660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e133      	b.n	80068d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800668a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	78db      	ldrb	r3, [r3, #3]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d015      	beq.n	80066c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 811b 	beq.w	80068d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	2101      	movs	r1, #1
 80066b0:	fa01 f303 	lsl.w	r3, r1, r3
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ba:	4313      	orrs	r3, r2
 80066bc:	634b      	str	r3, [r1, #52]	; 0x34
 80066be:	e109      	b.n	80068d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d110      	bne.n	80066f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	e00f      	b.n	8006712 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006710:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	68d9      	ldr	r1, [r3, #12]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	b298      	uxth	r0, r3
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	4603      	mov	r3, r0
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fa38 	bl	8006b9c <USB_WritePacket>
 800672c:	e0d2      	b.n	80068d4 <USB_EPStartXfer+0x480>
 800672e:	bf00      	nop
 8006730:	e007ffff 	.word	0xe007ffff
 8006734:	fff80000 	.word	0xfff80000
 8006738:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	0159      	lsls	r1, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	440b      	add	r3, r1
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	4619      	mov	r1, r3
 8006758:	4b61      	ldr	r3, [pc, #388]	; (80068e0 <USB_EPStartXfer+0x48c>)
 800675a:	4013      	ands	r3, r2
 800675c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	0159      	lsls	r1, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	440b      	add	r3, r1
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	4619      	mov	r1, r3
 800677a:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <USB_EPStartXfer+0x490>)
 800677c:	4013      	ands	r3, r2
 800677e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d123      	bne.n	80067d0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	691a      	ldr	r2, [r3, #16]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800679e:	69b9      	ldr	r1, [r7, #24]
 80067a0:	0148      	lsls	r0, r1, #5
 80067a2:	69f9      	ldr	r1, [r7, #28]
 80067a4:	4401      	add	r1, r0
 80067a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067aa:	4313      	orrs	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067cc:	6113      	str	r3, [r2, #16]
 80067ce:	e033      	b.n	8006838 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	4413      	add	r3, r2
 80067da:	1e5a      	subs	r2, r3, #1
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	8afb      	ldrh	r3, [r7, #22]
 80067f6:	04d9      	lsls	r1, r3, #19
 80067f8:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <USB_EPStartXfer+0x494>)
 80067fa:	400b      	ands	r3, r1
 80067fc:	69b9      	ldr	r1, [r7, #24]
 80067fe:	0148      	lsls	r0, r1, #5
 8006800:	69f9      	ldr	r1, [r7, #28]
 8006802:	4401      	add	r1, r0
 8006804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006808:	4313      	orrs	r3, r2
 800680a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	8af9      	ldrh	r1, [r7, #22]
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006828:	69b9      	ldr	r1, [r7, #24]
 800682a:	0148      	lsls	r0, r1, #5
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	4401      	add	r1, r0
 8006830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006834:	4313      	orrs	r3, r2
 8006836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10d      	bne.n	800685a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d009      	beq.n	800685a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	68d9      	ldr	r1, [r3, #12]
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	460a      	mov	r2, r1
 8006858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	78db      	ldrb	r3, [r3, #3]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d128      	bne.n	80068b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d110      	bne.n	8006894 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	e00f      	b.n	80068b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	fff80000 	.word	0xfff80000
 80068e4:	e007ffff 	.word	0xe007ffff
 80068e8:	1ff80000 	.word	0x1ff80000

080068ec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 80cd 	bne.w	8006aa8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d132      	bne.n	800697c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	0159      	lsls	r1, r3, #5
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	440b      	add	r3, r1
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	4619      	mov	r1, r3
 8006932:	4b98      	ldr	r3, [pc, #608]	; (8006b94 <USB_EP0StartXfer+0x2a8>)
 8006934:	4013      	ands	r3, r2
 8006936:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	0159      	lsls	r1, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	440b      	add	r3, r1
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	4619      	mov	r1, r3
 8006974:	4b88      	ldr	r3, [pc, #544]	; (8006b98 <USB_EP0StartXfer+0x2ac>)
 8006976:	4013      	ands	r3, r2
 8006978:	610b      	str	r3, [r1, #16]
 800697a:	e04e      	b.n	8006a1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	0159      	lsls	r1, r3, #5
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	440b      	add	r3, r1
 8006992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006996:	4619      	mov	r1, r3
 8006998:	4b7f      	ldr	r3, [pc, #508]	; (8006b98 <USB_EP0StartXfer+0x2ac>)
 800699a:	4013      	ands	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	0159      	lsls	r1, r3, #5
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	440b      	add	r3, r1
 80069b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b8:	4619      	mov	r1, r3
 80069ba:	4b76      	ldr	r3, [pc, #472]	; (8006b94 <USB_EP0StartXfer+0x2a8>)
 80069bc:	4013      	ands	r3, r2
 80069be:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	695a      	ldr	r2, [r3, #20]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d903      	bls.n	80069d4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0a:	6939      	ldr	r1, [r7, #16]
 8006a0c:	0148      	lsls	r0, r1, #5
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	4401      	add	r1, r0
 8006a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d11e      	bne.n	8006a5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e092      	b.n	8006b84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d07e      	beq.n	8006b84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f003 030f 	and.w	r3, r3, #15
 8006a96:	2101      	movs	r1, #1
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	634b      	str	r3, [r1, #52]	; 0x34
 8006aa6:	e06d      	b.n	8006b84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	0159      	lsls	r1, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <USB_EP0StartXfer+0x2ac>)
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	0159      	lsls	r1, r3, #5
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	440b      	add	r3, r1
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <USB_EP0StartXfer+0x2a8>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	6939      	ldr	r1, [r7, #16]
 8006b34:	0148      	lsls	r0, r1, #5
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	4401      	add	r1, r0
 8006b3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d10d      	bne.n	8006b64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	68d9      	ldr	r1, [r3, #12]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b60:	460a      	mov	r2, r1
 8006b62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	e007ffff 	.word	0xe007ffff
 8006b98:	fff80000 	.word	0xfff80000

08006b9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	460b      	mov	r3, r1
 8006bac:	71fb      	strb	r3, [r7, #7]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006bba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d11a      	bne.n	8006bf8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bc2:	88bb      	ldrh	r3, [r7, #4]
 8006bc4:	3303      	adds	r3, #3
 8006bc6:	089b      	lsrs	r3, r3, #2
 8006bc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	e00f      	b.n	8006bf0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	031a      	lsls	r2, r3, #12
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bdc:	461a      	mov	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	3304      	adds	r3, #4
 8006be8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	3301      	adds	r3, #1
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3eb      	bcc.n	8006bd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3724      	adds	r7, #36	; 0x24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b089      	sub	sp, #36	; 0x24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	4613      	mov	r3, r2
 8006c12:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	3303      	adds	r3, #3
 8006c20:	089b      	lsrs	r3, r3, #2
 8006c22:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	e00b      	b.n	8006c42 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3ef      	bcc.n	8006c2a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006c4a:	69fb      	ldr	r3, [r7, #28]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3724      	adds	r7, #36	; 0x24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d12c      	bne.n	8006cce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	db12      	blt.n	8006cac <USB_EPSetStall+0x54>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00f      	beq.n	8006cac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006caa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e02b      	b.n	8006d26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db12      	blt.n	8006d06 <USB_EPSetStall+0xae>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00f      	beq.n	8006d06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d128      	bne.n	8006da2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	78db      	ldrb	r3, [r3, #3]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d003      	beq.n	8006d80 <USB_EPClearStall+0x4c>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	78db      	ldrb	r3, [r3, #3]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d138      	bne.n	8006df2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	6013      	str	r3, [r2, #0]
 8006da0:	e027      	b.n	8006df2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	015a      	lsls	r2, r3, #5
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	0151      	lsls	r1, r2, #5
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	440a      	add	r2, r1
 8006db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	78db      	ldrb	r3, [r3, #3]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d003      	beq.n	8006dd2 <USB_EPClearStall+0x9e>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	78db      	ldrb	r3, [r3, #3]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d10f      	bne.n	8006df2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7a:	f023 0302 	bic.w	r3, r3, #2
 8006e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ea8:	f023 0303 	bic.w	r3, r3, #3
 8006eac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ebc:	f043 0302 	orr.w	r3, r3, #2
 8006ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	4013      	ands	r3, r2
 8006f18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	0c1b      	lsrs	r3, r3, #16
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	b29b      	uxth	r3, r3
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b085      	sub	sp, #20
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fca:	01db      	lsls	r3, r3, #7
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	f003 0301 	and.w	r3, r3, #1
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702e:	4619      	mov	r1, r3
 8007030:	4b09      	ldr	r3, [pc, #36]	; (8007058 <USB_ActivateSetup+0x44>)
 8007032:	4013      	ands	r3, r2
 8007034:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	fffff800 	.word	0xfffff800

0800705c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	460b      	mov	r3, r1
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	333c      	adds	r3, #60	; 0x3c
 8007072:	3304      	adds	r3, #4
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <USB_EP0_OutStart+0xb8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d90a      	bls.n	8007096 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007090:	d101      	bne.n	8007096 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	e037      	b.n	8007106 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	461a      	mov	r2, r3
 800709e:	2300      	movs	r3, #0
 80070a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c4:	f043 0318 	orr.w	r3, r3, #24
 80070c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070de:	7afb      	ldrb	r3, [r7, #11]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10f      	bne.n	8007104 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	4f54300a 	.word	0x4f54300a

08007118 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	4a13      	ldr	r2, [pc, #76]	; (800717c <USB_CoreReset+0x64>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e01b      	b.n	800716e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	daf2      	bge.n	8007124 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f043 0201 	orr.w	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a09      	ldr	r2, [pc, #36]	; (800717c <USB_CoreReset+0x64>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d901      	bls.n	8007160 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e006      	b.n	800716e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b01      	cmp	r3, #1
 800716a:	d0f0      	beq.n	800714e <USB_CoreReset+0x36>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	00030d40 	.word	0x00030d40

08007180 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007186:	4b8d      	ldr	r3, [pc, #564]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007188:	22c0      	movs	r2, #192	; 0xc0
 800718a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800718c:	4b8b      	ldr	r3, [pc, #556]	; (80073bc <MX_LWIP_Init+0x23c>)
 800718e:	22a8      	movs	r2, #168	; 0xa8
 8007190:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 200;
 8007192:	4b8a      	ldr	r3, [pc, #552]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007194:	22c8      	movs	r2, #200	; 0xc8
 8007196:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 5;
 8007198:	4b88      	ldr	r3, [pc, #544]	; (80073bc <MX_LWIP_Init+0x23c>)
 800719a:	2205      	movs	r2, #5
 800719c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800719e:	4b88      	ldr	r3, [pc, #544]	; (80073c0 <MX_LWIP_Init+0x240>)
 80071a0:	22ff      	movs	r2, #255	; 0xff
 80071a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80071a4:	4b86      	ldr	r3, [pc, #536]	; (80073c0 <MX_LWIP_Init+0x240>)
 80071a6:	22ff      	movs	r2, #255	; 0xff
 80071a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80071aa:	4b85      	ldr	r3, [pc, #532]	; (80073c0 <MX_LWIP_Init+0x240>)
 80071ac:	22ff      	movs	r2, #255	; 0xff
 80071ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80071b0:	4b83      	ldr	r3, [pc, #524]	; (80073c0 <MX_LWIP_Init+0x240>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80071b6:	4b83      	ldr	r3, [pc, #524]	; (80073c4 <MX_LWIP_Init+0x244>)
 80071b8:	22c0      	movs	r2, #192	; 0xc0
 80071ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80071bc:	4b81      	ldr	r3, [pc, #516]	; (80073c4 <MX_LWIP_Init+0x244>)
 80071be:	22a8      	movs	r2, #168	; 0xa8
 80071c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 200;
 80071c2:	4b80      	ldr	r3, [pc, #512]	; (80073c4 <MX_LWIP_Init+0x244>)
 80071c4:	22c8      	movs	r2, #200	; 0xc8
 80071c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80071c8:	4b7e      	ldr	r3, [pc, #504]	; (80073c4 <MX_LWIP_Init+0x244>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80071ce:	f002 f921 	bl	8009414 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80071d2:	4b7a      	ldr	r3, [pc, #488]	; (80073bc <MX_LWIP_Init+0x23c>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	061a      	lsls	r2, r3, #24
 80071d8:	4b78      	ldr	r3, [pc, #480]	; (80073bc <MX_LWIP_Init+0x23c>)
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	431a      	orrs	r2, r3
 80071e0:	4b76      	ldr	r3, [pc, #472]	; (80073bc <MX_LWIP_Init+0x23c>)
 80071e2:	789b      	ldrb	r3, [r3, #2]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	4313      	orrs	r3, r2
 80071e8:	4a74      	ldr	r2, [pc, #464]	; (80073bc <MX_LWIP_Init+0x23c>)
 80071ea:	78d2      	ldrb	r2, [r2, #3]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	061a      	lsls	r2, r3, #24
 80071f0:	4b72      	ldr	r3, [pc, #456]	; (80073bc <MX_LWIP_Init+0x23c>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	0619      	lsls	r1, r3, #24
 80071f6:	4b71      	ldr	r3, [pc, #452]	; (80073bc <MX_LWIP_Init+0x23c>)
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	4319      	orrs	r1, r3
 80071fe:	4b6f      	ldr	r3, [pc, #444]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007200:	789b      	ldrb	r3, [r3, #2]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	430b      	orrs	r3, r1
 8007206:	496d      	ldr	r1, [pc, #436]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007208:	78c9      	ldrb	r1, [r1, #3]
 800720a:	430b      	orrs	r3, r1
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007212:	431a      	orrs	r2, r3
 8007214:	4b69      	ldr	r3, [pc, #420]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	0619      	lsls	r1, r3, #24
 800721a:	4b68      	ldr	r3, [pc, #416]	; (80073bc <MX_LWIP_Init+0x23c>)
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	4319      	orrs	r1, r3
 8007222:	4b66      	ldr	r3, [pc, #408]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007224:	789b      	ldrb	r3, [r3, #2]
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	430b      	orrs	r3, r1
 800722a:	4964      	ldr	r1, [pc, #400]	; (80073bc <MX_LWIP_Init+0x23c>)
 800722c:	78c9      	ldrb	r1, [r1, #3]
 800722e:	430b      	orrs	r3, r1
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007236:	431a      	orrs	r2, r3
 8007238:	4b60      	ldr	r3, [pc, #384]	; (80073bc <MX_LWIP_Init+0x23c>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	0619      	lsls	r1, r3, #24
 800723e:	4b5f      	ldr	r3, [pc, #380]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	041b      	lsls	r3, r3, #16
 8007244:	4319      	orrs	r1, r3
 8007246:	4b5d      	ldr	r3, [pc, #372]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007248:	789b      	ldrb	r3, [r3, #2]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	430b      	orrs	r3, r1
 800724e:	495b      	ldr	r1, [pc, #364]	; (80073bc <MX_LWIP_Init+0x23c>)
 8007250:	78c9      	ldrb	r1, [r1, #3]
 8007252:	430b      	orrs	r3, r1
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	4313      	orrs	r3, r2
 8007258:	4a5b      	ldr	r2, [pc, #364]	; (80073c8 <MX_LWIP_Init+0x248>)
 800725a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800725c:	4b58      	ldr	r3, [pc, #352]	; (80073c0 <MX_LWIP_Init+0x240>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	061a      	lsls	r2, r3, #24
 8007262:	4b57      	ldr	r3, [pc, #348]	; (80073c0 <MX_LWIP_Init+0x240>)
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	431a      	orrs	r2, r3
 800726a:	4b55      	ldr	r3, [pc, #340]	; (80073c0 <MX_LWIP_Init+0x240>)
 800726c:	789b      	ldrb	r3, [r3, #2]
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	4313      	orrs	r3, r2
 8007272:	4a53      	ldr	r2, [pc, #332]	; (80073c0 <MX_LWIP_Init+0x240>)
 8007274:	78d2      	ldrb	r2, [r2, #3]
 8007276:	4313      	orrs	r3, r2
 8007278:	061a      	lsls	r2, r3, #24
 800727a:	4b51      	ldr	r3, [pc, #324]	; (80073c0 <MX_LWIP_Init+0x240>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	0619      	lsls	r1, r3, #24
 8007280:	4b4f      	ldr	r3, [pc, #316]	; (80073c0 <MX_LWIP_Init+0x240>)
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	4319      	orrs	r1, r3
 8007288:	4b4d      	ldr	r3, [pc, #308]	; (80073c0 <MX_LWIP_Init+0x240>)
 800728a:	789b      	ldrb	r3, [r3, #2]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	430b      	orrs	r3, r1
 8007290:	494b      	ldr	r1, [pc, #300]	; (80073c0 <MX_LWIP_Init+0x240>)
 8007292:	78c9      	ldrb	r1, [r1, #3]
 8007294:	430b      	orrs	r3, r1
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800729c:	431a      	orrs	r2, r3
 800729e:	4b48      	ldr	r3, [pc, #288]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	0619      	lsls	r1, r3, #24
 80072a4:	4b46      	ldr	r3, [pc, #280]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	4319      	orrs	r1, r3
 80072ac:	4b44      	ldr	r3, [pc, #272]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072ae:	789b      	ldrb	r3, [r3, #2]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	430b      	orrs	r3, r1
 80072b4:	4942      	ldr	r1, [pc, #264]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072b6:	78c9      	ldrb	r1, [r1, #3]
 80072b8:	430b      	orrs	r3, r1
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072c0:	431a      	orrs	r2, r3
 80072c2:	4b3f      	ldr	r3, [pc, #252]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	0619      	lsls	r1, r3, #24
 80072c8:	4b3d      	ldr	r3, [pc, #244]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	4319      	orrs	r1, r3
 80072d0:	4b3b      	ldr	r3, [pc, #236]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072d2:	789b      	ldrb	r3, [r3, #2]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	430b      	orrs	r3, r1
 80072d8:	4939      	ldr	r1, [pc, #228]	; (80073c0 <MX_LWIP_Init+0x240>)
 80072da:	78c9      	ldrb	r1, [r1, #3]
 80072dc:	430b      	orrs	r3, r1
 80072de:	0e1b      	lsrs	r3, r3, #24
 80072e0:	4313      	orrs	r3, r2
 80072e2:	4a3a      	ldr	r2, [pc, #232]	; (80073cc <MX_LWIP_Init+0x24c>)
 80072e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80072e6:	4b37      	ldr	r3, [pc, #220]	; (80073c4 <MX_LWIP_Init+0x244>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	061a      	lsls	r2, r3, #24
 80072ec:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <MX_LWIP_Init+0x244>)
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	431a      	orrs	r2, r3
 80072f4:	4b33      	ldr	r3, [pc, #204]	; (80073c4 <MX_LWIP_Init+0x244>)
 80072f6:	789b      	ldrb	r3, [r3, #2]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	4313      	orrs	r3, r2
 80072fc:	4a31      	ldr	r2, [pc, #196]	; (80073c4 <MX_LWIP_Init+0x244>)
 80072fe:	78d2      	ldrb	r2, [r2, #3]
 8007300:	4313      	orrs	r3, r2
 8007302:	061a      	lsls	r2, r3, #24
 8007304:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	0619      	lsls	r1, r3, #24
 800730a:	4b2e      	ldr	r3, [pc, #184]	; (80073c4 <MX_LWIP_Init+0x244>)
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	041b      	lsls	r3, r3, #16
 8007310:	4319      	orrs	r1, r3
 8007312:	4b2c      	ldr	r3, [pc, #176]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007314:	789b      	ldrb	r3, [r3, #2]
 8007316:	021b      	lsls	r3, r3, #8
 8007318:	430b      	orrs	r3, r1
 800731a:	492a      	ldr	r1, [pc, #168]	; (80073c4 <MX_LWIP_Init+0x244>)
 800731c:	78c9      	ldrb	r1, [r1, #3]
 800731e:	430b      	orrs	r3, r1
 8007320:	021b      	lsls	r3, r3, #8
 8007322:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007326:	431a      	orrs	r2, r3
 8007328:	4b26      	ldr	r3, [pc, #152]	; (80073c4 <MX_LWIP_Init+0x244>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	0619      	lsls	r1, r3, #24
 800732e:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	041b      	lsls	r3, r3, #16
 8007334:	4319      	orrs	r1, r3
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007338:	789b      	ldrb	r3, [r3, #2]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	430b      	orrs	r3, r1
 800733e:	4921      	ldr	r1, [pc, #132]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007340:	78c9      	ldrb	r1, [r1, #3]
 8007342:	430b      	orrs	r3, r1
 8007344:	0a1b      	lsrs	r3, r3, #8
 8007346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800734a:	431a      	orrs	r2, r3
 800734c:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <MX_LWIP_Init+0x244>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	0619      	lsls	r1, r3, #24
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	4319      	orrs	r1, r3
 800735a:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <MX_LWIP_Init+0x244>)
 800735c:	789b      	ldrb	r3, [r3, #2]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	430b      	orrs	r3, r1
 8007362:	4918      	ldr	r1, [pc, #96]	; (80073c4 <MX_LWIP_Init+0x244>)
 8007364:	78c9      	ldrb	r1, [r1, #3]
 8007366:	430b      	orrs	r3, r1
 8007368:	0e1b      	lsrs	r3, r3, #24
 800736a:	4313      	orrs	r3, r2
 800736c:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <MX_LWIP_Init+0x250>)
 800736e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007370:	4b18      	ldr	r3, [pc, #96]	; (80073d4 <MX_LWIP_Init+0x254>)
 8007372:	9302      	str	r3, [sp, #8]
 8007374:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <MX_LWIP_Init+0x258>)
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	2300      	movs	r3, #0
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <MX_LWIP_Init+0x250>)
 800737e:	4a13      	ldr	r2, [pc, #76]	; (80073cc <MX_LWIP_Init+0x24c>)
 8007380:	4911      	ldr	r1, [pc, #68]	; (80073c8 <MX_LWIP_Init+0x248>)
 8007382:	4816      	ldr	r0, [pc, #88]	; (80073dc <MX_LWIP_Init+0x25c>)
 8007384:	f002 fcec 	bl	8009d60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007388:	4814      	ldr	r0, [pc, #80]	; (80073dc <MX_LWIP_Init+0x25c>)
 800738a:	f002 fe9b 	bl	800a0c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <MX_LWIP_Init+0x25c>)
 8007390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007394:	089b      	lsrs	r3, r3, #2
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80073a0:	480e      	ldr	r0, [pc, #56]	; (80073dc <MX_LWIP_Init+0x25c>)
 80073a2:	f002 fe9f 	bl	800a0e4 <netif_set_up>
 80073a6:	e002      	b.n	80073ae <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80073a8:	480c      	ldr	r0, [pc, #48]	; (80073dc <MX_LWIP_Init+0x25c>)
 80073aa:	f002 ff07 	bl	800a1bc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80073ae:	490c      	ldr	r1, [pc, #48]	; (80073e0 <MX_LWIP_Init+0x260>)
 80073b0:	480a      	ldr	r0, [pc, #40]	; (80073dc <MX_LWIP_Init+0x25c>)
 80073b2:	f002 ff35 	bl	800a220 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	200006a8 	.word	0x200006a8
 80073c0:	200006a4 	.word	0x200006a4
 80073c4:	20000668 	.word	0x20000668
 80073c8:	200006a0 	.word	0x200006a0
 80073cc:	200006ac 	.word	0x200006ac
 80073d0:	200006b0 	.word	0x200006b0
 80073d4:	0801325d 	.word	0x0801325d
 80073d8:	08007995 	.word	0x08007995
 80073dc:	2000066c 	.word	0x2000066c
 80073e0:	08007a01 	.word	0x08007a01

080073e4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08e      	sub	sp, #56	; 0x38
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a4e      	ldr	r2, [pc, #312]	; (800753c <HAL_ETH_MspInit+0x158>)
 8007402:	4293      	cmp	r3, r2
 8007404:	f040 8096 	bne.w	8007534 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007408:	4b4d      	ldr	r3, [pc, #308]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	4a4c      	ldr	r2, [pc, #304]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800740e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007412:	6313      	str	r3, [r2, #48]	; 0x30
 8007414:	4b4a      	ldr	r3, [pc, #296]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	4b47      	ldr	r3, [pc, #284]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	4a46      	ldr	r2, [pc, #280]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800742a:	6313      	str	r3, [r2, #48]	; 0x30
 800742c:	4b44      	ldr	r3, [pc, #272]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4b41      	ldr	r3, [pc, #260]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	4a40      	ldr	r2, [pc, #256]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800743e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007442:	6313      	str	r3, [r2, #48]	; 0x30
 8007444:	4b3e      	ldr	r3, [pc, #248]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007450:	4b3b      	ldr	r3, [pc, #236]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	4a3a      	ldr	r2, [pc, #232]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	6313      	str	r3, [r2, #48]	; 0x30
 800745c:	4b38      	ldr	r3, [pc, #224]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800745e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	617b      	str	r3, [r7, #20]
 8007466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007468:	4b35      	ldr	r3, [pc, #212]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746c:	4a34      	ldr	r2, [pc, #208]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	6313      	str	r3, [r2, #48]	; 0x30
 8007474:	4b32      	ldr	r3, [pc, #200]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007480:	4b2f      	ldr	r3, [pc, #188]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	4a2e      	ldr	r2, [pc, #184]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 8007486:	f043 0302 	orr.w	r3, r3, #2
 800748a:	6313      	str	r3, [r2, #48]	; 0x30
 800748c:	4b2c      	ldr	r3, [pc, #176]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007498:	4b29      	ldr	r3, [pc, #164]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	4a28      	ldr	r2, [pc, #160]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 800749e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a2:	6313      	str	r3, [r2, #48]	; 0x30
 80074a4:	4b26      	ldr	r3, [pc, #152]	; (8007540 <HAL_ETH_MspInit+0x15c>)
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80074b0:	2332      	movs	r3, #50	; 0x32
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074b4:	2302      	movs	r3, #2
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074bc:	2303      	movs	r3, #3
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074c0:	230b      	movs	r3, #11
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c8:	4619      	mov	r1, r3
 80074ca:	481e      	ldr	r0, [pc, #120]	; (8007544 <HAL_ETH_MspInit+0x160>)
 80074cc:	f7fa ff3e 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80074d0:	2386      	movs	r3, #134	; 0x86
 80074d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d4:	2302      	movs	r3, #2
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074dc:	2303      	movs	r3, #3
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074e0:	230b      	movs	r3, #11
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e8:	4619      	mov	r1, r3
 80074ea:	4817      	ldr	r0, [pc, #92]	; (8007548 <HAL_ETH_MspInit+0x164>)
 80074ec:	f7fa ff2e 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80074f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f6:	2302      	movs	r3, #2
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074fe:	2303      	movs	r3, #3
 8007500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007502:	230b      	movs	r3, #11
 8007504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750a:	4619      	mov	r1, r3
 800750c:	480f      	ldr	r0, [pc, #60]	; (800754c <HAL_ETH_MspInit+0x168>)
 800750e:	f7fa ff1d 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007512:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007518:	2302      	movs	r3, #2
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751c:	2300      	movs	r3, #0
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007520:	2303      	movs	r3, #3
 8007522:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007524:	230b      	movs	r3, #11
 8007526:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752c:	4619      	mov	r1, r3
 800752e:	4808      	ldr	r0, [pc, #32]	; (8007550 <HAL_ETH_MspInit+0x16c>)
 8007530:	f7fa ff0c 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007534:	bf00      	nop
 8007536:	3738      	adds	r7, #56	; 0x38
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40028000 	.word	0x40028000
 8007540:	40023800 	.word	0x40023800
 8007544:	40020800 	.word	0x40020800
 8007548:	40020000 	.word	0x40020000
 800754c:	40020400 	.word	0x40020400
 8007550:	40021800 	.word	0x40021800

08007554 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007560:	4b4d      	ldr	r3, [pc, #308]	; (8007698 <low_level_init+0x144>)
 8007562:	4a4e      	ldr	r2, [pc, #312]	; (800769c <low_level_init+0x148>)
 8007564:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007566:	4b4c      	ldr	r3, [pc, #304]	; (8007698 <low_level_init+0x144>)
 8007568:	2201      	movs	r2, #1
 800756a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800756c:	4b4a      	ldr	r3, [pc, #296]	; (8007698 <low_level_init+0x144>)
 800756e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007572:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007574:	4b48      	ldr	r3, [pc, #288]	; (8007698 <low_level_init+0x144>)
 8007576:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800757a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800757c:	4b46      	ldr	r3, [pc, #280]	; (8007698 <low_level_init+0x144>)
 800757e:	2200      	movs	r2, #0
 8007580:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007582:	2300      	movs	r3, #0
 8007584:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x13;
 8007586:	2313      	movs	r3, #19
 8007588:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x37;
 800758a:	2337      	movs	r3, #55	; 0x37
 800758c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 800758e:	2312      	movs	r3, #18
 8007590:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x34;
 8007592:	2334      	movs	r3, #52	; 0x34
 8007594:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x56;
 8007596:	2356      	movs	r3, #86	; 0x56
 8007598:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800759a:	4a3f      	ldr	r2, [pc, #252]	; (8007698 <low_level_init+0x144>)
 800759c:	f107 0308 	add.w	r3, r7, #8
 80075a0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80075a2:	4b3d      	ldr	r3, [pc, #244]	; (8007698 <low_level_init+0x144>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80075a8:	4b3b      	ldr	r3, [pc, #236]	; (8007698 <low_level_init+0x144>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80075ae:	4b3a      	ldr	r3, [pc, #232]	; (8007698 <low_level_init+0x144>)
 80075b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80075b4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80075b6:	4838      	ldr	r0, [pc, #224]	; (8007698 <low_level_init+0x144>)
 80075b8:	f7f9 fdc4 	bl	8001144 <HAL_ETH_Init>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d108      	bne.n	80075d8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075cc:	f043 0304 	orr.w	r3, r3, #4
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80075d8:	2304      	movs	r3, #4
 80075da:	4a31      	ldr	r2, [pc, #196]	; (80076a0 <low_level_init+0x14c>)
 80075dc:	4931      	ldr	r1, [pc, #196]	; (80076a4 <low_level_init+0x150>)
 80075de:	482e      	ldr	r0, [pc, #184]	; (8007698 <low_level_init+0x144>)
 80075e0:	f7f9 ff4a 	bl	8001478 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80075e4:	2304      	movs	r3, #4
 80075e6:	4a30      	ldr	r2, [pc, #192]	; (80076a8 <low_level_init+0x154>)
 80075e8:	4930      	ldr	r1, [pc, #192]	; (80076ac <low_level_init+0x158>)
 80075ea:	482b      	ldr	r0, [pc, #172]	; (8007698 <low_level_init+0x144>)
 80075ec:	f7f9 ffad 	bl	800154a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2206      	movs	r2, #6
 80075f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80075f8:	4b27      	ldr	r3, [pc, #156]	; (8007698 <low_level_init+0x144>)
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007604:	4b24      	ldr	r3, [pc, #144]	; (8007698 <low_level_init+0x144>)
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	785a      	ldrb	r2, [r3, #1]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007610:	4b21      	ldr	r3, [pc, #132]	; (8007698 <low_level_init+0x144>)
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	789a      	ldrb	r2, [r3, #2]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800761c:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <low_level_init+0x144>)
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	78da      	ldrb	r2, [r3, #3]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007628:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <low_level_init+0x144>)
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	791a      	ldrb	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007634:	4b18      	ldr	r3, [pc, #96]	; (8007698 <low_level_init+0x144>)
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	795a      	ldrb	r2, [r3, #5]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007646:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800764e:	f043 030a 	orr.w	r3, r3, #10
 8007652:	b2da      	uxtb	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800765a:	480f      	ldr	r0, [pc, #60]	; (8007698 <low_level_init+0x144>)
 800765c:	f7fa fa1e 	bl	8001a9c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007660:	f107 0310 	add.w	r3, r7, #16
 8007664:	461a      	mov	r2, r3
 8007666:	211d      	movs	r1, #29
 8007668:	480b      	ldr	r0, [pc, #44]	; (8007698 <low_level_init+0x144>)
 800766a:	f7fa f949 	bl	8001900 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f043 030b 	orr.w	r3, r3, #11
 8007674:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	461a      	mov	r2, r3
 800767a:	211d      	movs	r1, #29
 800767c:	4806      	ldr	r0, [pc, #24]	; (8007698 <low_level_init+0x144>)
 800767e:	f7fa f9a7 	bl	80019d0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007682:	f107 0310 	add.w	r3, r7, #16
 8007686:	461a      	mov	r2, r3
 8007688:	211d      	movs	r1, #29
 800768a:	4803      	ldr	r0, [pc, #12]	; (8007698 <low_level_init+0x144>)
 800768c:	f7fa f938 	bl	8001900 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007690:	bf00      	nop
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20001f84 	.word	0x20001f84
 800769c:	40028000 	.word	0x40028000
 80076a0:	20001fcc 	.word	0x20001fcc
 80076a4:	200006b4 	.word	0x200006b4
 80076a8:	20000734 	.word	0x20000734
 80076ac:	20001f04 	.word	0x20001f04

080076b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08a      	sub	sp, #40	; 0x28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80076ba:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <low_level_output+0x138>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80076d2:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <low_level_output+0x138>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	623b      	str	r3, [r7, #32]
 80076e0:	e05a      	b.n	8007798 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	da03      	bge.n	80076f2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80076ea:	23f8      	movs	r3, #248	; 0xf8
 80076ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80076f0:	e05c      	b.n	80077ac <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	895b      	ldrh	r3, [r3, #10]
 80076f6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80076fc:	e02f      	b.n	800775e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	18d0      	adds	r0, r2, r3
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	18d1      	adds	r1, r2, r3
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	461a      	mov	r2, r3
 8007716:	f00c fc31 	bl	8013f7c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	da03      	bge.n	8007730 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007728:	23f8      	movs	r3, #248	; 0xf8
 800772a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800772e:	e03d      	b.n	80077ac <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007740:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800774c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007758:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4413      	add	r3, r2
 8007764:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007768:	4293      	cmp	r3, r2
 800776a:	d8c8      	bhi.n	80076fe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	18d0      	adds	r0, r2, r3
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4619      	mov	r1, r3
 800777e:	f00c fbfd 	bl	8013f7c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	623b      	str	r3, [r7, #32]
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1a1      	bne.n	80076e2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800779e:	6979      	ldr	r1, [r7, #20]
 80077a0:	4811      	ldr	r0, [pc, #68]	; (80077e8 <low_level_output+0x138>)
 80077a2:	f7f9 ff3f 	bl	8001624 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <low_level_output+0x138>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80077b4:	4413      	add	r3, r2
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00d      	beq.n	80077dc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80077c0:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <low_level_output+0x138>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80077c8:	4413      	add	r3, r2
 80077ca:	2220      	movs	r2, #32
 80077cc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <low_level_output+0x138>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80077d6:	4413      	add	r3, r2
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80077dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3728      	adds	r7, #40	; 0x28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20001f84 	.word	0x20001f84

080077ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08c      	sub	sp, #48	; 0x30
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800780c:	2300      	movs	r3, #0
 800780e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007810:	484f      	ldr	r0, [pc, #316]	; (8007950 <low_level_input+0x164>)
 8007812:	f7f9 fff1 	bl	80017f8 <HAL_ETH_GetReceivedFrame>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <low_level_input+0x34>

    return NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	e092      	b.n	8007946 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007820:	4b4b      	ldr	r3, [pc, #300]	; (8007950 <low_level_input+0x164>)
 8007822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007824:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007826:	4b4a      	ldr	r3, [pc, #296]	; (8007950 <low_level_input+0x164>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800782c:	89fb      	ldrh	r3, [r7, #14]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007832:	89fb      	ldrh	r3, [r7, #14]
 8007834:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007838:	4619      	mov	r1, r3
 800783a:	2000      	movs	r0, #0
 800783c:	f002 fd8c 	bl	800a358 <pbuf_alloc>
 8007840:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d04b      	beq.n	80078e0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007848:	4b41      	ldr	r3, [pc, #260]	; (8007950 <low_level_input+0x164>)
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	62bb      	str	r3, [r7, #40]	; 0x28
 8007856:	e040      	b.n	80078da <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	895b      	ldrh	r3, [r3, #10]
 800785c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007862:	e021      	b.n	80078a8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	18d0      	adds	r0, r2, r3
 800786c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	18d1      	adds	r1, r2, r3
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	461a      	mov	r2, r3
 800787c:	f00c fb7e 	bl	8013f7c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007896:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80078a2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d8d6      	bhi.n	8007864 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80078b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	18d0      	adds	r0, r2, r3
 80078be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	4413      	add	r3, r2
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4619      	mov	r1, r3
 80078c8:	f00c fb58 	bl	8013f7c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1bb      	bne.n	8007858 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80078e0:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <low_level_input+0x164>)
 80078e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	e00b      	b.n	8007904 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3301      	adds	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	4b12      	ldr	r3, [pc, #72]	; (8007950 <low_level_input+0x164>)
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	429a      	cmp	r2, r3
 800790c:	d3ee      	bcc.n	80078ec <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <low_level_input+0x164>)
 8007910:	2200      	movs	r2, #0
 8007912:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007914:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <low_level_input+0x164>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	f241 0314 	movw	r3, #4116	; 0x1014
 800791c:	4413      	add	r3, r2
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00d      	beq.n	8007944 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <low_level_input+0x164>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007930:	4413      	add	r3, r2
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <low_level_input+0x164>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	f241 0308 	movw	r3, #4104	; 0x1008
 800793e:	4413      	add	r3, r2
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007946:	4618      	mov	r0, r3
 8007948:	3730      	adds	r7, #48	; 0x30
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20001f84 	.word	0x20001f84

08007954 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff ff45 	bl	80077ec <low_level_input>
 8007962:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d010      	beq.n	800798c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007978:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d006      	beq.n	800798e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f002 ffcd 	bl	800a920 <pbuf_free>
    p = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	e000      	b.n	800798e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800798c:	bf00      	nop
  }
}
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <ethernetif_init+0x1c>
 80079a2:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <ethernetif_init+0x48>)
 80079a4:	f240 2211 	movw	r2, #529	; 0x211
 80079a8:	490d      	ldr	r1, [pc, #52]	; (80079e0 <ethernetif_init+0x4c>)
 80079aa:	480e      	ldr	r0, [pc, #56]	; (80079e4 <ethernetif_init+0x50>)
 80079ac:	f00c fba6 	bl	80140fc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2273      	movs	r2, #115	; 0x73
 80079b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2274      	movs	r2, #116	; 0x74
 80079bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a09      	ldr	r2, [pc, #36]	; (80079e8 <ethernetif_init+0x54>)
 80079c4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a08      	ldr	r2, [pc, #32]	; (80079ec <ethernetif_init+0x58>)
 80079ca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fdc1 	bl	8007554 <low_level_init>

  return ERR_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	0801500c 	.word	0x0801500c
 80079e0:	08015028 	.word	0x08015028
 80079e4:	08015038 	.word	0x08015038
 80079e8:	08011721 	.word	0x08011721
 80079ec:	080076b1 	.word	0x080076b1

080079f0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079f4:	f7f9 fa94 	bl	8000f20 <HAL_GetTick>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	bd80      	pop	{r7, pc}
	...

08007a00 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a16:	089b      	lsrs	r3, r3, #2
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d05d      	beq.n	8007ade <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007a22:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d03f      	beq.n	8007aaa <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4830      	ldr	r0, [pc, #192]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a32:	f7f9 ffcd 	bl	80019d0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007a36:	f7f9 fa73 	bl	8000f20 <HAL_GetTick>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	461a      	mov	r2, r3
 8007a44:	2101      	movs	r1, #1
 8007a46:	482b      	ldr	r0, [pc, #172]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a48:	f7f9 ff5a 	bl	8001900 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007a4c:	f7f9 fa68 	bl	8000f20 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a5a:	d828      	bhi.n	8007aae <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0eb      	beq.n	8007a3e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	2110      	movs	r1, #16
 8007a6e:	4821      	ldr	r0, [pc, #132]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a70:	f7f9 ff46 	bl	8001900 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a7e:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e002      	b.n	8007a8e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007a88:	4b1a      	ldr	r3, [pc, #104]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007a98:	4b16      	ldr	r3, [pc, #88]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]
 8007a9e:	e016      	b.n	8007ace <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007aa0:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	e011      	b.n	8007ace <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <ethernetif_update_config+0xb0>
          goto error;
 8007aae:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	08db      	lsrs	r3, r3, #3
 8007ab6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007ab8:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	085b      	lsrs	r3, r3, #1
 8007abe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	480a      	ldr	r0, [pc, #40]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007aca:	f7f9 ff81 	bl	80019d0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4808      	ldr	r0, [pc, #32]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ad2:	f7fa f841 	bl	8001b58 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007ad6:	4807      	ldr	r0, [pc, #28]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ad8:	f7f9 ffe0 	bl	8001a9c <HAL_ETH_Start>
 8007adc:	e002      	b.n	8007ae4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007ade:	4805      	ldr	r0, [pc, #20]	; (8007af4 <ethernetif_update_config+0xf4>)
 8007ae0:	f7fa f80b 	bl	8001afa <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f807 	bl	8007af8 <ethernetif_notify_conn_changed>
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20001f84 	.word	0x20001f84

08007af8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007b1c:	f00c fa10 	bl	8013f40 <malloc>
 8007b20:	4603      	mov	r3, r0
 8007b22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007b32:	2302      	movs	r3, #2
 8007b34:	e078      	b.n	8007c28 <USBD_CDC_Init+0x11c>
  }

  pdev->pClassData = (void *)hcdc;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7c1b      	ldrb	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d119      	bne.n	8007b7a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	2181      	movs	r1, #129	; 0x81
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f00c f82f 	bl	8013bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b5e:	2202      	movs	r2, #2
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f00c f825 	bl	8013bb2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2210      	movs	r2, #16
 8007b74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007b78:	e016      	b.n	8007ba8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	2181      	movs	r1, #129	; 0x81
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f00c f816 	bl	8013bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b8c:	2340      	movs	r3, #64	; 0x40
 8007b8e:	2202      	movs	r2, #2
 8007b90:	2101      	movs	r1, #1
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f00c f80d 	bl	8013bb2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ba8:	2308      	movs	r3, #8
 8007baa:	2203      	movs	r2, #3
 8007bac:	2182      	movs	r1, #130	; 0x82
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f00b ffff 	bl	8013bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007bd6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007bda:	f00c f9b1 	bl	8013f40 <malloc>
 8007bde:	4603      	mov	r3, r0
 8007be0:	461a      	mov	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc


  memset(pdev->pClassData,0,sizeof(USBD_CDC_HandleTypeDef)); // THIS LINE WAS ADDED
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bee:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f00c f9cf 	bl	8013f98 <memset>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7c1b      	ldrb	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <USBD_CDC_Init+0x10a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f00c f8be 	bl	8013d90 <USBD_LL_PrepareReceive>
 8007c14:	e007      	b.n	8007c26 <USBD_CDC_Init+0x11a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c1c:	2340      	movs	r3, #64	; 0x40
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f00c f8b5 	bl	8013d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007c40:	2181      	movs	r1, #129	; 0x81
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f00b ffdb 	bl	8013bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007c4e:	2101      	movs	r1, #1
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f00b ffd4 	bl	8013bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007c5e:	2182      	movs	r1, #130	; 0x82
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f00b ffcc 	bl	8013bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00e      	beq.n	8007c9e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c90:	4618      	mov	r0, r3
 8007c92:	f00c f95d 	bl	8013f50 <free>
    pdev->pClassData = NULL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d03a      	beq.n	8007d48 <USBD_CDC_Setup+0xa0>
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	f040 8097 	bne.w	8007e06 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	88db      	ldrh	r3, [r3, #6]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d029      	beq.n	8007d34 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	b25b      	sxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	da11      	bge.n	8007d0e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007cf6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cf8:	683a      	ldr	r2, [r7, #0]
 8007cfa:	88d2      	ldrh	r2, [r2, #6]
 8007cfc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007cfe:	6939      	ldr	r1, [r7, #16]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	88db      	ldrh	r3, [r3, #6]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f001 fad6 	bl	80092b8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007d0c:	e082      	b.n	8007e14 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	785a      	ldrb	r2, [r3, #1]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	88db      	ldrh	r3, [r3, #6]
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007d24:	6939      	ldr	r1, [r7, #16]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	88db      	ldrh	r3, [r3, #6]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 faef 	bl	8009310 <USBD_CtlPrepareRx>
    break;
 8007d32:	e06f      	b.n	8007e14 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	7850      	ldrb	r0, [r2, #1]
 8007d40:	2200      	movs	r2, #0
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	4798      	blx	r3
    break;
 8007d46:	e065      	b.n	8007e14 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	785b      	ldrb	r3, [r3, #1]
 8007d4c:	2b0b      	cmp	r3, #11
 8007d4e:	d84f      	bhi.n	8007df0 <USBD_CDC_Setup+0x148>
 8007d50:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <USBD_CDC_Setup+0xb0>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d89 	.word	0x08007d89
 8007d5c:	08007dff 	.word	0x08007dff
 8007d60:	08007df1 	.word	0x08007df1
 8007d64:	08007df1 	.word	0x08007df1
 8007d68:	08007df1 	.word	0x08007df1
 8007d6c:	08007df1 	.word	0x08007df1
 8007d70:	08007df1 	.word	0x08007df1
 8007d74:	08007df1 	.word	0x08007df1
 8007d78:	08007df1 	.word	0x08007df1
 8007d7c:	08007df1 	.word	0x08007df1
 8007d80:	08007db1 	.word	0x08007db1
 8007d84:	08007dd9 	.word	0x08007dd9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d107      	bne.n	8007da2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d92:	f107 030c 	add.w	r3, r7, #12
 8007d96:	2202      	movs	r2, #2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fa8c 	bl	80092b8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007da0:	e030      	b.n	8007e04 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fa16 	bl	80091d6 <USBD_CtlError>
        ret = USBD_FAIL;
 8007daa:	2303      	movs	r3, #3
 8007dac:	75fb      	strb	r3, [r7, #23]
      break;
 8007dae:	e029      	b.n	8007e04 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d107      	bne.n	8007dca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007dba:	f107 030f 	add.w	r3, r7, #15
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fa78 	bl	80092b8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007dc8:	e01c      	b.n	8007e04 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fa02 	bl	80091d6 <USBD_CtlError>
        ret = USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd6:	e015      	b.n	8007e04 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d00f      	beq.n	8007e02 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 f9f6 	bl	80091d6 <USBD_CtlError>
        ret = USBD_FAIL;
 8007dea:	2303      	movs	r3, #3
 8007dec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007dee:	e008      	b.n	8007e02 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 f9ef 	bl	80091d6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007dfc:	e002      	b.n	8007e04 <USBD_CDC_Setup+0x15c>
      break;
 8007dfe:	bf00      	nop
 8007e00:	e008      	b.n	8007e14 <USBD_CDC_Setup+0x16c>
      break;
 8007e02:	bf00      	nop
    }
    break;
 8007e04:	e006      	b.n	8007e14 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 f9e4 	bl	80091d6 <USBD_CtlError>
    ret = USBD_FAIL;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	75fb      	strb	r3, [r7, #23]
    break;
 8007e12:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop

08007e20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e049      	b.n	8007ed6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	3318      	adds	r3, #24
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d029      	beq.n	8007eb4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3318      	adds	r3, #24
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	78f9      	ldrb	r1, [r7, #3]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	460b      	mov	r3, r1
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	1a5b      	subs	r3, r3, r1
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4403      	add	r3, r0
 8007e80:	3344      	adds	r3, #68	; 0x44
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e88:	fb03 f301 	mul.w	r3, r3, r1
 8007e8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d110      	bne.n	8007eb4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	3318      	adds	r3, #24
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ea6:	78f9      	ldrb	r1, [r7, #3]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	2200      	movs	r2, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f00b ff4e 	bl	8013d4e <USBD_LL_Transmit>
 8007eb2:	e00f      	b.n	8007ed4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e015      	b.n	8007f2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f00b ff64 	bl	8013dd2 <USBD_LL_GetRxDataSize>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f26:	4611      	mov	r1, r2
 8007f28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f42:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d015      	beq.n	8007f7a <USBD_CDC_EP0_RxReady+0x46>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f54:	2bff      	cmp	r3, #255	; 0xff
 8007f56:	d010      	beq.n	8007f7a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007f66:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007f6e:	b292      	uxth	r2, r2
 8007f70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	22ff      	movs	r2, #255	; 0xff
 8007f76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2243      	movs	r2, #67	; 0x43
 8007f90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007f92:	4b03      	ldr	r3, [pc, #12]	; (8007fa0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20000094 	.word	0x20000094

08007fa4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2243      	movs	r2, #67	; 0x43
 8007fb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007fb2:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	20000050 	.word	0x20000050

08007fc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2243      	movs	r2, #67	; 0x43
 8007fd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007fd2:	4b03      	ldr	r3, [pc, #12]	; (8007fe0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	200000d8 	.word	0x200000d8

08007fe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	220a      	movs	r2, #10
 8007ff0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ff2:	4b03      	ldr	r3, [pc, #12]	; (8008000 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	2000000c 	.word	0x2000000c

08008004 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	e004      	b.n	8008022 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	370c      	adds	r7, #12
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800802e:	b480      	push	{r7}
 8008030:	b087      	sub	sp, #28
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008040:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008070:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008096:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e01a      	b.n	80080e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d114      	bne.n	80080de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80080d2:	2181      	movs	r1, #129	; 0x81
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f00b fe3a 	bl	8013d4e <USBD_LL_Transmit>

    ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008102:	2303      	movs	r3, #3
 8008104:	e016      	b.n	8008134 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7c1b      	ldrb	r3, [r3, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008118:	2101      	movs	r1, #1
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f00b fe38 	bl	8013d90 <USBD_LL_PrepareReceive>
 8008120:	e007      	b.n	8008132 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	2101      	movs	r1, #1
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f00b fe2f 	bl	8013d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e025      	b.n	80081a0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f00b fca5 	bl	8013ae4 <USBD_LL_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800819e:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081bc:	2303      	movs	r3, #3
 80081be:	e010      	b.n	80081e2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f107 020e 	add.w	r2, r7, #14
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	4602      	mov	r2, r0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f00b fcc2 	bl	8013b7c <USBD_LL_Start>
 80081f8:	4603      	mov	r3, r0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	460b      	mov	r3, r1
 8008222:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	78fa      	ldrb	r2, [r7, #3]
 800823c:	4611      	mov	r1, r2
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008246:	7bfb      	ldrb	r3, [r7, #15]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
  }

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 ff65 	bl	8009162 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d01a      	beq.n	80082f2 <USBD_LL_SetupStage+0x72>
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d822      	bhi.n	8008306 <USBD_LL_SetupStage+0x86>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <USBD_LL_SetupStage+0x4a>
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d00a      	beq.n	80082de <USBD_LL_SetupStage+0x5e>
 80082c8:	e01d      	b.n	8008306 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa18 	bl	8008708 <USBD_StdDevReq>
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
      break;
 80082dc:	e020      	b.n	8008320 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa7c 	bl	80087e4 <USBD_StdItfReq>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
      break;
 80082f0:	e016      	b.n	8008320 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 faba 	bl	8008874 <USBD_StdEPReq>
 8008300:	4603      	mov	r3, r0
 8008302:	73fb      	strb	r3, [r7, #15]
      break;
 8008304:	e00c      	b.n	8008320 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800830c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008310:	b2db      	uxtb	r3, r3
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f00b fc91 	bl	8013c3c <USBD_LL_StallEP>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
      break;
 800831e:	bf00      	nop
  }

  return ret;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b086      	sub	sp, #24
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	460b      	mov	r3, r1
 8008334:	607a      	str	r2, [r7, #4]
 8008336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d137      	bne.n	80083ae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008344:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800834c:	2b03      	cmp	r3, #3
 800834e:	d14a      	bne.n	80083e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	429a      	cmp	r2, r3
 800835a:	d913      	bls.n	8008384 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	689a      	ldr	r2, [r3, #8]
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	1ad2      	subs	r2, r2, r3
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	4293      	cmp	r3, r2
 8008374:	bf28      	it	cs
 8008376:	4613      	movcs	r3, r2
 8008378:	461a      	mov	r2, r3
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 ffe4 	bl	800934a <USBD_CtlContinueRx>
 8008382:	e030      	b.n	80083e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008396:	2b03      	cmp	r3, #3
 8008398:	d105      	bne.n	80083a6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 ffe0 	bl	800936c <USBD_CtlSendStatus>
 80083ac:	e01b      	b.n	80083e6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d013      	beq.n	80083e2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d10e      	bne.n	80083e2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	7afa      	ldrb	r2, [r7, #11]
 80083ce:	4611      	mov	r1, r2
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	4798      	blx	r3
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	e002      	b.n	80083e8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e000      	b.n	80083e8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	460b      	mov	r3, r1
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80083fe:	7afb      	ldrb	r3, [r7, #11]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d16a      	bne.n	80084da <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3314      	adds	r3, #20
 8008408:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008410:	2b02      	cmp	r3, #2
 8008412:	d155      	bne.n	80084c0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	689a      	ldr	r2, [r3, #8]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	429a      	cmp	r2, r3
 800841e:	d914      	bls.n	800844a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	461a      	mov	r2, r3
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 ff59 	bl	80092ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843c:	2300      	movs	r3, #0
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f00b fca4 	bl	8013d90 <USBD_LL_PrepareReceive>
 8008448:	e03a      	b.n	80084c0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	429a      	cmp	r2, r3
 8008454:	d11c      	bne.n	8008490 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800845e:	429a      	cmp	r2, r3
 8008460:	d316      	bcc.n	8008490 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800846c:	429a      	cmp	r2, r3
 800846e:	d20f      	bcs.n	8008490 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008470:	2200      	movs	r2, #0
 8008472:	2100      	movs	r1, #0
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 ff3a 	bl	80092ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008482:	2300      	movs	r3, #0
 8008484:	2200      	movs	r2, #0
 8008486:	2100      	movs	r1, #0
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f00b fc81 	bl	8013d90 <USBD_LL_PrepareReceive>
 800848e:	e017      	b.n	80084c0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d105      	bne.n	80084b2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084b2:	2180      	movs	r1, #128	; 0x80
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f00b fbc1 	bl	8013c3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 ff69 	bl	8009392 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d123      	bne.n	8008512 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fe99 	bl	8008202 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084d8:	e01b      	b.n	8008512 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d013      	beq.n	800850e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d10e      	bne.n	800850e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	7afa      	ldrb	r2, [r7, #11]
 80084fa:	4611      	mov	r1, r2
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	4798      	blx	r3
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	e002      	b.n	8008514 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800850e:	2303      	movs	r3, #3
 8008510:	e000      	b.n	8008514 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6852      	ldr	r2, [r2, #4]
 8008558:	b2d2      	uxtb	r2, r2
 800855a:	4611      	mov	r1, r2
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008560:	2340      	movs	r3, #64	; 0x40
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f00b fb23 	bl	8013bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2240      	movs	r2, #64	; 0x40
 8008578:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800857c:	2340      	movs	r3, #64	; 0x40
 800857e:	2200      	movs	r2, #0
 8008580:	2180      	movs	r1, #128	; 0x80
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f00b fb15 	bl	8013bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2240      	movs	r2, #64	; 0x40
 8008592:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d105      	bne.n	8008606 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008622:	2b03      	cmp	r3, #3
 8008624:	d10b      	bne.n	800863e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	460b      	mov	r3, r1
 800866c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d009      	beq.n	80086c0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6852      	ldr	r2, [r2, #4]
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	4611      	mov	r1, r2
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
  }

  return USBD_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b087      	sub	sp, #28
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3301      	adds	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086e8:	8a3b      	ldrh	r3, [r7, #16]
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	b21a      	sxth	r2, r3
 80086ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	b21b      	sxth	r3, r3
 80086f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086f8:	89fb      	ldrh	r3, [r7, #14]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
	...

08008708 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d005      	beq.n	800872e <USBD_StdDevReq+0x26>
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d853      	bhi.n	80087ce <USBD_StdDevReq+0xc6>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <USBD_StdDevReq+0x3a>
 800872a:	2b20      	cmp	r3, #32
 800872c:	d14f      	bne.n	80087ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	4798      	blx	r3
 800873c:	4603      	mov	r3, r0
 800873e:	73fb      	strb	r3, [r7, #15]
    break;
 8008740:	e04a      	b.n	80087d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b09      	cmp	r3, #9
 8008748:	d83b      	bhi.n	80087c2 <USBD_StdDevReq+0xba>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <USBD_StdDevReq+0x48>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	080087a5 	.word	0x080087a5
 8008754:	080087b9 	.word	0x080087b9
 8008758:	080087c3 	.word	0x080087c3
 800875c:	080087af 	.word	0x080087af
 8008760:	080087c3 	.word	0x080087c3
 8008764:	08008783 	.word	0x08008783
 8008768:	08008779 	.word	0x08008779
 800876c:	080087c3 	.word	0x080087c3
 8008770:	0800879b 	.word	0x0800879b
 8008774:	0800878d 	.word	0x0800878d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f9d8 	bl	8008b30 <USBD_GetDescriptor>
      break;
 8008780:	e024      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb67 	bl	8008e58 <USBD_SetAddress>
      break;
 800878a:	e01f      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fba6 	bl	8008ee0 <USBD_SetConfig>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
      break;
 8008798:	e018      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fc43 	bl	8009028 <USBD_GetConfig>
      break;
 80087a2:	e013      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc73 	bl	8009092 <USBD_GetStatus>
      break;
 80087ac:	e00e      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fca1 	bl	80090f8 <USBD_SetFeature>
      break;
 80087b6:	e009      	b.n	80087cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fcb0 	bl	8009120 <USBD_ClrFeature>
      break;
 80087c0:	e004      	b.n	80087cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fd06 	bl	80091d6 <USBD_CtlError>
      break;
 80087ca:	bf00      	nop
    }
    break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fd00 	bl	80091d6 <USBD_CtlError>
    break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop

080087e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d005      	beq.n	800880a <USBD_StdItfReq+0x26>
 80087fe:	2b40      	cmp	r3, #64	; 0x40
 8008800:	d82e      	bhi.n	8008860 <USBD_StdItfReq+0x7c>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <USBD_StdItfReq+0x26>
 8008806:	2b20      	cmp	r3, #32
 8008808:	d12a      	bne.n	8008860 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008810:	3b01      	subs	r3, #1
 8008812:	2b02      	cmp	r3, #2
 8008814:	d81d      	bhi.n	8008852 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	889b      	ldrh	r3, [r3, #4]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	d813      	bhi.n	8008848 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88db      	ldrh	r3, [r3, #6]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d110      	bne.n	800885c <USBD_StdItfReq+0x78>
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10d      	bne.n	800885c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fd93 	bl	800936c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008846:	e009      	b.n	800885c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcc3 	bl	80091d6 <USBD_CtlError>
      break;
 8008850:	e004      	b.n	800885c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fcbe 	bl	80091d6 <USBD_CtlError>
      break;
 800885a:	e000      	b.n	800885e <USBD_StdItfReq+0x7a>
      break;
 800885c:	bf00      	nop
    }
    break;
 800885e:	e004      	b.n	800886a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fcb7 	bl	80091d6 <USBD_CtlError>
    break;
 8008868:	bf00      	nop
  }

  return ret;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008890:	2b40      	cmp	r3, #64	; 0x40
 8008892:	d007      	beq.n	80088a4 <USBD_StdEPReq+0x30>
 8008894:	2b40      	cmp	r3, #64	; 0x40
 8008896:	f200 8140 	bhi.w	8008b1a <USBD_StdEPReq+0x2a6>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <USBD_StdEPReq+0x44>
 800889e:	2b20      	cmp	r3, #32
 80088a0:	f040 813b 	bne.w	8008b1a <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
    break;
 80088b6:	e135      	b.n	8008b24 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d007      	beq.n	80088d0 <USBD_StdEPReq+0x5c>
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	f300 8124 	bgt.w	8008b0e <USBD_StdEPReq+0x29a>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d07b      	beq.n	80089c2 <USBD_StdEPReq+0x14e>
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d03b      	beq.n	8008946 <USBD_StdEPReq+0xd2>
 80088ce:	e11e      	b.n	8008b0e <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d002      	beq.n	80088e0 <USBD_StdEPReq+0x6c>
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d016      	beq.n	800890c <USBD_StdEPReq+0x98>
 80088de:	e02c      	b.n	800893a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00d      	beq.n	8008902 <USBD_StdEPReq+0x8e>
 80088e6:	7bbb      	ldrb	r3, [r7, #14]
 80088e8:	2b80      	cmp	r3, #128	; 0x80
 80088ea:	d00a      	beq.n	8008902 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f00b f9a3 	bl	8013c3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f00b f99f 	bl	8013c3c <USBD_LL_StallEP>
 80088fe:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008900:	e020      	b.n	8008944 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fc66 	bl	80091d6 <USBD_CtlError>
        break;
 800890a:	e01b      	b.n	8008944 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	885b      	ldrh	r3, [r3, #2]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10e      	bne.n	8008932 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00b      	beq.n	8008932 <USBD_StdEPReq+0xbe>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b80      	cmp	r3, #128	; 0x80
 800891e:	d008      	beq.n	8008932 <USBD_StdEPReq+0xbe>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f00b f985 	bl	8013c3c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fd1a 	bl	800936c <USBD_CtlSendStatus>

        break;
 8008938:	e004      	b.n	8008944 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc4a 	bl	80091d6 <USBD_CtlError>
        break;
 8008942:	bf00      	nop
      }
      break;
 8008944:	e0e8      	b.n	8008b18 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894c:	2b02      	cmp	r3, #2
 800894e:	d002      	beq.n	8008956 <USBD_StdEPReq+0xe2>
 8008950:	2b03      	cmp	r3, #3
 8008952:	d016      	beq.n	8008982 <USBD_StdEPReq+0x10e>
 8008954:	e02e      	b.n	80089b4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00d      	beq.n	8008978 <USBD_StdEPReq+0x104>
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b80      	cmp	r3, #128	; 0x80
 8008960:	d00a      	beq.n	8008978 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f00b f968 	bl	8013c3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800896c:	2180      	movs	r1, #128	; 0x80
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f00b f964 	bl	8013c3c <USBD_LL_StallEP>
 8008974:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008976:	e023      	b.n	80089c0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fc2b 	bl	80091d6 <USBD_CtlError>
        break;
 8008980:	e01e      	b.n	80089c0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	885b      	ldrh	r3, [r3, #2]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d119      	bne.n	80089be <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f00b f96e 	bl	8013c7a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fce4 	bl	800936c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	4798      	blx	r3
        }
        break;
 80089b2:	e004      	b.n	80089be <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fc0d 	bl	80091d6 <USBD_CtlError>
        break;
 80089bc:	e000      	b.n	80089c0 <USBD_StdEPReq+0x14c>
        break;
 80089be:	bf00      	nop
      }
      break;
 80089c0:	e0aa      	b.n	8008b18 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d002      	beq.n	80089d2 <USBD_StdEPReq+0x15e>
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d032      	beq.n	8008a36 <USBD_StdEPReq+0x1c2>
 80089d0:	e097      	b.n	8008b02 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <USBD_StdEPReq+0x174>
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b80      	cmp	r3, #128	; 0x80
 80089dc:	d004      	beq.n	80089e8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fbf8 	bl	80091d6 <USBD_CtlError>
          break;
 80089e6:	e091      	b.n	8008b0c <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da0b      	bge.n	8008a08 <USBD_StdEPReq+0x194>
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089f6:	4613      	mov	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	3310      	adds	r3, #16
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	e00b      	b.n	8008a20 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	3304      	adds	r3, #4
 8008a20:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc42 	bl	80092b8 <USBD_CtlSendData>
        break;
 8008a34:	e06a      	b.n	8008b0c <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008a36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da11      	bge.n	8008a62 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	3324      	adds	r3, #36	; 0x24
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d117      	bne.n	8008a88 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fbbb 	bl	80091d6 <USBD_CtlError>
            break;
 8008a60:	e054      	b.n	8008b0c <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	f003 020f 	and.w	r2, r3, #15
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	440b      	add	r3, r1
 8008a74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d104      	bne.n	8008a88 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fba8 	bl	80091d6 <USBD_CtlError>
            break;
 8008a86:	e041      	b.n	8008b0c <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	da0b      	bge.n	8008aa8 <USBD_StdEPReq+0x234>
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	3310      	adds	r3, #16
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	e00b      	b.n	8008ac0 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	3304      	adds	r3, #4
 8008ac0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <USBD_StdEPReq+0x25a>
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	2b80      	cmp	r3, #128	; 0x80
 8008acc:	d103      	bne.n	8008ad6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e00e      	b.n	8008af4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f00b f8ec 	bl	8013cb8 <USBD_LL_IsStallEP>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e002      	b.n	8008af4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2202      	movs	r2, #2
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fbdc 	bl	80092b8 <USBD_CtlSendData>
          break;
 8008b00:	e004      	b.n	8008b0c <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb66 	bl	80091d6 <USBD_CtlError>
        break;
 8008b0a:	bf00      	nop
      }
      break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb60 	bl	80091d6 <USBD_CtlError>
      break;
 8008b16:	bf00      	nop
    }
    break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb5a 	bl	80091d6 <USBD_CtlError>
    break;
 8008b22:	bf00      	nop
  }

  return ret;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	2b0e      	cmp	r3, #14
 8008b52:	f200 8152 	bhi.w	8008dfa <USBD_GetDescriptor+0x2ca>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <USBD_GetDescriptor+0x2c>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008bcd 	.word	0x08008bcd
 8008b60:	08008be5 	.word	0x08008be5
 8008b64:	08008c25 	.word	0x08008c25
 8008b68:	08008dfb 	.word	0x08008dfb
 8008b6c:	08008dfb 	.word	0x08008dfb
 8008b70:	08008d9b 	.word	0x08008d9b
 8008b74:	08008dc7 	.word	0x08008dc7
 8008b78:	08008dfb 	.word	0x08008dfb
 8008b7c:	08008dfb 	.word	0x08008dfb
 8008b80:	08008dfb 	.word	0x08008dfb
 8008b84:	08008dfb 	.word	0x08008dfb
 8008b88:	08008dfb 	.word	0x08008dfb
 8008b8c:	08008dfb 	.word	0x08008dfb
 8008b90:	08008dfb 	.word	0x08008dfb
 8008b94:	08008b99 	.word	0x08008b99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	7c12      	ldrb	r2, [r2, #16]
 8008bb0:	f107 0108 	add.w	r1, r7, #8
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008bba:	e126      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fb09 	bl	80091d6 <USBD_CtlError>
      err++;
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	72fb      	strb	r3, [r7, #11]
    break;
 8008bca:	e11e      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7c12      	ldrb	r2, [r2, #16]
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	4610      	mov	r0, r2
 8008bde:	4798      	blx	r3
 8008be0:	60f8      	str	r0, [r7, #12]
    break;
 8008be2:	e112      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	7c1b      	ldrb	r3, [r3, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10d      	bne.n	8008c08 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	f107 0208 	add.w	r2, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2202      	movs	r2, #2
 8008c04:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008c06:	e100      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	f107 0208 	add.w	r2, r7, #8
 8008c14:	4610      	mov	r0, r2
 8008c16:	4798      	blx	r3
 8008c18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	2202      	movs	r2, #2
 8008c20:	701a      	strb	r2, [r3, #0]
    break;
 8008c22:	e0f2      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	f200 80ac 	bhi.w	8008d88 <USBD_GetDescriptor+0x258>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <USBD_GetDescriptor+0x108>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c51 	.word	0x08008c51
 8008c3c:	08008c85 	.word	0x08008c85
 8008c40:	08008cb9 	.word	0x08008cb9
 8008c44:	08008ced 	.word	0x08008ced
 8008c48:	08008d21 	.word	0x08008d21
 8008c4c:	08008d55 	.word	0x08008d55
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	7c12      	ldrb	r2, [r2, #16]
 8008c68:	f107 0108 	add.w	r1, r7, #8
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
 8008c70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c72:	e091      	b.n	8008d98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 faad 	bl	80091d6 <USBD_CtlError>
        err++;
 8008c7c:	7afb      	ldrb	r3, [r7, #11]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	72fb      	strb	r3, [r7, #11]
      break;
 8008c82:	e089      	b.n	8008d98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	7c12      	ldrb	r2, [r2, #16]
 8008c9c:	f107 0108 	add.w	r1, r7, #8
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
 8008ca4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ca6:	e077      	b.n	8008d98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fa93 	bl	80091d6 <USBD_CtlError>
        err++;
 8008cb0:	7afb      	ldrb	r3, [r7, #11]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	72fb      	strb	r3, [r7, #11]
      break;
 8008cb6:	e06f      	b.n	8008d98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cda:	e05d      	b.n	8008d98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fa79 	bl	80091d6 <USBD_CtlError>
        err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cea:	e055      	b.n	8008d98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00b      	beq.n	8008d10 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d0e:	e043      	b.n	8008d98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa5f 	bl	80091d6 <USBD_CtlError>
        err++;
 8008d18:	7afb      	ldrb	r3, [r7, #11]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008d1e:	e03b      	b.n	8008d98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
 8008d38:	f107 0108 	add.w	r1, r7, #8
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d42:	e029      	b.n	8008d98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d44:	6839      	ldr	r1, [r7, #0]
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa45 	bl	80091d6 <USBD_CtlError>
        err++;
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	72fb      	strb	r3, [r7, #11]
      break;
 8008d52:	e021      	b.n	8008d98 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7c12      	ldrb	r2, [r2, #16]
 8008d6c:	f107 0108 	add.w	r1, r7, #8
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
 8008d74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d76:	e00f      	b.n	8008d98 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa2b 	bl	80091d6 <USBD_CtlError>
        err++;
 8008d80:	7afb      	ldrb	r3, [r7, #11]
 8008d82:	3301      	adds	r3, #1
 8008d84:	72fb      	strb	r3, [r7, #11]
      break;
 8008d86:	e007      	b.n	8008d98 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fa23 	bl	80091d6 <USBD_CtlError>
      err++;
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	3301      	adds	r3, #1
 8008d94:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d96:	bf00      	nop
    }
    break;
 8008d98:	e037      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	7c1b      	ldrb	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d109      	bne.n	8008db6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008daa:	f107 0208 	add.w	r2, r7, #8
 8008dae:	4610      	mov	r0, r2
 8008db0:	4798      	blx	r3
 8008db2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008db4:	e029      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fa0c 	bl	80091d6 <USBD_CtlError>
      err++;
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	72fb      	strb	r3, [r7, #11]
    break;
 8008dc4:	e021      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7c1b      	ldrb	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10d      	bne.n	8008dea <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f107 0208 	add.w	r2, r7, #8
 8008dda:	4610      	mov	r0, r2
 8008ddc:	4798      	blx	r3
 8008dde:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	2207      	movs	r2, #7
 8008de6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008de8:	e00f      	b.n	8008e0a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9f2 	bl	80091d6 <USBD_CtlError>
      err++;
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	3301      	adds	r3, #1
 8008df6:	72fb      	strb	r3, [r7, #11]
    break;
 8008df8:	e007      	b.n	8008e0a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f9ea 	bl	80091d6 <USBD_CtlError>
    err++;
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	3301      	adds	r3, #1
 8008e06:	72fb      	strb	r3, [r7, #11]
    break;
 8008e08:	bf00      	nop
  }

  if (err != 0U)
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11e      	bne.n	8008e4e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	88db      	ldrh	r3, [r3, #6]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d016      	beq.n	8008e46 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008e18:	893b      	ldrh	r3, [r7, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88da      	ldrh	r2, [r3, #6]
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	bf28      	it	cs
 8008e28:	4613      	movcs	r3, r2
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	461a      	mov	r2, r3
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fa3f 	bl	80092b8 <USBD_CtlSendData>
 8008e3a:	e009      	b.n	8008e50 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f9c9 	bl	80091d6 <USBD_CtlError>
 8008e44:	e004      	b.n	8008e50 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa90 	bl	800936c <USBD_CtlSendStatus>
 8008e4c:	e000      	b.n	8008e50 <USBD_GetDescriptor+0x320>
    return;
 8008e4e:	bf00      	nop
    }
  }
}
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop

08008e58 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	889b      	ldrh	r3, [r3, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d130      	bne.n	8008ecc <USBD_SetAddress+0x74>
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	88db      	ldrh	r3, [r3, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d12c      	bne.n	8008ecc <USBD_SetAddress+0x74>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	2b7f      	cmp	r3, #127	; 0x7f
 8008e78:	d828      	bhi.n	8008ecc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d104      	bne.n	8008e9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f99f 	bl	80091d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e98:	e01d      	b.n	8008ed6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7bfa      	ldrb	r2, [r7, #15]
 8008e9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f00a ff32 	bl	8013d10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa5d 	bl	800936c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec0:	e009      	b.n	8008ed6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eca:	e004      	b.n	8008ed6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f981 	bl	80091d6 <USBD_CtlError>
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	885b      	ldrh	r3, [r3, #2]
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	4b4b      	ldr	r3, [pc, #300]	; (8009024 <USBD_SetConfig+0x144>)
 8008ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ef8:	4b4a      	ldr	r3, [pc, #296]	; (8009024 <USBD_SetConfig+0x144>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d905      	bls.n	8008f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f967 	bl	80091d6 <USBD_CtlError>
    return USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e087      	b.n	800901c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d002      	beq.n	8008f1c <USBD_SetConfig+0x3c>
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d025      	beq.n	8008f66 <USBD_SetConfig+0x86>
 8008f1a:	e071      	b.n	8009000 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008f1c:	4b41      	ldr	r3, [pc, #260]	; (8009024 <USBD_SetConfig+0x144>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01c      	beq.n	8008f5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008f24:	4b3f      	ldr	r3, [pc, #252]	; (8009024 <USBD_SetConfig+0x144>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f2e:	4b3d      	ldr	r3, [pc, #244]	; (8009024 <USBD_SetConfig+0x144>)
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff f96f 	bl	8008218 <USBD_SetClassConfig>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f945 	bl	80091d6 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f4c:	e065      	b.n	800901a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa0c 	bl	800936c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2203      	movs	r2, #3
 8008f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f5c:	e05d      	b.n	800901a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa04 	bl	800936c <USBD_CtlSendStatus>
    break;
 8008f64:	e059      	b.n	800901a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f66:	4b2f      	ldr	r3, [pc, #188]	; (8009024 <USBD_SetConfig+0x144>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d112      	bne.n	8008f94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2202      	movs	r2, #2
 8008f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f76:	4b2b      	ldr	r3, [pc, #172]	; (8009024 <USBD_SetConfig+0x144>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f80:	4b28      	ldr	r3, [pc, #160]	; (8009024 <USBD_SetConfig+0x144>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff f962 	bl	8008250 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f9ed 	bl	800936c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f92:	e042      	b.n	800901a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f94:	4b23      	ldr	r3, [pc, #140]	; (8009024 <USBD_SetConfig+0x144>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d02a      	beq.n	8008ff8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	4619      	mov	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff f950 	bl	8008250 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008fb0:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <USBD_SetConfig+0x144>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fba:	4b1a      	ldr	r3, [pc, #104]	; (8009024 <USBD_SetConfig+0x144>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff f929 	bl	8008218 <USBD_SetClassConfig>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00f      	beq.n	8008ff0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f8ff 	bl	80091d6 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff f935 	bl	8008250 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008fee:	e014      	b.n	800901a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f9bb 	bl	800936c <USBD_CtlSendStatus>
    break;
 8008ff6:	e010      	b.n	800901a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9b7 	bl	800936c <USBD_CtlSendStatus>
    break;
 8008ffe:	e00c      	b.n	800901a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8e7 	bl	80091d6 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009008:	4b06      	ldr	r3, [pc, #24]	; (8009024 <USBD_SetConfig+0x144>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff f91e 	bl	8008250 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009014:	2303      	movs	r3, #3
 8009016:	73fb      	strb	r3, [r7, #15]
    break;
 8009018:	bf00      	nop
  }

  return ret;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000376 	.word	0x20000376

08009028 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	88db      	ldrh	r3, [r3, #6]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d004      	beq.n	8009044 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f8ca 	bl	80091d6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009042:	e022      	b.n	800908a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904a:	2b02      	cmp	r3, #2
 800904c:	dc02      	bgt.n	8009054 <USBD_GetConfig+0x2c>
 800904e:	2b00      	cmp	r3, #0
 8009050:	dc03      	bgt.n	800905a <USBD_GetConfig+0x32>
 8009052:	e015      	b.n	8009080 <USBD_GetConfig+0x58>
 8009054:	2b03      	cmp	r3, #3
 8009056:	d00b      	beq.n	8009070 <USBD_GetConfig+0x48>
 8009058:	e012      	b.n	8009080 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3308      	adds	r3, #8
 8009064:	2201      	movs	r2, #1
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f925 	bl	80092b8 <USBD_CtlSendData>
      break;
 800906e:	e00c      	b.n	800908a <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3304      	adds	r3, #4
 8009074:	2201      	movs	r2, #1
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f91d 	bl	80092b8 <USBD_CtlSendData>
      break;
 800907e:	e004      	b.n	800908a <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f8a7 	bl	80091d6 <USBD_CtlError>
      break;
 8009088:	bf00      	nop
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d81e      	bhi.n	80090e6 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	88db      	ldrh	r3, [r3, #6]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d004      	beq.n	80090ba <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f88f 	bl	80091d6 <USBD_CtlError>
      break;
 80090b8:	e01a      	b.n	80090f0 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f043 0202 	orr.w	r2, r3, #2
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	330c      	adds	r3, #12
 80090da:	2202      	movs	r2, #2
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f8ea 	bl	80092b8 <USBD_CtlSendData>
    break;
 80090e4:	e004      	b.n	80090f0 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f874 	bl	80091d6 <USBD_CtlError>
    break;
 80090ee:	bf00      	nop
  }
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d106      	bne.n	8009118 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f92a 	bl	800936c <USBD_CtlSendStatus>
  }
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009130:	3b01      	subs	r3, #1
 8009132:	2b02      	cmp	r3, #2
 8009134:	d80b      	bhi.n	800914e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	885b      	ldrh	r3, [r3, #2]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d10c      	bne.n	8009158 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f910 	bl	800936c <USBD_CtlSendStatus>
      }
      break;
 800914c:	e004      	b.n	8009158 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f840 	bl	80091d6 <USBD_CtlError>
      break;
 8009156:	e000      	b.n	800915a <USBD_ClrFeature+0x3a>
      break;
 8009158:	bf00      	nop
  }
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	781a      	ldrb	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	781a      	ldrb	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff fa9c 	bl	80086ca <SWAPBYTE>
 8009192:	4603      	mov	r3, r0
 8009194:	461a      	mov	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3301      	adds	r3, #1
 80091a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f7ff fa8f 	bl	80086ca <SWAPBYTE>
 80091ac:	4603      	mov	r3, r0
 80091ae:	461a      	mov	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3301      	adds	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fa82 	bl	80086ca <SWAPBYTE>
 80091c6:	4603      	mov	r3, r0
 80091c8:	461a      	mov	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	80da      	strh	r2, [r3, #6]
}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b082      	sub	sp, #8
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091e0:	2180      	movs	r1, #128	; 0x80
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f00a fd2a 	bl	8013c3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f00a fd26 	bl	8013c3c <USBD_LL_StallEP>
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d036      	beq.n	800927c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009212:	6938      	ldr	r0, [r7, #16]
 8009214:	f000 f836 	bl	8009284 <USBD_GetLen>
 8009218:	4603      	mov	r3, r0
 800921a:	3301      	adds	r3, #1
 800921c:	b29b      	uxth	r3, r3
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	4413      	add	r3, r2
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	7812      	ldrb	r2, [r2, #0]
 8009230:	701a      	strb	r2, [r3, #0]
  idx++;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	3301      	adds	r3, #1
 8009236:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4413      	add	r3, r2
 800923e:	2203      	movs	r2, #3
 8009240:	701a      	strb	r2, [r3, #0]
  idx++;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	3301      	adds	r3, #1
 8009246:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009248:	e013      	b.n	8009272 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	4413      	add	r3, r2
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	7812      	ldrb	r2, [r2, #0]
 8009254:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	3301      	adds	r3, #1
 800925a:	613b      	str	r3, [r7, #16]
    idx++;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
 800925e:	3301      	adds	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	4413      	add	r3, r2
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
    idx++;
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	3301      	adds	r3, #1
 8009270:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e7      	bne.n	800924a <USBD_GetString+0x52>
 800927a:	e000      	b.n	800927e <USBD_GetString+0x86>
    return;
 800927c:	bf00      	nop
  }
}
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009294:	e005      	b.n	80092a2 <USBD_GetLen+0x1e>
  {
    len++;
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	3301      	adds	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3301      	adds	r3, #1
 80092a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f5      	bne.n	8009296 <USBD_GetLen+0x12>
  }

  return len;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2202      	movs	r2, #2
 80092c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f00a fd35 	bl	8013d4e <USBD_LL_Transmit>

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	2100      	movs	r1, #0
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f00a fd24 	bl	8013d4e <USBD_LL_Transmit>

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2203      	movs	r2, #3
 8009320:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	2100      	movs	r1, #0
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f00a fd28 	bl	8013d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	2100      	movs	r1, #0
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f00a fd17 	bl	8013d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2204      	movs	r2, #4
 8009378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800937c:	2300      	movs	r3, #0
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f00a fce3 	bl	8013d4e <USBD_LL_Transmit>

  return USBD_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2205      	movs	r2, #5
 800939e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093a2:	2300      	movs	r3, #0
 80093a4:	2200      	movs	r2, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f00a fcf1 	bl	8013d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	4603      	mov	r3, r0
 80093c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	021b      	lsls	r3, r3, #8
 80093c6:	b21a      	sxth	r2, r3
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	0a1b      	lsrs	r3, r3, #8
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	b21b      	sxth	r3, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	b29b      	uxth	r3, r3
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	061a      	lsls	r2, r3, #24
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	0e1b      	lsrs	r3, r3, #24
 8009406:	4313      	orrs	r3, r2
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800941e:	f000 f8d5 	bl	80095cc <mem_init>
  memp_init();
 8009422:	f000 fbdb 	bl	8009bdc <memp_init>
  pbuf_init();
  netif_init();
 8009426:	f000 fc93 	bl	8009d50 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800942a:	f006 ffb9 	bl	80103a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800942e:	f001 fd15 	bl	800ae5c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009432:	f006 ff2b 	bl	801028c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009436:	bf00      	nop
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <ptr_to_mem+0x20>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	88fb      	ldrh	r3, [r7, #6]
 8009450:	4413      	add	r3, r2
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20000378 	.word	0x20000378

08009464 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <mem_to_ptr+0x20>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	b29b      	uxth	r3, r3
}
 8009476:	4618      	mov	r0, r3
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20000378 	.word	0x20000378

08009488 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009488:	b590      	push	{r4, r7, lr}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009490:	4b45      	ldr	r3, [pc, #276]	; (80095a8 <plug_holes+0x120>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d206      	bcs.n	80094a8 <plug_holes+0x20>
 800949a:	4b44      	ldr	r3, [pc, #272]	; (80095ac <plug_holes+0x124>)
 800949c:	f240 12df 	movw	r2, #479	; 0x1df
 80094a0:	4943      	ldr	r1, [pc, #268]	; (80095b0 <plug_holes+0x128>)
 80094a2:	4844      	ldr	r0, [pc, #272]	; (80095b4 <plug_holes+0x12c>)
 80094a4:	f00a fe2a 	bl	80140fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80094a8:	4b43      	ldr	r3, [pc, #268]	; (80095b8 <plug_holes+0x130>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d306      	bcc.n	80094c0 <plug_holes+0x38>
 80094b2:	4b3e      	ldr	r3, [pc, #248]	; (80095ac <plug_holes+0x124>)
 80094b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80094b8:	4940      	ldr	r1, [pc, #256]	; (80095bc <plug_holes+0x134>)
 80094ba:	483e      	ldr	r0, [pc, #248]	; (80095b4 <plug_holes+0x12c>)
 80094bc:	f00a fe1e 	bl	80140fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	791b      	ldrb	r3, [r3, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d006      	beq.n	80094d6 <plug_holes+0x4e>
 80094c8:	4b38      	ldr	r3, [pc, #224]	; (80095ac <plug_holes+0x124>)
 80094ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 80094ce:	493c      	ldr	r1, [pc, #240]	; (80095c0 <plug_holes+0x138>)
 80094d0:	4838      	ldr	r0, [pc, #224]	; (80095b4 <plug_holes+0x12c>)
 80094d2:	f00a fe13 	bl	80140fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094de:	d906      	bls.n	80094ee <plug_holes+0x66>
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <plug_holes+0x124>)
 80094e2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80094e6:	4937      	ldr	r1, [pc, #220]	; (80095c4 <plug_holes+0x13c>)
 80094e8:	4832      	ldr	r0, [pc, #200]	; (80095b4 <plug_holes+0x12c>)
 80094ea:	f00a fe07 	bl	80140fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff ffa4 	bl	8009440 <ptr_to_mem>
 80094f8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d024      	beq.n	800954c <plug_holes+0xc4>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	791b      	ldrb	r3, [r3, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d120      	bne.n	800954c <plug_holes+0xc4>
 800950a:	4b2b      	ldr	r3, [pc, #172]	; (80095b8 <plug_holes+0x130>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	429a      	cmp	r2, r3
 8009512:	d01b      	beq.n	800954c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009514:	4b2c      	ldr	r3, [pc, #176]	; (80095c8 <plug_holes+0x140>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	429a      	cmp	r2, r3
 800951c:	d102      	bne.n	8009524 <plug_holes+0x9c>
      lfree = mem;
 800951e:	4a2a      	ldr	r2, [pc, #168]	; (80095c8 <plug_holes+0x140>)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	881a      	ldrh	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009534:	d00a      	beq.n	800954c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff ff80 	bl	8009440 <ptr_to_mem>
 8009540:	4604      	mov	r4, r0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff ff8e 	bl	8009464 <mem_to_ptr>
 8009548:	4603      	mov	r3, r0
 800954a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	885b      	ldrh	r3, [r3, #2]
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff ff75 	bl	8009440 <ptr_to_mem>
 8009556:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	429a      	cmp	r2, r3
 800955e:	d01f      	beq.n	80095a0 <plug_holes+0x118>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	791b      	ldrb	r3, [r3, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d11b      	bne.n	80095a0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009568:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <plug_holes+0x140>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d102      	bne.n	8009578 <plug_holes+0xf0>
      lfree = pmem;
 8009572:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <plug_holes+0x140>)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	881a      	ldrh	r2, [r3, #0]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009588:	d00a      	beq.n	80095a0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff ff56 	bl	8009440 <ptr_to_mem>
 8009594:	4604      	mov	r4, r0
 8009596:	68b8      	ldr	r0, [r7, #8]
 8009598:	f7ff ff64 	bl	8009464 <mem_to_ptr>
 800959c:	4603      	mov	r3, r0
 800959e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80095a0:	bf00      	nop
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd90      	pop	{r4, r7, pc}
 80095a8:	20000378 	.word	0x20000378
 80095ac:	08015060 	.word	0x08015060
 80095b0:	08015090 	.word	0x08015090
 80095b4:	080150a8 	.word	0x080150a8
 80095b8:	2000037c 	.word	0x2000037c
 80095bc:	080150d0 	.word	0x080150d0
 80095c0:	080150ec 	.word	0x080150ec
 80095c4:	08015108 	.word	0x08015108
 80095c8:	20000380 	.word	0x20000380

080095cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80095d2:	4b18      	ldr	r3, [pc, #96]	; (8009634 <mem_init+0x68>)
 80095d4:	3303      	adds	r3, #3
 80095d6:	f023 0303 	bic.w	r3, r3, #3
 80095da:	461a      	mov	r2, r3
 80095dc:	4b16      	ldr	r3, [pc, #88]	; (8009638 <mem_init+0x6c>)
 80095de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80095e0:	4b15      	ldr	r3, [pc, #84]	; (8009638 <mem_init+0x6c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80095fa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80095fe:	f7ff ff1f 	bl	8009440 <ptr_to_mem>
 8009602:	4603      	mov	r3, r0
 8009604:	4a0d      	ldr	r2, [pc, #52]	; (800963c <mem_init+0x70>)
 8009606:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <mem_init+0x70>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2201      	movs	r2, #1
 800960e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <mem_init+0x70>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009618:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800961a:	4b08      	ldr	r3, [pc, #32]	; (800963c <mem_init+0x70>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009622:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <mem_init+0x6c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a05      	ldr	r2, [pc, #20]	; (8009640 <mem_init+0x74>)
 800962a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	200037b4 	.word	0x200037b4
 8009638:	20000378 	.word	0x20000378
 800963c:	2000037c 	.word	0x2000037c
 8009640:	20000380 	.word	0x20000380

08009644 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff09 	bl	8009464 <mem_to_ptr>
 8009652:	4603      	mov	r3, r0
 8009654:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fef0 	bl	8009440 <ptr_to_mem>
 8009660:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	885b      	ldrh	r3, [r3, #2]
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff feea 	bl	8009440 <ptr_to_mem>
 800966c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009676:	d818      	bhi.n	80096aa <mem_link_valid+0x66>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	885b      	ldrh	r3, [r3, #2]
 800967c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009680:	d813      	bhi.n	80096aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009686:	8afa      	ldrh	r2, [r7, #22]
 8009688:	429a      	cmp	r2, r3
 800968a:	d004      	beq.n	8009696 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	8afa      	ldrh	r2, [r7, #22]
 8009692:	429a      	cmp	r2, r3
 8009694:	d109      	bne.n	80096aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009696:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <mem_link_valid+0x74>)
 8009698:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	429a      	cmp	r2, r3
 800969e:	d006      	beq.n	80096ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	8afa      	ldrh	r2, [r7, #22]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d001      	beq.n	80096ae <mem_link_valid+0x6a>
    return 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <mem_link_valid+0x6c>
  }
  return 1;
 80096ae:	2301      	movs	r3, #1
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	2000037c 	.word	0x2000037c

080096bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d04c      	beq.n	8009764 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80096d4:	4b25      	ldr	r3, [pc, #148]	; (800976c <mem_free+0xb0>)
 80096d6:	f240 2273 	movw	r2, #627	; 0x273
 80096da:	4925      	ldr	r1, [pc, #148]	; (8009770 <mem_free+0xb4>)
 80096dc:	4825      	ldr	r0, [pc, #148]	; (8009774 <mem_free+0xb8>)
 80096de:	f00a fd0d 	bl	80140fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80096e2:	e040      	b.n	8009766 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	3b08      	subs	r3, #8
 80096e8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80096ea:	4b23      	ldr	r3, [pc, #140]	; (8009778 <mem_free+0xbc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d306      	bcc.n	8009702 <mem_free+0x46>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f103 020c 	add.w	r2, r3, #12
 80096fa:	4b20      	ldr	r3, [pc, #128]	; (800977c <mem_free+0xc0>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d907      	bls.n	8009712 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009702:	4b1a      	ldr	r3, [pc, #104]	; (800976c <mem_free+0xb0>)
 8009704:	f240 227f 	movw	r2, #639	; 0x27f
 8009708:	491d      	ldr	r1, [pc, #116]	; (8009780 <mem_free+0xc4>)
 800970a:	481a      	ldr	r0, [pc, #104]	; (8009774 <mem_free+0xb8>)
 800970c:	f00a fcf6 	bl	80140fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009710:	e029      	b.n	8009766 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d107      	bne.n	800972a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <mem_free+0xb0>)
 800971c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009720:	4918      	ldr	r1, [pc, #96]	; (8009784 <mem_free+0xc8>)
 8009722:	4814      	ldr	r0, [pc, #80]	; (8009774 <mem_free+0xb8>)
 8009724:	f00a fcea 	bl	80140fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009728:	e01d      	b.n	8009766 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f7ff ff8a 	bl	8009644 <mem_link_valid>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d107      	bne.n	8009746 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009736:	4b0d      	ldr	r3, [pc, #52]	; (800976c <mem_free+0xb0>)
 8009738:	f240 2295 	movw	r2, #661	; 0x295
 800973c:	4912      	ldr	r1, [pc, #72]	; (8009788 <mem_free+0xcc>)
 800973e:	480d      	ldr	r0, [pc, #52]	; (8009774 <mem_free+0xb8>)
 8009740:	f00a fcdc 	bl	80140fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009744:	e00f      	b.n	8009766 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800974c:	4b0f      	ldr	r3, [pc, #60]	; (800978c <mem_free+0xd0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	429a      	cmp	r2, r3
 8009754:	d202      	bcs.n	800975c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009756:	4a0d      	ldr	r2, [pc, #52]	; (800978c <mem_free+0xd0>)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff fe93 	bl	8009488 <plug_holes>
 8009762:	e000      	b.n	8009766 <mem_free+0xaa>
    return;
 8009764:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	08015060 	.word	0x08015060
 8009770:	08015134 	.word	0x08015134
 8009774:	080150a8 	.word	0x080150a8
 8009778:	20000378 	.word	0x20000378
 800977c:	2000037c 	.word	0x2000037c
 8009780:	08015158 	.word	0x08015158
 8009784:	08015174 	.word	0x08015174
 8009788:	0801519c 	.word	0x0801519c
 800978c:	20000380 	.word	0x20000380

08009790 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800979c:	887b      	ldrh	r3, [r7, #2]
 800979e:	3303      	adds	r3, #3
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f023 0303 	bic.w	r3, r3, #3
 80097a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80097a8:	8bfb      	ldrh	r3, [r7, #30]
 80097aa:	2b0b      	cmp	r3, #11
 80097ac:	d801      	bhi.n	80097b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80097ae:	230c      	movs	r3, #12
 80097b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80097b2:	8bfb      	ldrh	r3, [r7, #30]
 80097b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097b8:	d803      	bhi.n	80097c2 <mem_trim+0x32>
 80097ba:	8bfa      	ldrh	r2, [r7, #30]
 80097bc:	887b      	ldrh	r3, [r7, #2]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d201      	bcs.n	80097c6 <mem_trim+0x36>
    return NULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	e0cc      	b.n	8009960 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80097c6:	4b68      	ldr	r3, [pc, #416]	; (8009968 <mem_trim+0x1d8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d304      	bcc.n	80097da <mem_trim+0x4a>
 80097d0:	4b66      	ldr	r3, [pc, #408]	; (800996c <mem_trim+0x1dc>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d306      	bcc.n	80097e8 <mem_trim+0x58>
 80097da:	4b65      	ldr	r3, [pc, #404]	; (8009970 <mem_trim+0x1e0>)
 80097dc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80097e0:	4964      	ldr	r1, [pc, #400]	; (8009974 <mem_trim+0x1e4>)
 80097e2:	4865      	ldr	r0, [pc, #404]	; (8009978 <mem_trim+0x1e8>)
 80097e4:	f00a fc8a 	bl	80140fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80097e8:	4b5f      	ldr	r3, [pc, #380]	; (8009968 <mem_trim+0x1d8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d304      	bcc.n	80097fc <mem_trim+0x6c>
 80097f2:	4b5e      	ldr	r3, [pc, #376]	; (800996c <mem_trim+0x1dc>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d301      	bcc.n	8009800 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	e0af      	b.n	8009960 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3b08      	subs	r3, #8
 8009804:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009806:	69b8      	ldr	r0, [r7, #24]
 8009808:	f7ff fe2c 	bl	8009464 <mem_to_ptr>
 800980c:	4603      	mov	r3, r0
 800980e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	881a      	ldrh	r2, [r3, #0]
 8009814:	8afb      	ldrh	r3, [r7, #22]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b08      	subs	r3, #8
 800981c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800981e:	8bfa      	ldrh	r2, [r7, #30]
 8009820:	8abb      	ldrh	r3, [r7, #20]
 8009822:	429a      	cmp	r2, r3
 8009824:	d906      	bls.n	8009834 <mem_trim+0xa4>
 8009826:	4b52      	ldr	r3, [pc, #328]	; (8009970 <mem_trim+0x1e0>)
 8009828:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800982c:	4953      	ldr	r1, [pc, #332]	; (800997c <mem_trim+0x1ec>)
 800982e:	4852      	ldr	r0, [pc, #328]	; (8009978 <mem_trim+0x1e8>)
 8009830:	f00a fc64 	bl	80140fc <iprintf>
  if (newsize > size) {
 8009834:	8bfa      	ldrh	r2, [r7, #30]
 8009836:	8abb      	ldrh	r3, [r7, #20]
 8009838:	429a      	cmp	r2, r3
 800983a:	d901      	bls.n	8009840 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800983c:	2300      	movs	r3, #0
 800983e:	e08f      	b.n	8009960 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009840:	8bfa      	ldrh	r2, [r7, #30]
 8009842:	8abb      	ldrh	r3, [r7, #20]
 8009844:	429a      	cmp	r2, r3
 8009846:	d101      	bne.n	800984c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	e089      	b.n	8009960 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff fdf5 	bl	8009440 <ptr_to_mem>
 8009856:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	791b      	ldrb	r3, [r3, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d13f      	bne.n	80098e0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009868:	d106      	bne.n	8009878 <mem_trim+0xe8>
 800986a:	4b41      	ldr	r3, [pc, #260]	; (8009970 <mem_trim+0x1e0>)
 800986c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009870:	4943      	ldr	r1, [pc, #268]	; (8009980 <mem_trim+0x1f0>)
 8009872:	4841      	ldr	r0, [pc, #260]	; (8009978 <mem_trim+0x1e8>)
 8009874:	f00a fc42 	bl	80140fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800987e:	8afa      	ldrh	r2, [r7, #22]
 8009880:	8bfb      	ldrh	r3, [r7, #30]
 8009882:	4413      	add	r3, r2
 8009884:	b29b      	uxth	r3, r3
 8009886:	3308      	adds	r3, #8
 8009888:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800988a:	4b3e      	ldr	r3, [pc, #248]	; (8009984 <mem_trim+0x1f4>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	429a      	cmp	r2, r3
 8009892:	d106      	bne.n	80098a2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8009894:	89fb      	ldrh	r3, [r7, #14]
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fdd2 	bl	8009440 <ptr_to_mem>
 800989c:	4603      	mov	r3, r0
 800989e:	4a39      	ldr	r2, [pc, #228]	; (8009984 <mem_trim+0x1f4>)
 80098a0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80098a2:	89fb      	ldrh	r3, [r7, #14]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fdcb 	bl	8009440 <ptr_to_mem>
 80098aa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2200      	movs	r2, #0
 80098b0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	89ba      	ldrh	r2, [r7, #12]
 80098b6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	8afa      	ldrh	r2, [r7, #22]
 80098bc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	89fa      	ldrh	r2, [r7, #14]
 80098c2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098cc:	d047      	beq.n	800995e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fdb4 	bl	8009440 <ptr_to_mem>
 80098d8:	4602      	mov	r2, r0
 80098da:	89fb      	ldrh	r3, [r7, #14]
 80098dc:	8053      	strh	r3, [r2, #2]
 80098de:	e03e      	b.n	800995e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80098e0:	8bfb      	ldrh	r3, [r7, #30]
 80098e2:	f103 0214 	add.w	r2, r3, #20
 80098e6:	8abb      	ldrh	r3, [r7, #20]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d838      	bhi.n	800995e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098ec:	8afa      	ldrh	r2, [r7, #22]
 80098ee:	8bfb      	ldrh	r3, [r7, #30]
 80098f0:	4413      	add	r3, r2
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3308      	adds	r3, #8
 80098f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009900:	d106      	bne.n	8009910 <mem_trim+0x180>
 8009902:	4b1b      	ldr	r3, [pc, #108]	; (8009970 <mem_trim+0x1e0>)
 8009904:	f240 3216 	movw	r2, #790	; 0x316
 8009908:	491d      	ldr	r1, [pc, #116]	; (8009980 <mem_trim+0x1f0>)
 800990a:	481b      	ldr	r0, [pc, #108]	; (8009978 <mem_trim+0x1e8>)
 800990c:	f00a fbf6 	bl	80140fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009910:	89fb      	ldrh	r3, [r7, #14]
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fd94 	bl	8009440 <ptr_to_mem>
 8009918:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800991a:	4b1a      	ldr	r3, [pc, #104]	; (8009984 <mem_trim+0x1f4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	429a      	cmp	r2, r3
 8009922:	d202      	bcs.n	800992a <mem_trim+0x19a>
      lfree = mem2;
 8009924:	4a17      	ldr	r2, [pc, #92]	; (8009984 <mem_trim+0x1f4>)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2200      	movs	r2, #0
 800992e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	881a      	ldrh	r2, [r3, #0]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	8afa      	ldrh	r2, [r7, #22]
 800993c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	89fa      	ldrh	r2, [r7, #14]
 8009942:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800994c:	d007      	beq.n	800995e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fd74 	bl	8009440 <ptr_to_mem>
 8009958:	4602      	mov	r2, r0
 800995a:	89fb      	ldrh	r3, [r7, #14]
 800995c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800995e:	687b      	ldr	r3, [r7, #4]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	20000378 	.word	0x20000378
 800996c:	2000037c 	.word	0x2000037c
 8009970:	08015060 	.word	0x08015060
 8009974:	080151d0 	.word	0x080151d0
 8009978:	080150a8 	.word	0x080150a8
 800997c:	080151e8 	.word	0x080151e8
 8009980:	08015208 	.word	0x08015208
 8009984:	20000380 	.word	0x20000380

08009988 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <mem_malloc+0x14>
    return NULL;
 8009998:	2300      	movs	r3, #0
 800999a:	e0d9      	b.n	8009b50 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800999c:	88fb      	ldrh	r3, [r7, #6]
 800999e:	3303      	adds	r3, #3
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	f023 0303 	bic.w	r3, r3, #3
 80099a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80099a8:	8bbb      	ldrh	r3, [r7, #28]
 80099aa:	2b0b      	cmp	r3, #11
 80099ac:	d801      	bhi.n	80099b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80099ae:	230c      	movs	r3, #12
 80099b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80099b2:	8bbb      	ldrh	r3, [r7, #28]
 80099b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099b8:	d803      	bhi.n	80099c2 <mem_malloc+0x3a>
 80099ba:	8bba      	ldrh	r2, [r7, #28]
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d201      	bcs.n	80099c6 <mem_malloc+0x3e>
    return NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	e0c4      	b.n	8009b50 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80099c6:	4b64      	ldr	r3, [pc, #400]	; (8009b58 <mem_malloc+0x1d0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff fd4a 	bl	8009464 <mem_to_ptr>
 80099d0:	4603      	mov	r3, r0
 80099d2:	83fb      	strh	r3, [r7, #30]
 80099d4:	e0b4      	b.n	8009b40 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80099d6:	8bfb      	ldrh	r3, [r7, #30]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fd31 	bl	8009440 <ptr_to_mem>
 80099de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	791b      	ldrb	r3, [r3, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f040 80a4 	bne.w	8009b32 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	8bfb      	ldrh	r3, [r7, #30]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	f1a3 0208 	sub.w	r2, r3, #8
 80099f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80099fa:	429a      	cmp	r2, r3
 80099fc:	f0c0 8099 	bcc.w	8009b32 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	461a      	mov	r2, r3
 8009a06:	8bfb      	ldrh	r3, [r7, #30]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	f1a3 0208 	sub.w	r2, r3, #8
 8009a0e:	8bbb      	ldrh	r3, [r7, #28]
 8009a10:	3314      	adds	r3, #20
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d333      	bcc.n	8009a7e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009a16:	8bfa      	ldrh	r2, [r7, #30]
 8009a18:	8bbb      	ldrh	r3, [r7, #28]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3308      	adds	r3, #8
 8009a20:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009a22:	8a7b      	ldrh	r3, [r7, #18]
 8009a24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a28:	d106      	bne.n	8009a38 <mem_malloc+0xb0>
 8009a2a:	4b4c      	ldr	r3, [pc, #304]	; (8009b5c <mem_malloc+0x1d4>)
 8009a2c:	f240 3287 	movw	r2, #903	; 0x387
 8009a30:	494b      	ldr	r1, [pc, #300]	; (8009b60 <mem_malloc+0x1d8>)
 8009a32:	484c      	ldr	r0, [pc, #304]	; (8009b64 <mem_malloc+0x1dc>)
 8009a34:	f00a fb62 	bl	80140fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009a38:	8a7b      	ldrh	r3, [r7, #18]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff fd00 	bl	8009440 <ptr_to_mem>
 8009a40:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	881a      	ldrh	r2, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	8bfa      	ldrh	r2, [r7, #30]
 8009a54:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	8a7a      	ldrh	r2, [r7, #18]
 8009a5a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	881b      	ldrh	r3, [r3, #0]
 8009a66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a6a:	d00b      	beq.n	8009a84 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff fce5 	bl	8009440 <ptr_to_mem>
 8009a76:	4602      	mov	r2, r0
 8009a78:	8a7b      	ldrh	r3, [r7, #18]
 8009a7a:	8053      	strh	r3, [r2, #2]
 8009a7c:	e002      	b.n	8009a84 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2201      	movs	r2, #1
 8009a82:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009a84:	4b34      	ldr	r3, [pc, #208]	; (8009b58 <mem_malloc+0x1d0>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d127      	bne.n	8009ade <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009a8e:	4b32      	ldr	r3, [pc, #200]	; (8009b58 <mem_malloc+0x1d0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009a94:	e005      	b.n	8009aa2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff fcd0 	bl	8009440 <ptr_to_mem>
 8009aa0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <mem_malloc+0x12c>
 8009aaa:	4b2f      	ldr	r3, [pc, #188]	; (8009b68 <mem_malloc+0x1e0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d1f0      	bne.n	8009a96 <mem_malloc+0x10e>
          }
          lfree = cur;
 8009ab4:	4a28      	ldr	r2, [pc, #160]	; (8009b58 <mem_malloc+0x1d0>)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009aba:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <mem_malloc+0x1d0>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <mem_malloc+0x1e0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d00b      	beq.n	8009ade <mem_malloc+0x156>
 8009ac6:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <mem_malloc+0x1d0>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	791b      	ldrb	r3, [r3, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d006      	beq.n	8009ade <mem_malloc+0x156>
 8009ad0:	4b22      	ldr	r3, [pc, #136]	; (8009b5c <mem_malloc+0x1d4>)
 8009ad2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009ad6:	4925      	ldr	r1, [pc, #148]	; (8009b6c <mem_malloc+0x1e4>)
 8009ad8:	4822      	ldr	r0, [pc, #136]	; (8009b64 <mem_malloc+0x1dc>)
 8009ada:	f00a fb0f 	bl	80140fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009ade:	8bba      	ldrh	r2, [r7, #28]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	4a20      	ldr	r2, [pc, #128]	; (8009b68 <mem_malloc+0x1e0>)
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d906      	bls.n	8009afc <mem_malloc+0x174>
 8009aee:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <mem_malloc+0x1d4>)
 8009af0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009af4:	491e      	ldr	r1, [pc, #120]	; (8009b70 <mem_malloc+0x1e8>)
 8009af6:	481b      	ldr	r0, [pc, #108]	; (8009b64 <mem_malloc+0x1dc>)
 8009af8:	f00a fb00 	bl	80140fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d006      	beq.n	8009b14 <mem_malloc+0x18c>
 8009b06:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <mem_malloc+0x1d4>)
 8009b08:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009b0c:	4919      	ldr	r1, [pc, #100]	; (8009b74 <mem_malloc+0x1ec>)
 8009b0e:	4815      	ldr	r0, [pc, #84]	; (8009b64 <mem_malloc+0x1dc>)
 8009b10:	f00a faf4 	bl	80140fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d006      	beq.n	8009b2c <mem_malloc+0x1a4>
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <mem_malloc+0x1d4>)
 8009b20:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009b24:	4914      	ldr	r1, [pc, #80]	; (8009b78 <mem_malloc+0x1f0>)
 8009b26:	480f      	ldr	r0, [pc, #60]	; (8009b64 <mem_malloc+0x1dc>)
 8009b28:	f00a fae8 	bl	80140fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	e00e      	b.n	8009b50 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009b32:	8bfb      	ldrh	r3, [r7, #30]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fc83 	bl	8009440 <ptr_to_mem>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009b40:	8bfa      	ldrh	r2, [r7, #30]
 8009b42:	8bbb      	ldrh	r3, [r7, #28]
 8009b44:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	f4ff af44 	bcc.w	80099d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20000380 	.word	0x20000380
 8009b5c:	08015060 	.word	0x08015060
 8009b60:	08015208 	.word	0x08015208
 8009b64:	080150a8 	.word	0x080150a8
 8009b68:	2000037c 	.word	0x2000037c
 8009b6c:	0801521c 	.word	0x0801521c
 8009b70:	08015238 	.word	0x08015238
 8009b74:	08015268 	.word	0x08015268
 8009b78:	08015298 	.word	0x08015298

08009b7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	3303      	adds	r3, #3
 8009b92:	f023 0303 	bic.w	r3, r3, #3
 8009b96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	e011      	b.n	8009bc2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	dbe7      	blt.n	8009b9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009be2:	2300      	movs	r3, #0
 8009be4:	80fb      	strh	r3, [r7, #6]
 8009be6:	e009      	b.n	8009bfc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	4a08      	ldr	r2, [pc, #32]	; (8009c0c <memp_init+0x30>)
 8009bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff ffc3 	bl	8009b7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	80fb      	strh	r3, [r7, #6]
 8009bfc:	88fb      	ldrh	r3, [r7, #6]
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d9f2      	bls.n	8009be8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	08017ab8 	.word	0x08017ab8

08009c10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d012      	beq.n	8009c4c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	6812      	ldr	r2, [r2, #0]
 8009c2e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f003 0303 	and.w	r3, r3, #3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d006      	beq.n	8009c48 <do_memp_malloc_pool+0x38>
 8009c3a:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <do_memp_malloc_pool+0x48>)
 8009c3c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009c40:	4906      	ldr	r1, [pc, #24]	; (8009c5c <do_memp_malloc_pool+0x4c>)
 8009c42:	4807      	ldr	r0, [pc, #28]	; (8009c60 <do_memp_malloc_pool+0x50>)
 8009c44:	f00a fa5a 	bl	80140fc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	e000      	b.n	8009c4e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	080152bc 	.word	0x080152bc
 8009c5c:	080152ec 	.word	0x080152ec
 8009c60:	08015310 	.word	0x08015310

08009c64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d908      	bls.n	8009c86 <memp_malloc+0x22>
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <memp_malloc+0x3c>)
 8009c76:	f240 1257 	movw	r2, #343	; 0x157
 8009c7a:	490a      	ldr	r1, [pc, #40]	; (8009ca4 <memp_malloc+0x40>)
 8009c7c:	480a      	ldr	r0, [pc, #40]	; (8009ca8 <memp_malloc+0x44>)
 8009c7e:	f00a fa3d 	bl	80140fc <iprintf>
 8009c82:	2300      	movs	r3, #0
 8009c84:	e008      	b.n	8009c98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	4a08      	ldr	r2, [pc, #32]	; (8009cac <memp_malloc+0x48>)
 8009c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff ffbe 	bl	8009c10 <do_memp_malloc_pool>
 8009c94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	080152bc 	.word	0x080152bc
 8009ca4:	0801534c 	.word	0x0801534c
 8009ca8:	08015310 	.word	0x08015310
 8009cac:	08017ab8 	.word	0x08017ab8

08009cb0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	f003 0303 	and.w	r3, r3, #3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d006      	beq.n	8009cd2 <do_memp_free_pool+0x22>
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <do_memp_free_pool+0x40>)
 8009cc6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009cca:	490a      	ldr	r1, [pc, #40]	; (8009cf4 <do_memp_free_pool+0x44>)
 8009ccc:	480a      	ldr	r0, [pc, #40]	; (8009cf8 <do_memp_free_pool+0x48>)
 8009cce:	f00a fa15 	bl	80140fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	080152bc 	.word	0x080152bc
 8009cf4:	0801536c 	.word	0x0801536c
 8009cf8:	08015310 	.word	0x08015310

08009cfc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	d907      	bls.n	8009d1e <memp_free+0x22>
 8009d0e:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <memp_free+0x44>)
 8009d10:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009d14:	490b      	ldr	r1, [pc, #44]	; (8009d44 <memp_free+0x48>)
 8009d16:	480c      	ldr	r0, [pc, #48]	; (8009d48 <memp_free+0x4c>)
 8009d18:	f00a f9f0 	bl	80140fc <iprintf>
 8009d1c:	e00c      	b.n	8009d38 <memp_free+0x3c>

  if (mem == NULL) {
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d008      	beq.n	8009d36 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <memp_free+0x50>)
 8009d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7ff ffbe 	bl	8009cb0 <do_memp_free_pool>
 8009d34:	e000      	b.n	8009d38 <memp_free+0x3c>
    return;
 8009d36:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	080152bc 	.word	0x080152bc
 8009d44:	0801538c 	.word	0x0801538c
 8009d48:	08015310 	.word	0x08015310
 8009d4c:	08017ab8 	.word	0x08017ab8

08009d50 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009d54:	bf00      	nop
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
	...

08009d60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d108      	bne.n	8009d86 <netif_add+0x26>
 8009d74:	4b57      	ldr	r3, [pc, #348]	; (8009ed4 <netif_add+0x174>)
 8009d76:	f240 1227 	movw	r2, #295	; 0x127
 8009d7a:	4957      	ldr	r1, [pc, #348]	; (8009ed8 <netif_add+0x178>)
 8009d7c:	4857      	ldr	r0, [pc, #348]	; (8009edc <netif_add+0x17c>)
 8009d7e:	f00a f9bd 	bl	80140fc <iprintf>
 8009d82:	2300      	movs	r3, #0
 8009d84:	e0a2      	b.n	8009ecc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d108      	bne.n	8009d9e <netif_add+0x3e>
 8009d8c:	4b51      	ldr	r3, [pc, #324]	; (8009ed4 <netif_add+0x174>)
 8009d8e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009d92:	4953      	ldr	r1, [pc, #332]	; (8009ee0 <netif_add+0x180>)
 8009d94:	4851      	ldr	r0, [pc, #324]	; (8009edc <netif_add+0x17c>)
 8009d96:	f00a f9b1 	bl	80140fc <iprintf>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	e096      	b.n	8009ecc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009da4:	4b4f      	ldr	r3, [pc, #316]	; (8009ee4 <netif_add+0x184>)
 8009da6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009dae:	4b4d      	ldr	r3, [pc, #308]	; (8009ee4 <netif_add+0x184>)
 8009db0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009db8:	4b4a      	ldr	r3, [pc, #296]	; (8009ee4 <netif_add+0x184>)
 8009dba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	4a45      	ldr	r2, [pc, #276]	; (8009ee8 <netif_add+0x188>)
 8009dd2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a3a      	ldr	r2, [r7, #32]
 8009dec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009dee:	4b3f      	ldr	r3, [pc, #252]	; (8009eec <netif_add+0x18c>)
 8009df0:	781a      	ldrb	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dfc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f913 	bl	800a030 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	4798      	blx	r3
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <netif_add+0xba>
    return NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	e058      	b.n	8009ecc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e20:	2bff      	cmp	r3, #255	; 0xff
 8009e22:	d103      	bne.n	8009e2c <netif_add+0xcc>
        netif->num = 0;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009e30:	4b2f      	ldr	r3, [pc, #188]	; (8009ef0 <netif_add+0x190>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	617b      	str	r3, [r7, #20]
 8009e36:	e02b      	b.n	8009e90 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d106      	bne.n	8009e4e <netif_add+0xee>
 8009e40:	4b24      	ldr	r3, [pc, #144]	; (8009ed4 <netif_add+0x174>)
 8009e42:	f240 128b 	movw	r2, #395	; 0x18b
 8009e46:	492b      	ldr	r1, [pc, #172]	; (8009ef4 <netif_add+0x194>)
 8009e48:	4824      	ldr	r0, [pc, #144]	; (8009edc <netif_add+0x17c>)
 8009e4a:	f00a f957 	bl	80140fc <iprintf>
        num_netifs++;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3301      	adds	r3, #1
 8009e52:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2bff      	cmp	r3, #255	; 0xff
 8009e58:	dd06      	ble.n	8009e68 <netif_add+0x108>
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <netif_add+0x174>)
 8009e5c:	f240 128d 	movw	r2, #397	; 0x18d
 8009e60:	4925      	ldr	r1, [pc, #148]	; (8009ef8 <netif_add+0x198>)
 8009e62:	481e      	ldr	r0, [pc, #120]	; (8009edc <netif_add+0x17c>)
 8009e64:	f00a f94a 	bl	80140fc <iprintf>
        if (netif2->num == netif->num) {
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d108      	bne.n	8009e8a <netif_add+0x12a>
          netif->num++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e7e:	3301      	adds	r3, #1
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009e88:	e005      	b.n	8009e96 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	617b      	str	r3, [r7, #20]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1d0      	bne.n	8009e38 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1be      	bne.n	8009e1a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ea2:	2bfe      	cmp	r3, #254	; 0xfe
 8009ea4:	d103      	bne.n	8009eae <netif_add+0x14e>
    netif_num = 0;
 8009ea6:	4b11      	ldr	r3, [pc, #68]	; (8009eec <netif_add+0x18c>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	e006      	b.n	8009ebc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	4b0c      	ldr	r3, [pc, #48]	; (8009eec <netif_add+0x18c>)
 8009eba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009ebc:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <netif_add+0x190>)
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009ec4:	4a0a      	ldr	r2, [pc, #40]	; (8009ef0 <netif_add+0x190>)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009eca:	68fb      	ldr	r3, [r7, #12]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	080153a8 	.word	0x080153a8
 8009ed8:	0801543c 	.word	0x0801543c
 8009edc:	080153f8 	.word	0x080153f8
 8009ee0:	08015458 	.word	0x08015458
 8009ee4:	08017b1c 	.word	0x08017b1c
 8009ee8:	0800a243 	.word	0x0800a243
 8009eec:	200003a8 	.word	0x200003a8
 8009ef0:	20006cd0 	.word	0x20006cd0
 8009ef4:	0801547c 	.word	0x0801547c
 8009ef8:	08015490 	.word	0x08015490

08009efc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f002 faef 	bl	800c4ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f006 ff89 	bl	8010e28 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <netif_do_set_ipaddr+0x20>
 8009f32:	4b1d      	ldr	r3, [pc, #116]	; (8009fa8 <netif_do_set_ipaddr+0x88>)
 8009f34:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009f38:	491c      	ldr	r1, [pc, #112]	; (8009fac <netif_do_set_ipaddr+0x8c>)
 8009f3a:	481d      	ldr	r0, [pc, #116]	; (8009fb0 <netif_do_set_ipaddr+0x90>)
 8009f3c:	f00a f8de 	bl	80140fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d106      	bne.n	8009f54 <netif_do_set_ipaddr+0x34>
 8009f46:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <netif_do_set_ipaddr+0x88>)
 8009f48:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009f4c:	4917      	ldr	r1, [pc, #92]	; (8009fac <netif_do_set_ipaddr+0x8c>)
 8009f4e:	4818      	ldr	r0, [pc, #96]	; (8009fb0 <netif_do_set_ipaddr+0x90>)
 8009f50:	f00a f8d4 	bl	80140fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d01c      	beq.n	8009f9c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009f72:	f107 0314 	add.w	r3, r7, #20
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff ffbf 	bl	8009efc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <netif_do_set_ipaddr+0x6a>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	e000      	b.n	8009f8c <netif_do_set_ipaddr+0x6c>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009f90:	2101      	movs	r1, #1
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 f8d2 	bl	800a13c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e000      	b.n	8009f9e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	080153a8 	.word	0x080153a8
 8009fac:	080154c0 	.word	0x080154c0
 8009fb0:	080153f8 	.word	0x080153f8

08009fb4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d00a      	beq.n	8009fe4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <netif_do_set_netmask+0x26>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	e000      	b.n	8009fdc <netif_do_set_netmask+0x28>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e000      	b.n	8009fe6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	330c      	adds	r3, #12
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d00a      	beq.n	800a022 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <netif_do_set_gw+0x26>
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	e000      	b.n	800a01a <netif_do_set_gw+0x28>
 800a018:	2300      	movs	r3, #0
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <netif_set_addr+0x90>)
 800a04e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a056:	4b1a      	ldr	r3, [pc, #104]	; (800a0c0 <netif_set_addr+0x90>)
 800a058:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <netif_set_addr+0x90>)
 800a062:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <netif_set_addr+0x42>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <netif_set_addr+0x46>
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <netif_set_addr+0x48>
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d006      	beq.n	800a08e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	461a      	mov	r2, r3
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7ff ff49 	bl	8009f20 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f7ff ff8e 	bl	8009fb4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a098:	69ba      	ldr	r2, [r7, #24]
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7ff ffa8 	bl	8009ff2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a0a8:	f107 0310 	add.w	r3, r7, #16
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f7ff ff35 	bl	8009f20 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a0b6:	bf00      	nop
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	08017b1c 	.word	0x08017b1c

0800a0c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a0cc:	4a04      	ldr	r2, [pc, #16]	; (800a0e0 <netif_set_default+0x1c>)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	20006cd4 	.word	0x20006cd4

0800a0e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d107      	bne.n	800a102 <netif_set_up+0x1e>
 800a0f2:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <netif_set_up+0x4c>)
 800a0f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a0f8:	490e      	ldr	r1, [pc, #56]	; (800a134 <netif_set_up+0x50>)
 800a0fa:	480f      	ldr	r0, [pc, #60]	; (800a138 <netif_set_up+0x54>)
 800a0fc:	f009 fffe 	bl	80140fc <iprintf>
 800a100:	e013      	b.n	800a12a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10c      	bne.n	800a12a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a122:	2103      	movs	r1, #3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f809 	bl	800a13c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	080153a8 	.word	0x080153a8
 800a134:	08015530 	.word	0x08015530
 800a138:	080153f8 	.word	0x080153f8

0800a13c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <netif_issue_reports+0x20>
 800a14e:	4b18      	ldr	r3, [pc, #96]	; (800a1b0 <netif_issue_reports+0x74>)
 800a150:	f240 326d 	movw	r2, #877	; 0x36d
 800a154:	4917      	ldr	r1, [pc, #92]	; (800a1b4 <netif_issue_reports+0x78>)
 800a156:	4818      	ldr	r0, [pc, #96]	; (800a1b8 <netif_issue_reports+0x7c>)
 800a158:	f009 ffd0 	bl	80140fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a162:	f003 0304 	and.w	r3, r3, #4
 800a166:	2b00      	cmp	r3, #0
 800a168:	d01e      	beq.n	800a1a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a170:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a174:	2b00      	cmp	r3, #0
 800a176:	d017      	beq.n	800a1a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d013      	beq.n	800a1aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3304      	adds	r3, #4
 800a186:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00e      	beq.n	800a1aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f007 fdab 	bl	8011cfc <etharp_request>
 800a1a6:	e000      	b.n	800a1aa <netif_issue_reports+0x6e>
    return;
 800a1a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	080153a8 	.word	0x080153a8
 800a1b4:	0801554c 	.word	0x0801554c
 800a1b8:	080153f8 	.word	0x080153f8

0800a1bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d107      	bne.n	800a1da <netif_set_down+0x1e>
 800a1ca:	4b12      	ldr	r3, [pc, #72]	; (800a214 <netif_set_down+0x58>)
 800a1cc:	f240 329b 	movw	r2, #923	; 0x39b
 800a1d0:	4911      	ldr	r1, [pc, #68]	; (800a218 <netif_set_down+0x5c>)
 800a1d2:	4812      	ldr	r0, [pc, #72]	; (800a21c <netif_set_down+0x60>)
 800a1d4:	f009 ff92 	bl	80140fc <iprintf>
 800a1d8:	e019      	b.n	800a20e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d012      	beq.n	800a20e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1ee:	f023 0301 	bic.w	r3, r3, #1
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a200:	f003 0308 	and.w	r3, r3, #8
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f007 f935 	bl	8011478 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	080153a8 	.word	0x080153a8
 800a218:	08015570 	.word	0x08015570
 800a21c:	080153f8 	.word	0x080153f8

0800a220 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	61da      	str	r2, [r3, #28]
  }
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a24e:	f06f 030b 	mvn.w	r3, #11
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
	...

0800a260 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d013      	beq.n	800a298 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a270:	4b0d      	ldr	r3, [pc, #52]	; (800a2a8 <netif_get_by_index+0x48>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e00c      	b.n	800a292 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a27e:	3301      	adds	r3, #1
 800a280:	b2db      	uxtb	r3, r3
 800a282:	79fa      	ldrb	r2, [r7, #7]
 800a284:	429a      	cmp	r2, r3
 800a286:	d101      	bne.n	800a28c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	e006      	b.n	800a29a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1ef      	bne.n	800a278 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	20006cd0 	.word	0x20006cd0

0800a2ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a2b2:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <pbuf_free_ooseq+0x38>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a2b8:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <pbuf_free_ooseq+0x3c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	607b      	str	r3, [r7, #4]
 800a2be:	e00a      	b.n	800a2d6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f002 f94d 	bl	800c568 <tcp_free_ooseq>
      return;
 800a2ce:	e005      	b.n	800a2dc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	607b      	str	r3, [r7, #4]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1f1      	bne.n	800a2c0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20006cd8 	.word	0x20006cd8
 800a2e8:	20006ce0 	.word	0x20006ce0

0800a2ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a2f0:	4b03      	ldr	r3, [pc, #12]	; (800a300 <pbuf_pool_is_empty+0x14>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a2f6:	bf00      	nop
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	20006cd8 	.word	0x20006cd8

0800a304 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	4611      	mov	r1, r2
 800a310:	461a      	mov	r2, r3
 800a312:	460b      	mov	r3, r1
 800a314:	80fb      	strh	r3, [r7, #6]
 800a316:	4613      	mov	r3, r2
 800a318:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	88fa      	ldrh	r2, [r7, #6]
 800a32a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	88ba      	ldrh	r2, [r7, #4]
 800a330:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a332:	8b3b      	ldrh	r3, [r7, #24]
 800a334:	b2da      	uxtb	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	7f3a      	ldrb	r2, [r7, #28]
 800a33e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2201      	movs	r2, #1
 800a344:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	73da      	strb	r2, [r3, #15]
}
 800a34c:	bf00      	nop
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08c      	sub	sp, #48	; 0x30
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
 800a362:	460b      	mov	r3, r1
 800a364:	80bb      	strh	r3, [r7, #4]
 800a366:	4613      	mov	r3, r2
 800a368:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a36e:	887b      	ldrh	r3, [r7, #2]
 800a370:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a374:	d07f      	beq.n	800a476 <pbuf_alloc+0x11e>
 800a376:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a37a:	f300 80c8 	bgt.w	800a50e <pbuf_alloc+0x1b6>
 800a37e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a382:	d010      	beq.n	800a3a6 <pbuf_alloc+0x4e>
 800a384:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a388:	f300 80c1 	bgt.w	800a50e <pbuf_alloc+0x1b6>
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d002      	beq.n	800a396 <pbuf_alloc+0x3e>
 800a390:	2b41      	cmp	r3, #65	; 0x41
 800a392:	f040 80bc 	bne.w	800a50e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a396:	887a      	ldrh	r2, [r7, #2]
 800a398:	88bb      	ldrh	r3, [r7, #4]
 800a39a:	4619      	mov	r1, r3
 800a39c:	2000      	movs	r0, #0
 800a39e:	f000 f8d1 	bl	800a544 <pbuf_alloc_reference>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a3a4:	e0bd      	b.n	800a522 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a3ae:	88bb      	ldrh	r3, [r7, #4]
 800a3b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a3b2:	2008      	movs	r0, #8
 800a3b4:	f7ff fc56 	bl	8009c64 <memp_malloc>
 800a3b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a3c0:	f7ff ff94 	bl	800a2ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800a3ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3cc:	f000 faa8 	bl	800a920 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e0a7      	b.n	800a524 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3d6:	3303      	adds	r3, #3
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	8b7a      	ldrh	r2, [r7, #26]
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	bf28      	it	cs
 800a3ec:	4613      	movcs	r3, r2
 800a3ee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a3f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3f2:	3310      	adds	r3, #16
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	3303      	adds	r3, #3
 800a3fa:	f023 0303 	bic.w	r3, r3, #3
 800a3fe:	4618      	mov	r0, r3
 800a400:	89f9      	ldrh	r1, [r7, #14]
 800a402:	8b7a      	ldrh	r2, [r7, #26]
 800a404:	2300      	movs	r3, #0
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	887b      	ldrh	r3, [r7, #2]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	460b      	mov	r3, r1
 800a40e:	4601      	mov	r1, r0
 800a410:	6938      	ldr	r0, [r7, #16]
 800a412:	f7ff ff77 	bl	800a304 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d006      	beq.n	800a430 <pbuf_alloc+0xd8>
 800a422:	4b42      	ldr	r3, [pc, #264]	; (800a52c <pbuf_alloc+0x1d4>)
 800a424:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a428:	4941      	ldr	r1, [pc, #260]	; (800a530 <pbuf_alloc+0x1d8>)
 800a42a:	4842      	ldr	r0, [pc, #264]	; (800a534 <pbuf_alloc+0x1dc>)
 800a42c:	f009 fe66 	bl	80140fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a432:	3303      	adds	r3, #3
 800a434:	f023 0303 	bic.w	r3, r3, #3
 800a438:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a43c:	d106      	bne.n	800a44c <pbuf_alloc+0xf4>
 800a43e:	4b3b      	ldr	r3, [pc, #236]	; (800a52c <pbuf_alloc+0x1d4>)
 800a440:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a444:	493c      	ldr	r1, [pc, #240]	; (800a538 <pbuf_alloc+0x1e0>)
 800a446:	483b      	ldr	r0, [pc, #236]	; (800a534 <pbuf_alloc+0x1dc>)
 800a448:	f009 fe58 	bl	80140fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
 800a456:	e002      	b.n	800a45e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a462:	8b7a      	ldrh	r2, [r7, #26]
 800a464:	89fb      	ldrh	r3, [r7, #14]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a46e:	8b7b      	ldrh	r3, [r7, #26]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d19e      	bne.n	800a3b2 <pbuf_alloc+0x5a>
      break;
 800a474:	e055      	b.n	800a522 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a478:	3303      	adds	r3, #3
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f023 0303 	bic.w	r3, r3, #3
 800a480:	b29a      	uxth	r2, r3
 800a482:	88bb      	ldrh	r3, [r7, #4]
 800a484:	3303      	adds	r3, #3
 800a486:	b29b      	uxth	r3, r3
 800a488:	f023 0303 	bic.w	r3, r3, #3
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	4413      	add	r3, r2
 800a490:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a492:	8b3b      	ldrh	r3, [r7, #24]
 800a494:	3310      	adds	r3, #16
 800a496:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a498:	8b3a      	ldrh	r2, [r7, #24]
 800a49a:	88bb      	ldrh	r3, [r7, #4]
 800a49c:	3303      	adds	r3, #3
 800a49e:	f023 0303 	bic.w	r3, r3, #3
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d306      	bcc.n	800a4b4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a4a6:	8afa      	ldrh	r2, [r7, #22]
 800a4a8:	88bb      	ldrh	r3, [r7, #4]
 800a4aa:	3303      	adds	r3, #3
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d201      	bcs.n	800a4b8 <pbuf_alloc+0x160>
        return NULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e035      	b.n	800a524 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a4b8:	8afb      	ldrh	r3, [r7, #22]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7ff fa64 	bl	8009988 <mem_malloc>
 800a4c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <pbuf_alloc+0x174>
        return NULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	e02b      	b.n	800a524 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a4cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4ce:	3310      	adds	r3, #16
 800a4d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d2:	4413      	add	r3, r2
 800a4d4:	3303      	adds	r3, #3
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	4618      	mov	r0, r3
 800a4dc:	88b9      	ldrh	r1, [r7, #4]
 800a4de:	88ba      	ldrh	r2, [r7, #4]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	887b      	ldrh	r3, [r7, #2]
 800a4e6:	9300      	str	r3, [sp, #0]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4ee:	f7ff ff09 	bl	800a304 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f003 0303 	and.w	r3, r3, #3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d010      	beq.n	800a520 <pbuf_alloc+0x1c8>
 800a4fe:	4b0b      	ldr	r3, [pc, #44]	; (800a52c <pbuf_alloc+0x1d4>)
 800a500:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a504:	490d      	ldr	r1, [pc, #52]	; (800a53c <pbuf_alloc+0x1e4>)
 800a506:	480b      	ldr	r0, [pc, #44]	; (800a534 <pbuf_alloc+0x1dc>)
 800a508:	f009 fdf8 	bl	80140fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a50c:	e008      	b.n	800a520 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a50e:	4b07      	ldr	r3, [pc, #28]	; (800a52c <pbuf_alloc+0x1d4>)
 800a510:	f240 1227 	movw	r2, #295	; 0x127
 800a514:	490a      	ldr	r1, [pc, #40]	; (800a540 <pbuf_alloc+0x1e8>)
 800a516:	4807      	ldr	r0, [pc, #28]	; (800a534 <pbuf_alloc+0x1dc>)
 800a518:	f009 fdf0 	bl	80140fc <iprintf>
      return NULL;
 800a51c:	2300      	movs	r3, #0
 800a51e:	e001      	b.n	800a524 <pbuf_alloc+0x1cc>
      break;
 800a520:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a524:	4618      	mov	r0, r3
 800a526:	3728      	adds	r7, #40	; 0x28
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	080155d8 	.word	0x080155d8
 800a530:	08015608 	.word	0x08015608
 800a534:	08015638 	.word	0x08015638
 800a538:	08015660 	.word	0x08015660
 800a53c:	08015694 	.word	0x08015694
 800a540:	080156c0 	.word	0x080156c0

0800a544 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af02      	add	r7, sp, #8
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	807b      	strh	r3, [r7, #2]
 800a550:	4613      	mov	r3, r2
 800a552:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a554:	883b      	ldrh	r3, [r7, #0]
 800a556:	2b41      	cmp	r3, #65	; 0x41
 800a558:	d009      	beq.n	800a56e <pbuf_alloc_reference+0x2a>
 800a55a:	883b      	ldrh	r3, [r7, #0]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d006      	beq.n	800a56e <pbuf_alloc_reference+0x2a>
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <pbuf_alloc_reference+0x5c>)
 800a562:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a566:	490f      	ldr	r1, [pc, #60]	; (800a5a4 <pbuf_alloc_reference+0x60>)
 800a568:	480f      	ldr	r0, [pc, #60]	; (800a5a8 <pbuf_alloc_reference+0x64>)
 800a56a:	f009 fdc7 	bl	80140fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a56e:	2007      	movs	r0, #7
 800a570:	f7ff fb78 	bl	8009c64 <memp_malloc>
 800a574:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e00b      	b.n	800a598 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a580:	8879      	ldrh	r1, [r7, #2]
 800a582:	887a      	ldrh	r2, [r7, #2]
 800a584:	2300      	movs	r3, #0
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	883b      	ldrh	r3, [r7, #0]
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	460b      	mov	r3, r1
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff feb7 	bl	800a304 <pbuf_init_alloced_pbuf>
  return p;
 800a596:	68fb      	ldr	r3, [r7, #12]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	080155d8 	.word	0x080155d8
 800a5a4:	080156dc 	.word	0x080156dc
 800a5a8:	08015638 	.word	0x08015638

0800a5ac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b088      	sub	sp, #32
 800a5b0:	af02      	add	r7, sp, #8
 800a5b2:	607b      	str	r3, [r7, #4]
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73fb      	strb	r3, [r7, #15]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	81bb      	strh	r3, [r7, #12]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
 800a5c2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a5c4:	8a7b      	ldrh	r3, [r7, #18]
 800a5c6:	3303      	adds	r3, #3
 800a5c8:	f023 0203 	bic.w	r2, r3, #3
 800a5cc:	89bb      	ldrh	r3, [r7, #12]
 800a5ce:	441a      	add	r2, r3
 800a5d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d901      	bls.n	800a5da <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e018      	b.n	800a60c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d007      	beq.n	800a5f0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a5e0:	8a7b      	ldrh	r3, [r7, #18]
 800a5e2:	3303      	adds	r3, #3
 800a5e4:	f023 0303 	bic.w	r3, r3, #3
 800a5e8:	6a3a      	ldr	r2, [r7, #32]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	e001      	b.n	800a5f4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	89b9      	ldrh	r1, [r7, #12]
 800a5f8:	89ba      	ldrh	r2, [r7, #12]
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	897b      	ldrh	r3, [r7, #10]
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	460b      	mov	r3, r1
 800a604:	6979      	ldr	r1, [r7, #20]
 800a606:	f7ff fe7d 	bl	800a304 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a60a:	687b      	ldr	r3, [r7, #4]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <pbuf_realloc+0x20>
 800a626:	4b3a      	ldr	r3, [pc, #232]	; (800a710 <pbuf_realloc+0xfc>)
 800a628:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a62c:	4939      	ldr	r1, [pc, #228]	; (800a714 <pbuf_realloc+0x100>)
 800a62e:	483a      	ldr	r0, [pc, #232]	; (800a718 <pbuf_realloc+0x104>)
 800a630:	f009 fd64 	bl	80140fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	891b      	ldrh	r3, [r3, #8]
 800a638:	887a      	ldrh	r2, [r7, #2]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d263      	bcs.n	800a706 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	891a      	ldrh	r2, [r3, #8]
 800a642:	887b      	ldrh	r3, [r7, #2]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a648:	887b      	ldrh	r3, [r7, #2]
 800a64a:	817b      	strh	r3, [r7, #10]
  q = p;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a650:	e018      	b.n	800a684 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	895b      	ldrh	r3, [r3, #10]
 800a656:	897a      	ldrh	r2, [r7, #10]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	891a      	ldrh	r2, [r3, #8]
 800a660:	893b      	ldrh	r3, [r7, #8]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	b29a      	uxth	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <pbuf_realloc+0x70>
 800a676:	4b26      	ldr	r3, [pc, #152]	; (800a710 <pbuf_realloc+0xfc>)
 800a678:	f240 12af 	movw	r2, #431	; 0x1af
 800a67c:	4927      	ldr	r1, [pc, #156]	; (800a71c <pbuf_realloc+0x108>)
 800a67e:	4826      	ldr	r0, [pc, #152]	; (800a718 <pbuf_realloc+0x104>)
 800a680:	f009 fd3c 	bl	80140fc <iprintf>
  while (rem_len > q->len) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	895b      	ldrh	r3, [r3, #10]
 800a688:	897a      	ldrh	r2, [r7, #10]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d8e1      	bhi.n	800a652 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	7b1b      	ldrb	r3, [r3, #12]
 800a692:	f003 030f 	and.w	r3, r3, #15
 800a696:	2b00      	cmp	r3, #0
 800a698:	d121      	bne.n	800a6de <pbuf_realloc+0xca>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	895b      	ldrh	r3, [r3, #10]
 800a69e:	897a      	ldrh	r2, [r7, #10]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d01c      	beq.n	800a6de <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	7b5b      	ldrb	r3, [r3, #13]
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d116      	bne.n	800a6de <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	897b      	ldrh	r3, [r7, #10]
 800a6bc:	4413      	add	r3, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7ff f864 	bl	8009790 <mem_trim>
 800a6c8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d106      	bne.n	800a6de <pbuf_realloc+0xca>
 800a6d0:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <pbuf_realloc+0xfc>)
 800a6d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a6d6:	4912      	ldr	r1, [pc, #72]	; (800a720 <pbuf_realloc+0x10c>)
 800a6d8:	480f      	ldr	r0, [pc, #60]	; (800a718 <pbuf_realloc+0x104>)
 800a6da:	f009 fd0f 	bl	80140fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	897a      	ldrh	r2, [r7, #10]
 800a6e2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	895a      	ldrh	r2, [r3, #10]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d004      	beq.n	800a6fe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f911 	bl	800a920 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	e000      	b.n	800a708 <pbuf_realloc+0xf4>
    return;
 800a706:	bf00      	nop

}
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	080155d8 	.word	0x080155d8
 800a714:	080156f0 	.word	0x080156f0
 800a718:	08015638 	.word	0x08015638
 800a71c:	08015708 	.word	0x08015708
 800a720:	08015720 	.word	0x08015720

0800a724 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d106      	bne.n	800a746 <pbuf_add_header_impl+0x22>
 800a738:	4b2b      	ldr	r3, [pc, #172]	; (800a7e8 <pbuf_add_header_impl+0xc4>)
 800a73a:	f240 12df 	movw	r2, #479	; 0x1df
 800a73e:	492b      	ldr	r1, [pc, #172]	; (800a7ec <pbuf_add_header_impl+0xc8>)
 800a740:	482b      	ldr	r0, [pc, #172]	; (800a7f0 <pbuf_add_header_impl+0xcc>)
 800a742:	f009 fcdb 	bl	80140fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d003      	beq.n	800a754 <pbuf_add_header_impl+0x30>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a752:	d301      	bcc.n	800a758 <pbuf_add_header_impl+0x34>
    return 1;
 800a754:	2301      	movs	r3, #1
 800a756:	e043      	b.n	800a7e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <pbuf_add_header_impl+0x3e>
    return 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	e03e      	b.n	800a7e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	891a      	ldrh	r2, [r3, #8]
 800a76a:	8a7b      	ldrh	r3, [r7, #18]
 800a76c:	4413      	add	r3, r2
 800a76e:	b29b      	uxth	r3, r3
 800a770:	8a7a      	ldrh	r2, [r7, #18]
 800a772:	429a      	cmp	r2, r3
 800a774:	d901      	bls.n	800a77a <pbuf_add_header_impl+0x56>
    return 1;
 800a776:	2301      	movs	r3, #1
 800a778:	e032      	b.n	800a7e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	7b1b      	ldrb	r3, [r3, #12]
 800a77e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a780:	8a3b      	ldrh	r3, [r7, #16]
 800a782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00c      	beq.n	800a7a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	425b      	negs	r3, r3
 800a792:	4413      	add	r3, r2
 800a794:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3310      	adds	r3, #16
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d20d      	bcs.n	800a7bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e01d      	b.n	800a7e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d006      	beq.n	800a7b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	425b      	negs	r3, r3
 800a7b2:	4413      	add	r3, r2
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	e001      	b.n	800a7bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e011      	b.n	800a7e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	895a      	ldrh	r2, [r3, #10]
 800a7c6:	8a7b      	ldrh	r3, [r7, #18]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	891a      	ldrh	r2, [r3, #8]
 800a7d4:	8a7b      	ldrh	r3, [r7, #18]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	811a      	strh	r2, [r3, #8]


  return 0;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	080155d8 	.word	0x080155d8
 800a7ec:	0801573c 	.word	0x0801573c
 800a7f0:	08015638 	.word	0x08015638

0800a7f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a7fe:	2200      	movs	r2, #0
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff ff8e 	bl	800a724 <pbuf_add_header_impl>
 800a808:	4603      	mov	r3, r0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d106      	bne.n	800a832 <pbuf_remove_header+0x1e>
 800a824:	4b20      	ldr	r3, [pc, #128]	; (800a8a8 <pbuf_remove_header+0x94>)
 800a826:	f240 224b 	movw	r2, #587	; 0x24b
 800a82a:	4920      	ldr	r1, [pc, #128]	; (800a8ac <pbuf_remove_header+0x98>)
 800a82c:	4820      	ldr	r0, [pc, #128]	; (800a8b0 <pbuf_remove_header+0x9c>)
 800a82e:	f009 fc65 	bl	80140fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d003      	beq.n	800a840 <pbuf_remove_header+0x2c>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a83e:	d301      	bcc.n	800a844 <pbuf_remove_header+0x30>
    return 1;
 800a840:	2301      	movs	r3, #1
 800a842:	e02c      	b.n	800a89e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <pbuf_remove_header+0x3a>
    return 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	e027      	b.n	800a89e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	895b      	ldrh	r3, [r3, #10]
 800a856:	89fa      	ldrh	r2, [r7, #14]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d908      	bls.n	800a86e <pbuf_remove_header+0x5a>
 800a85c:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <pbuf_remove_header+0x94>)
 800a85e:	f240 2255 	movw	r2, #597	; 0x255
 800a862:	4914      	ldr	r1, [pc, #80]	; (800a8b4 <pbuf_remove_header+0xa0>)
 800a864:	4812      	ldr	r0, [pc, #72]	; (800a8b0 <pbuf_remove_header+0x9c>)
 800a866:	f009 fc49 	bl	80140fc <iprintf>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e017      	b.n	800a89e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	441a      	add	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	895a      	ldrh	r2, [r3, #10]
 800a884:	89fb      	ldrh	r3, [r7, #14]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	891a      	ldrh	r2, [r3, #8]
 800a892:	89fb      	ldrh	r3, [r7, #14]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	b29a      	uxth	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	080155d8 	.word	0x080155d8
 800a8ac:	0801573c 	.word	0x0801573c
 800a8b0:	08015638 	.word	0x08015638
 800a8b4:	08015748 	.word	0x08015748

0800a8b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a8c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	da08      	bge.n	800a8e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a8d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8d4:	425b      	negs	r3, r3
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff ff9b 	bl	800a814 <pbuf_remove_header>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	e007      	b.n	800a8f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a8e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a8e6:	787a      	ldrb	r2, [r7, #1]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ff1a 	bl	800a724 <pbuf_add_header_impl>
 800a8f0:	4603      	mov	r3, r0
  }
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a906:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a90a:	2201      	movs	r2, #1
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff ffd2 	bl	800a8b8 <pbuf_header_impl>
 800a914:	4603      	mov	r3, r0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <pbuf_free+0x22>
 800a934:	4b38      	ldr	r3, [pc, #224]	; (800aa18 <pbuf_free+0xf8>)
 800a936:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a93a:	4938      	ldr	r1, [pc, #224]	; (800aa1c <pbuf_free+0xfc>)
 800a93c:	4838      	ldr	r0, [pc, #224]	; (800aa20 <pbuf_free+0x100>)
 800a93e:	f009 fbdd 	bl	80140fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a942:	2300      	movs	r3, #0
 800a944:	e063      	b.n	800aa0e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a94a:	e05c      	b.n	800aa06 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	7b9b      	ldrb	r3, [r3, #14]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <pbuf_free+0x42>
 800a954:	4b30      	ldr	r3, [pc, #192]	; (800aa18 <pbuf_free+0xf8>)
 800a956:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a95a:	4932      	ldr	r1, [pc, #200]	; (800aa24 <pbuf_free+0x104>)
 800a95c:	4830      	ldr	r0, [pc, #192]	; (800aa20 <pbuf_free+0x100>)
 800a95e:	f009 fbcd 	bl	80140fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	7b9b      	ldrb	r3, [r3, #14]
 800a966:	3b01      	subs	r3, #1
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	739a      	strb	r2, [r3, #14]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7b9b      	ldrb	r3, [r3, #14]
 800a972:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a974:	7dbb      	ldrb	r3, [r7, #22]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d143      	bne.n	800aa02 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	7b1b      	ldrb	r3, [r3, #12]
 800a984:	f003 030f 	and.w	r3, r3, #15
 800a988:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	7b5b      	ldrb	r3, [r3, #13]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d011      	beq.n	800a9ba <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <pbuf_free+0x90>
 800a9a2:	4b1d      	ldr	r3, [pc, #116]	; (800aa18 <pbuf_free+0xf8>)
 800a9a4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a9a8:	491f      	ldr	r1, [pc, #124]	; (800aa28 <pbuf_free+0x108>)
 800a9aa:	481d      	ldr	r0, [pc, #116]	; (800aa20 <pbuf_free+0x100>)
 800a9ac:	f009 fba6 	bl	80140fc <iprintf>
        pc->custom_free_function(p);
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	4798      	blx	r3
 800a9b8:	e01d      	b.n	800a9f6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a9ba:	7bfb      	ldrb	r3, [r7, #15]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d104      	bne.n	800a9ca <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	2008      	movs	r0, #8
 800a9c4:	f7ff f99a 	bl	8009cfc <memp_free>
 800a9c8:	e015      	b.n	800a9f6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d104      	bne.n	800a9da <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	2007      	movs	r0, #7
 800a9d4:	f7ff f992 	bl	8009cfc <memp_free>
 800a9d8:	e00d      	b.n	800a9f6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d103      	bne.n	800a9e8 <pbuf_free+0xc8>
          mem_free(p);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7fe fe6b 	bl	80096bc <mem_free>
 800a9e6:	e006      	b.n	800a9f6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a9e8:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <pbuf_free+0xf8>)
 800a9ea:	f240 320f 	movw	r2, #783	; 0x30f
 800a9ee:	490f      	ldr	r1, [pc, #60]	; (800aa2c <pbuf_free+0x10c>)
 800a9f0:	480b      	ldr	r0, [pc, #44]	; (800aa20 <pbuf_free+0x100>)
 800a9f2:	f009 fb83 	bl	80140fc <iprintf>
        }
      }
      count++;
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	607b      	str	r3, [r7, #4]
 800aa00:	e001      	b.n	800aa06 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d19f      	bne.n	800a94c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	080155d8 	.word	0x080155d8
 800aa1c:	0801573c 	.word	0x0801573c
 800aa20:	08015638 	.word	0x08015638
 800aa24:	08015768 	.word	0x08015768
 800aa28:	08015780 	.word	0x08015780
 800aa2c:	080157a4 	.word	0x080157a4

0800aa30 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aa3c:	e005      	b.n	800aa4a <pbuf_clen+0x1a>
    ++len;
 800aa3e:	89fb      	ldrh	r3, [r7, #14]
 800aa40:	3301      	adds	r3, #1
 800aa42:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f6      	bne.n	800aa3e <pbuf_clen+0xe>
  }
  return len;
 800aa50:	89fb      	ldrh	r3, [r7, #14]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d010      	beq.n	800aa90 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7b9b      	ldrb	r3, [r3, #14]
 800aa72:	3301      	adds	r3, #1
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	7b9b      	ldrb	r3, [r3, #14]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d106      	bne.n	800aa90 <pbuf_ref+0x30>
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <pbuf_ref+0x38>)
 800aa84:	f240 3242 	movw	r2, #834	; 0x342
 800aa88:	4904      	ldr	r1, [pc, #16]	; (800aa9c <pbuf_ref+0x3c>)
 800aa8a:	4805      	ldr	r0, [pc, #20]	; (800aaa0 <pbuf_ref+0x40>)
 800aa8c:	f009 fb36 	bl	80140fc <iprintf>
  }
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	080155d8 	.word	0x080155d8
 800aa9c:	080157b8 	.word	0x080157b8
 800aaa0:	08015638 	.word	0x08015638

0800aaa4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d002      	beq.n	800aaba <pbuf_cat+0x16>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d107      	bne.n	800aaca <pbuf_cat+0x26>
 800aaba:	4b20      	ldr	r3, [pc, #128]	; (800ab3c <pbuf_cat+0x98>)
 800aabc:	f240 3259 	movw	r2, #857	; 0x359
 800aac0:	491f      	ldr	r1, [pc, #124]	; (800ab40 <pbuf_cat+0x9c>)
 800aac2:	4820      	ldr	r0, [pc, #128]	; (800ab44 <pbuf_cat+0xa0>)
 800aac4:	f009 fb1a 	bl	80140fc <iprintf>
 800aac8:	e034      	b.n	800ab34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
 800aace:	e00a      	b.n	800aae6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	891a      	ldrh	r2, [r3, #8]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	891b      	ldrh	r3, [r3, #8]
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1f0      	bne.n	800aad0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	891a      	ldrh	r2, [r3, #8]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	895b      	ldrh	r3, [r3, #10]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d006      	beq.n	800ab08 <pbuf_cat+0x64>
 800aafa:	4b10      	ldr	r3, [pc, #64]	; (800ab3c <pbuf_cat+0x98>)
 800aafc:	f240 3262 	movw	r2, #866	; 0x362
 800ab00:	4911      	ldr	r1, [pc, #68]	; (800ab48 <pbuf_cat+0xa4>)
 800ab02:	4810      	ldr	r0, [pc, #64]	; (800ab44 <pbuf_cat+0xa0>)
 800ab04:	f009 fafa 	bl	80140fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d006      	beq.n	800ab1e <pbuf_cat+0x7a>
 800ab10:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <pbuf_cat+0x98>)
 800ab12:	f240 3263 	movw	r2, #867	; 0x363
 800ab16:	490d      	ldr	r1, [pc, #52]	; (800ab4c <pbuf_cat+0xa8>)
 800ab18:	480a      	ldr	r0, [pc, #40]	; (800ab44 <pbuf_cat+0xa0>)
 800ab1a:	f009 faef 	bl	80140fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	891a      	ldrh	r2, [r3, #8]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	891b      	ldrh	r3, [r3, #8]
 800ab26:	4413      	add	r3, r2
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	683a      	ldr	r2, [r7, #0]
 800ab32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	080155d8 	.word	0x080155d8
 800ab40:	080157cc 	.word	0x080157cc
 800ab44:	08015638 	.word	0x08015638
 800ab48:	08015804 	.word	0x08015804
 800ab4c:	08015834 	.word	0x08015834

0800ab50 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff ffa1 	bl	800aaa4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ab62:	6838      	ldr	r0, [r7, #0]
 800ab64:	f7ff ff7c 	bl	800aa60 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	617b      	str	r3, [r7, #20]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d008      	beq.n	800ab9a <pbuf_copy+0x2a>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d005      	beq.n	800ab9a <pbuf_copy+0x2a>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	891a      	ldrh	r2, [r3, #8]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	891b      	ldrh	r3, [r3, #8]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d209      	bcs.n	800abae <pbuf_copy+0x3e>
 800ab9a:	4b57      	ldr	r3, [pc, #348]	; (800acf8 <pbuf_copy+0x188>)
 800ab9c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aba0:	4956      	ldr	r1, [pc, #344]	; (800acfc <pbuf_copy+0x18c>)
 800aba2:	4857      	ldr	r0, [pc, #348]	; (800ad00 <pbuf_copy+0x190>)
 800aba4:	f009 faaa 	bl	80140fc <iprintf>
 800aba8:	f06f 030f 	mvn.w	r3, #15
 800abac:	e09f      	b.n	800acee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	895b      	ldrh	r3, [r3, #10]
 800abb2:	461a      	mov	r2, r3
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	1ad2      	subs	r2, r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	895b      	ldrh	r3, [r3, #10]
 800abbc:	4619      	mov	r1, r3
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	1acb      	subs	r3, r1, r3
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d306      	bcc.n	800abd4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	895b      	ldrh	r3, [r3, #10]
 800abca:	461a      	mov	r2, r3
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e005      	b.n	800abe0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	895b      	ldrh	r3, [r3, #10]
 800abd8:	461a      	mov	r2, r3
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	18d0      	adds	r0, r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	4413      	add	r3, r2
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4619      	mov	r1, r3
 800abf4:	f009 f9c2 	bl	8013f7c <memcpy>
    offset_to += len;
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	895b      	ldrh	r3, [r3, #10]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d906      	bls.n	800ac22 <pbuf_copy+0xb2>
 800ac14:	4b38      	ldr	r3, [pc, #224]	; (800acf8 <pbuf_copy+0x188>)
 800ac16:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ac1a:	493a      	ldr	r1, [pc, #232]	; (800ad04 <pbuf_copy+0x194>)
 800ac1c:	4838      	ldr	r0, [pc, #224]	; (800ad00 <pbuf_copy+0x190>)
 800ac1e:	f009 fa6d 	bl	80140fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	895b      	ldrh	r3, [r3, #10]
 800ac26:	461a      	mov	r2, r3
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d906      	bls.n	800ac3c <pbuf_copy+0xcc>
 800ac2e:	4b32      	ldr	r3, [pc, #200]	; (800acf8 <pbuf_copy+0x188>)
 800ac30:	f240 32da 	movw	r2, #986	; 0x3da
 800ac34:	4934      	ldr	r1, [pc, #208]	; (800ad08 <pbuf_copy+0x198>)
 800ac36:	4832      	ldr	r0, [pc, #200]	; (800ad00 <pbuf_copy+0x190>)
 800ac38:	f009 fa60 	bl	80140fc <iprintf>
    if (offset_from >= p_from->len) {
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	895b      	ldrh	r3, [r3, #10]
 800ac40:	461a      	mov	r2, r3
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d304      	bcc.n	800ac52 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	895b      	ldrh	r3, [r3, #10]
 800ac56:	461a      	mov	r2, r3
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d114      	bne.n	800ac88 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10c      	bne.n	800ac88 <pbuf_copy+0x118>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d009      	beq.n	800ac88 <pbuf_copy+0x118>
 800ac74:	4b20      	ldr	r3, [pc, #128]	; (800acf8 <pbuf_copy+0x188>)
 800ac76:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ac7a:	4924      	ldr	r1, [pc, #144]	; (800ad0c <pbuf_copy+0x19c>)
 800ac7c:	4820      	ldr	r0, [pc, #128]	; (800ad00 <pbuf_copy+0x190>)
 800ac7e:	f009 fa3d 	bl	80140fc <iprintf>
 800ac82:	f06f 030f 	mvn.w	r3, #15
 800ac86:	e032      	b.n	800acee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d013      	beq.n	800acb6 <pbuf_copy+0x146>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	895a      	ldrh	r2, [r3, #10]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	891b      	ldrh	r3, [r3, #8]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d10d      	bne.n	800acb6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d009      	beq.n	800acb6 <pbuf_copy+0x146>
 800aca2:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <pbuf_copy+0x188>)
 800aca4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800aca8:	4919      	ldr	r1, [pc, #100]	; (800ad10 <pbuf_copy+0x1a0>)
 800acaa:	4815      	ldr	r0, [pc, #84]	; (800ad00 <pbuf_copy+0x190>)
 800acac:	f009 fa26 	bl	80140fc <iprintf>
 800acb0:	f06f 0305 	mvn.w	r3, #5
 800acb4:	e01b      	b.n	800acee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d013      	beq.n	800ace4 <pbuf_copy+0x174>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	895a      	ldrh	r2, [r3, #10]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	891b      	ldrh	r3, [r3, #8]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d10d      	bne.n	800ace4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <pbuf_copy+0x174>
 800acd0:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <pbuf_copy+0x188>)
 800acd2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800acd6:	490e      	ldr	r1, [pc, #56]	; (800ad10 <pbuf_copy+0x1a0>)
 800acd8:	4809      	ldr	r0, [pc, #36]	; (800ad00 <pbuf_copy+0x190>)
 800acda:	f009 fa0f 	bl	80140fc <iprintf>
 800acde:	f06f 0305 	mvn.w	r3, #5
 800ace2:	e004      	b.n	800acee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f47f af61 	bne.w	800abae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	080155d8 	.word	0x080155d8
 800acfc:	08015880 	.word	0x08015880
 800ad00:	08015638 	.word	0x08015638
 800ad04:	080158b0 	.word	0x080158b0
 800ad08:	080158c8 	.word	0x080158c8
 800ad0c:	080158e4 	.word	0x080158e4
 800ad10:	080158f4 	.word	0x080158f4

0800ad14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	460b      	mov	r3, r1
 800ad24:	80fb      	strh	r3, [r7, #6]
 800ad26:	4613      	mov	r3, r2
 800ad28:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d108      	bne.n	800ad4a <pbuf_copy_partial+0x36>
 800ad38:	4b2b      	ldr	r3, [pc, #172]	; (800ade8 <pbuf_copy_partial+0xd4>)
 800ad3a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ad3e:	492b      	ldr	r1, [pc, #172]	; (800adec <pbuf_copy_partial+0xd8>)
 800ad40:	482b      	ldr	r0, [pc, #172]	; (800adf0 <pbuf_copy_partial+0xdc>)
 800ad42:	f009 f9db 	bl	80140fc <iprintf>
 800ad46:	2300      	movs	r3, #0
 800ad48:	e04a      	b.n	800ade0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d108      	bne.n	800ad62 <pbuf_copy_partial+0x4e>
 800ad50:	4b25      	ldr	r3, [pc, #148]	; (800ade8 <pbuf_copy_partial+0xd4>)
 800ad52:	f240 420b 	movw	r2, #1035	; 0x40b
 800ad56:	4927      	ldr	r1, [pc, #156]	; (800adf4 <pbuf_copy_partial+0xe0>)
 800ad58:	4825      	ldr	r0, [pc, #148]	; (800adf0 <pbuf_copy_partial+0xdc>)
 800ad5a:	f009 f9cf 	bl	80140fc <iprintf>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e03e      	b.n	800ade0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	61fb      	str	r3, [r7, #28]
 800ad66:	e034      	b.n	800add2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ad68:	88bb      	ldrh	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <pbuf_copy_partial+0x70>
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	895b      	ldrh	r3, [r3, #10]
 800ad72:	88ba      	ldrh	r2, [r7, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d305      	bcc.n	800ad84 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	895b      	ldrh	r3, [r3, #10]
 800ad7c:	88ba      	ldrh	r2, [r7, #4]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	80bb      	strh	r3, [r7, #4]
 800ad82:	e023      	b.n	800adcc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	895a      	ldrh	r2, [r3, #10]
 800ad88:	88bb      	ldrh	r3, [r7, #4]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ad8e:	8b3a      	ldrh	r2, [r7, #24]
 800ad90:	88fb      	ldrh	r3, [r7, #6]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d901      	bls.n	800ad9a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ad96:	88fb      	ldrh	r3, [r7, #6]
 800ad98:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ad9a:	8b7b      	ldrh	r3, [r7, #26]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	18d0      	adds	r0, r2, r3
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	88bb      	ldrh	r3, [r7, #4]
 800ada6:	4413      	add	r3, r2
 800ada8:	8b3a      	ldrh	r2, [r7, #24]
 800adaa:	4619      	mov	r1, r3
 800adac:	f009 f8e6 	bl	8013f7c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800adb0:	8afa      	ldrh	r2, [r7, #22]
 800adb2:	8b3b      	ldrh	r3, [r7, #24]
 800adb4:	4413      	add	r3, r2
 800adb6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800adb8:	8b7a      	ldrh	r2, [r7, #26]
 800adba:	8b3b      	ldrh	r3, [r7, #24]
 800adbc:	4413      	add	r3, r2
 800adbe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800adc0:	88fa      	ldrh	r2, [r7, #6]
 800adc2:	8b3b      	ldrh	r3, [r7, #24]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	61fb      	str	r3, [r7, #28]
 800add2:	88fb      	ldrh	r3, [r7, #6]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <pbuf_copy_partial+0xca>
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1c4      	bne.n	800ad68 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800adde:	8afb      	ldrh	r3, [r7, #22]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3720      	adds	r7, #32
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	080155d8 	.word	0x080155d8
 800adec:	08015920 	.word	0x08015920
 800adf0:	08015638 	.word	0x08015638
 800adf4:	08015940 	.word	0x08015940

0800adf8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	603a      	str	r2, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
 800ae04:	460b      	mov	r3, r1
 800ae06:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	8919      	ldrh	r1, [r3, #8]
 800ae0c:	88ba      	ldrh	r2, [r7, #4]
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff faa1 	bl	800a358 <pbuf_alloc>
 800ae16:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <pbuf_clone+0x2a>
    return NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e011      	b.n	800ae46 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f7ff fea3 	bl	800ab70 <pbuf_copy>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ae2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d006      	beq.n	800ae44 <pbuf_clone+0x4c>
 800ae36:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <pbuf_clone+0x58>)
 800ae38:	f240 5224 	movw	r2, #1316	; 0x524
 800ae3c:	4905      	ldr	r1, [pc, #20]	; (800ae54 <pbuf_clone+0x5c>)
 800ae3e:	4806      	ldr	r0, [pc, #24]	; (800ae58 <pbuf_clone+0x60>)
 800ae40:	f009 f95c 	bl	80140fc <iprintf>
  return q;
 800ae44:	68fb      	ldr	r3, [r7, #12]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	080155d8 	.word	0x080155d8
 800ae54:	08015a4c 	.word	0x08015a4c
 800ae58:	08015638 	.word	0x08015638

0800ae5c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ae60:	f009 f964 	bl	801412c <rand>
 800ae64:	4603      	mov	r3, r0
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	4b01      	ldr	r3, [pc, #4]	; (800ae7c <tcp_init+0x20>)
 800ae76:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ae78:	bf00      	nop
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	2000011c 	.word	0x2000011c

0800ae80 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7d1b      	ldrb	r3, [r3, #20]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d105      	bne.n	800ae9c <tcp_free+0x1c>
 800ae90:	4b06      	ldr	r3, [pc, #24]	; (800aeac <tcp_free+0x2c>)
 800ae92:	22d4      	movs	r2, #212	; 0xd4
 800ae94:	4906      	ldr	r1, [pc, #24]	; (800aeb0 <tcp_free+0x30>)
 800ae96:	4807      	ldr	r0, [pc, #28]	; (800aeb4 <tcp_free+0x34>)
 800ae98:	f009 f930 	bl	80140fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	2001      	movs	r0, #1
 800aea0:	f7fe ff2c 	bl	8009cfc <memp_free>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	08015ad8 	.word	0x08015ad8
 800aeb0:	08015b08 	.word	0x08015b08
 800aeb4:	08015b1c 	.word	0x08015b1c

0800aeb8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7d1b      	ldrb	r3, [r3, #20]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d105      	bne.n	800aed4 <tcp_free_listen+0x1c>
 800aec8:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <tcp_free_listen+0x2c>)
 800aeca:	22df      	movs	r2, #223	; 0xdf
 800aecc:	4906      	ldr	r1, [pc, #24]	; (800aee8 <tcp_free_listen+0x30>)
 800aece:	4807      	ldr	r0, [pc, #28]	; (800aeec <tcp_free_listen+0x34>)
 800aed0:	f009 f914 	bl	80140fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	2002      	movs	r0, #2
 800aed8:	f7fe ff10 	bl	8009cfc <memp_free>
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	08015ad8 	.word	0x08015ad8
 800aee8:	08015b44 	.word	0x08015b44
 800aeec:	08015b1c 	.word	0x08015b1c

0800aef0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800aef4:	f000 fea2 	bl	800bc3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800aef8:	4b07      	ldr	r3, [pc, #28]	; (800af18 <tcp_tmr+0x28>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	3301      	adds	r3, #1
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <tcp_tmr+0x28>)
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <tcp_tmr+0x28>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800af10:	f000 fb54 	bl	800b5bc <tcp_slowtmr>
  }
}
 800af14:	bf00      	nop
 800af16:	bd80      	pop	{r7, pc}
 800af18:	200003a9 	.word	0x200003a9

0800af1c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d105      	bne.n	800af38 <tcp_remove_listener+0x1c>
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <tcp_remove_listener+0x48>)
 800af2e:	22ff      	movs	r2, #255	; 0xff
 800af30:	490d      	ldr	r1, [pc, #52]	; (800af68 <tcp_remove_listener+0x4c>)
 800af32:	480e      	ldr	r0, [pc, #56]	; (800af6c <tcp_remove_listener+0x50>)
 800af34:	f009 f8e2 	bl	80140fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e00a      	b.n	800af54 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	429a      	cmp	r2, r3
 800af46:	d102      	bne.n	800af4e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1f1      	bne.n	800af3e <tcp_remove_listener+0x22>
    }
  }
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	08015ad8 	.word	0x08015ad8
 800af68:	08015b60 	.word	0x08015b60
 800af6c:	08015b1c 	.word	0x08015b1c

0800af70 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <tcp_listen_closed+0x1c>
 800af7e:	4b14      	ldr	r3, [pc, #80]	; (800afd0 <tcp_listen_closed+0x60>)
 800af80:	f240 1211 	movw	r2, #273	; 0x111
 800af84:	4913      	ldr	r1, [pc, #76]	; (800afd4 <tcp_listen_closed+0x64>)
 800af86:	4814      	ldr	r0, [pc, #80]	; (800afd8 <tcp_listen_closed+0x68>)
 800af88:	f009 f8b8 	bl	80140fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7d1b      	ldrb	r3, [r3, #20]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d006      	beq.n	800afa2 <tcp_listen_closed+0x32>
 800af94:	4b0e      	ldr	r3, [pc, #56]	; (800afd0 <tcp_listen_closed+0x60>)
 800af96:	f44f 7289 	mov.w	r2, #274	; 0x112
 800af9a:	4910      	ldr	r1, [pc, #64]	; (800afdc <tcp_listen_closed+0x6c>)
 800af9c:	480e      	ldr	r0, [pc, #56]	; (800afd8 <tcp_listen_closed+0x68>)
 800af9e:	f009 f8ad 	bl	80140fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800afa2:	2301      	movs	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	e00b      	b.n	800afc0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <tcp_listen_closed+0x70>)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff ffb1 	bl	800af1c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d9f0      	bls.n	800afa8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800afc6:	bf00      	nop
 800afc8:	bf00      	nop
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	08015ad8 	.word	0x08015ad8
 800afd4:	08015b88 	.word	0x08015b88
 800afd8:	08015b1c 	.word	0x08015b1c
 800afdc:	08015b94 	.word	0x08015b94
 800afe0:	08017af4 	.word	0x08017af4

0800afe4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800afe4:	b5b0      	push	{r4, r5, r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af04      	add	r7, sp, #16
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <tcp_close_shutdown+0x20>
 800aff6:	4b63      	ldr	r3, [pc, #396]	; (800b184 <tcp_close_shutdown+0x1a0>)
 800aff8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800affc:	4962      	ldr	r1, [pc, #392]	; (800b188 <tcp_close_shutdown+0x1a4>)
 800affe:	4863      	ldr	r0, [pc, #396]	; (800b18c <tcp_close_shutdown+0x1a8>)
 800b000:	f009 f87c 	bl	80140fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d066      	beq.n	800b0d8 <tcp_close_shutdown+0xf4>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	7d1b      	ldrb	r3, [r3, #20]
 800b00e:	2b04      	cmp	r3, #4
 800b010:	d003      	beq.n	800b01a <tcp_close_shutdown+0x36>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	7d1b      	ldrb	r3, [r3, #20]
 800b016:	2b07      	cmp	r3, #7
 800b018:	d15e      	bne.n	800b0d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d104      	bne.n	800b02c <tcp_close_shutdown+0x48>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b026:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b02a:	d055      	beq.n	800b0d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	8b5b      	ldrh	r3, [r3, #26]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	2b00      	cmp	r3, #0
 800b036:	d106      	bne.n	800b046 <tcp_close_shutdown+0x62>
 800b038:	4b52      	ldr	r3, [pc, #328]	; (800b184 <tcp_close_shutdown+0x1a0>)
 800b03a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b03e:	4954      	ldr	r1, [pc, #336]	; (800b190 <tcp_close_shutdown+0x1ac>)
 800b040:	4852      	ldr	r0, [pc, #328]	; (800b18c <tcp_close_shutdown+0x1a8>)
 800b042:	f009 f85b 	bl	80140fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b04e:	687d      	ldr	r5, [r7, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3304      	adds	r3, #4
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	8ad2      	ldrh	r2, [r2, #22]
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	8b09      	ldrh	r1, [r1, #24]
 800b05c:	9102      	str	r1, [sp, #8]
 800b05e:	9201      	str	r2, [sp, #4]
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	462b      	mov	r3, r5
 800b064:	4622      	mov	r2, r4
 800b066:	4601      	mov	r1, r0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f004 fe8d 	bl	800fd88 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 f8c6 	bl	800c200 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b074:	4b47      	ldr	r3, [pc, #284]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d105      	bne.n	800b08a <tcp_close_shutdown+0xa6>
 800b07e:	4b45      	ldr	r3, [pc, #276]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	4a43      	ldr	r2, [pc, #268]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	e013      	b.n	800b0b2 <tcp_close_shutdown+0xce>
 800b08a:	4b42      	ldr	r3, [pc, #264]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e00c      	b.n	800b0ac <tcp_close_shutdown+0xc8>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d104      	bne.n	800b0a6 <tcp_close_shutdown+0xc2>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68da      	ldr	r2, [r3, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	60da      	str	r2, [r3, #12]
 800b0a4:	e005      	b.n	800b0b2 <tcp_close_shutdown+0xce>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1ef      	bne.n	800b092 <tcp_close_shutdown+0xae>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	60da      	str	r2, [r3, #12]
 800b0b8:	4b37      	ldr	r3, [pc, #220]	; (800b198 <tcp_close_shutdown+0x1b4>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <tcp_close_shutdown+0x1b8>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d102      	bne.n	800b0ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b0c8:	f003 fd5a 	bl	800eb80 <tcp_trigger_input_pcb_close>
 800b0cc:	e002      	b.n	800b0d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff fed6 	bl	800ae80 <tcp_free>
      }
      return ERR_OK;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e050      	b.n	800b17a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7d1b      	ldrb	r3, [r3, #20]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d03b      	beq.n	800b158 <tcp_close_shutdown+0x174>
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	dc44      	bgt.n	800b16e <tcp_close_shutdown+0x18a>
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <tcp_close_shutdown+0x10a>
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d02a      	beq.n	800b142 <tcp_close_shutdown+0x15e>
 800b0ec:	e03f      	b.n	800b16e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	8adb      	ldrh	r3, [r3, #22]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d021      	beq.n	800b13a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b0f6:	4b2a      	ldr	r3, [pc, #168]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d105      	bne.n	800b10c <tcp_close_shutdown+0x128>
 800b100:	4b27      	ldr	r3, [pc, #156]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	4a26      	ldr	r2, [pc, #152]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	e013      	b.n	800b134 <tcp_close_shutdown+0x150>
 800b10c:	4b24      	ldr	r3, [pc, #144]	; (800b1a0 <tcp_close_shutdown+0x1bc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60bb      	str	r3, [r7, #8]
 800b112:	e00c      	b.n	800b12e <tcp_close_shutdown+0x14a>
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d104      	bne.n	800b128 <tcp_close_shutdown+0x144>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	60da      	str	r2, [r3, #12]
 800b126:	e005      	b.n	800b134 <tcp_close_shutdown+0x150>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	60bb      	str	r3, [r7, #8]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1ef      	bne.n	800b114 <tcp_close_shutdown+0x130>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fea0 	bl	800ae80 <tcp_free>
      break;
 800b140:	e01a      	b.n	800b178 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff ff14 	bl	800af70 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4816      	ldr	r0, [pc, #88]	; (800b1a4 <tcp_close_shutdown+0x1c0>)
 800b14c:	f001 f8a8 	bl	800c2a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff feb1 	bl	800aeb8 <tcp_free_listen>
      break;
 800b156:	e00f      	b.n	800b178 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	480e      	ldr	r0, [pc, #56]	; (800b194 <tcp_close_shutdown+0x1b0>)
 800b15c:	f001 f8a0 	bl	800c2a0 <tcp_pcb_remove>
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <tcp_close_shutdown+0x1b4>)
 800b162:	2201      	movs	r2, #1
 800b164:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7ff fe8a 	bl	800ae80 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b16c:	e004      	b.n	800b178 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f81a 	bl	800b1a8 <tcp_close_shutdown_fin>
 800b174:	4603      	mov	r3, r0
 800b176:	e000      	b.n	800b17a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bdb0      	pop	{r4, r5, r7, pc}
 800b182:	bf00      	nop
 800b184:	08015ad8 	.word	0x08015ad8
 800b188:	08015bac 	.word	0x08015bac
 800b18c:	08015b1c 	.word	0x08015b1c
 800b190:	08015bcc 	.word	0x08015bcc
 800b194:	20006ce0 	.word	0x20006ce0
 800b198:	20006cdc 	.word	0x20006cdc
 800b19c:	20006cf4 	.word	0x20006cf4
 800b1a0:	20006cec 	.word	0x20006cec
 800b1a4:	20006ce8 	.word	0x20006ce8

0800b1a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <tcp_close_shutdown_fin+0x1c>
 800b1b6:	4b2e      	ldr	r3, [pc, #184]	; (800b270 <tcp_close_shutdown_fin+0xc8>)
 800b1b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b1bc:	492d      	ldr	r1, [pc, #180]	; (800b274 <tcp_close_shutdown_fin+0xcc>)
 800b1be:	482e      	ldr	r0, [pc, #184]	; (800b278 <tcp_close_shutdown_fin+0xd0>)
 800b1c0:	f008 ff9c 	bl	80140fc <iprintf>

  switch (pcb->state) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7d1b      	ldrb	r3, [r3, #20]
 800b1c8:	2b07      	cmp	r3, #7
 800b1ca:	d020      	beq.n	800b20e <tcp_close_shutdown_fin+0x66>
 800b1cc:	2b07      	cmp	r3, #7
 800b1ce:	dc2b      	bgt.n	800b228 <tcp_close_shutdown_fin+0x80>
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d002      	beq.n	800b1da <tcp_close_shutdown_fin+0x32>
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d00d      	beq.n	800b1f4 <tcp_close_shutdown_fin+0x4c>
 800b1d8:	e026      	b.n	800b228 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f003 fee2 	bl	800efa4 <tcp_send_fin>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d11f      	bne.n	800b22c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2205      	movs	r2, #5
 800b1f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b1f2:	e01b      	b.n	800b22c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f003 fed5 	bl	800efa4 <tcp_send_fin>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d114      	bne.n	800b230 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2205      	movs	r2, #5
 800b20a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b20c:	e010      	b.n	800b230 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f003 fec8 	bl	800efa4 <tcp_send_fin>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d109      	bne.n	800b234 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2209      	movs	r2, #9
 800b224:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b226:	e005      	b.n	800b234 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	e01c      	b.n	800b266 <tcp_close_shutdown_fin+0xbe>
      break;
 800b22c:	bf00      	nop
 800b22e:	e002      	b.n	800b236 <tcp_close_shutdown_fin+0x8e>
      break;
 800b230:	bf00      	nop
 800b232:	e000      	b.n	800b236 <tcp_close_shutdown_fin+0x8e>
      break;
 800b234:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d103      	bne.n	800b246 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f003 ffee 	bl	800f220 <tcp_output>
 800b244:	e00d      	b.n	800b262 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24e:	d108      	bne.n	800b262 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	8b5b      	ldrh	r3, [r3, #26]
 800b254:	f043 0308 	orr.w	r3, r3, #8
 800b258:	b29a      	uxth	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	e001      	b.n	800b266 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	08015ad8 	.word	0x08015ad8
 800b274:	08015b88 	.word	0x08015b88
 800b278:	08015b1c 	.word	0x08015b1c

0800b27c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <tcp_close+0x22>
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <tcp_close+0x4c>)
 800b28c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b290:	490e      	ldr	r1, [pc, #56]	; (800b2cc <tcp_close+0x50>)
 800b292:	480f      	ldr	r0, [pc, #60]	; (800b2d0 <tcp_close+0x54>)
 800b294:	f008 ff32 	bl	80140fc <iprintf>
 800b298:	f06f 030f 	mvn.w	r3, #15
 800b29c:	e00f      	b.n	800b2be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7d1b      	ldrb	r3, [r3, #20]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d006      	beq.n	800b2b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8b5b      	ldrh	r3, [r3, #26]
 800b2aa:	f043 0310 	orr.w	r3, r3, #16
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7ff fe94 	bl	800afe4 <tcp_close_shutdown>
 800b2bc:	4603      	mov	r3, r0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	08015ad8 	.word	0x08015ad8
 800b2cc:	08015be8 	.word	0x08015be8
 800b2d0:	08015b1c 	.word	0x08015b1c

0800b2d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b08e      	sub	sp, #56	; 0x38
 800b2d8:	af04      	add	r7, sp, #16
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d107      	bne.n	800b2f4 <tcp_abandon+0x20>
 800b2e4:	4b52      	ldr	r3, [pc, #328]	; (800b430 <tcp_abandon+0x15c>)
 800b2e6:	f240 223d 	movw	r2, #573	; 0x23d
 800b2ea:	4952      	ldr	r1, [pc, #328]	; (800b434 <tcp_abandon+0x160>)
 800b2ec:	4852      	ldr	r0, [pc, #328]	; (800b438 <tcp_abandon+0x164>)
 800b2ee:	f008 ff05 	bl	80140fc <iprintf>
 800b2f2:	e099      	b.n	800b428 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7d1b      	ldrb	r3, [r3, #20]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d106      	bne.n	800b30a <tcp_abandon+0x36>
 800b2fc:	4b4c      	ldr	r3, [pc, #304]	; (800b430 <tcp_abandon+0x15c>)
 800b2fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b302:	494e      	ldr	r1, [pc, #312]	; (800b43c <tcp_abandon+0x168>)
 800b304:	484c      	ldr	r0, [pc, #304]	; (800b438 <tcp_abandon+0x164>)
 800b306:	f008 fef9 	bl	80140fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	7d1b      	ldrb	r3, [r3, #20]
 800b30e:	2b0a      	cmp	r3, #10
 800b310:	d107      	bne.n	800b322 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	484a      	ldr	r0, [pc, #296]	; (800b440 <tcp_abandon+0x16c>)
 800b316:	f000 ffc3 	bl	800c2a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fdb0 	bl	800ae80 <tcp_free>
 800b320:	e082      	b.n	800b428 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	7d1b      	ldrb	r3, [r3, #20]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d126      	bne.n	800b39a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	8adb      	ldrh	r3, [r3, #22]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d02e      	beq.n	800b3b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b354:	4b3b      	ldr	r3, [pc, #236]	; (800b444 <tcp_abandon+0x170>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d105      	bne.n	800b36a <tcp_abandon+0x96>
 800b35e:	4b39      	ldr	r3, [pc, #228]	; (800b444 <tcp_abandon+0x170>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	4a37      	ldr	r2, [pc, #220]	; (800b444 <tcp_abandon+0x170>)
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	e013      	b.n	800b392 <tcp_abandon+0xbe>
 800b36a:	4b36      	ldr	r3, [pc, #216]	; (800b444 <tcp_abandon+0x170>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	61fb      	str	r3, [r7, #28]
 800b370:	e00c      	b.n	800b38c <tcp_abandon+0xb8>
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d104      	bne.n	800b386 <tcp_abandon+0xb2>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68da      	ldr	r2, [r3, #12]
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	60da      	str	r2, [r3, #12]
 800b384:	e005      	b.n	800b392 <tcp_abandon+0xbe>
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	61fb      	str	r3, [r7, #28]
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1ef      	bne.n	800b372 <tcp_abandon+0x9e>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	60da      	str	r2, [r3, #12]
 800b398:	e00b      	b.n	800b3b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	8adb      	ldrh	r3, [r3, #22]
 800b3a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	4828      	ldr	r0, [pc, #160]	; (800b448 <tcp_abandon+0x174>)
 800b3a8:	f000 ff7a 	bl	800c2a0 <tcp_pcb_remove>
 800b3ac:	4b27      	ldr	r3, [pc, #156]	; (800b44c <tcp_abandon+0x178>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fd1c 	bl	800bdfc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d004      	beq.n	800b3d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 fd13 	bl	800bdfc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 fd0a 	bl	800bdfc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00e      	beq.n	800b40c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	8b12      	ldrh	r2, [r2, #24]
 800b3f8:	9202      	str	r2, [sp, #8]
 800b3fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b3fc:	9201      	str	r2, [sp, #4]
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	460b      	mov	r3, r1
 800b402:	697a      	ldr	r2, [r7, #20]
 800b404:	69b9      	ldr	r1, [r7, #24]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f004 fcbe 	bl	800fd88 <tcp_rst>
    }
    last_state = pcb->state;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7d1b      	ldrb	r3, [r3, #20]
 800b410:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fd34 	bl	800ae80 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <tcp_abandon+0x154>
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	f06f 010c 	mvn.w	r1, #12
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	4798      	blx	r3
  }
}
 800b428:	3728      	adds	r7, #40	; 0x28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	08015ad8 	.word	0x08015ad8
 800b434:	08015c1c 	.word	0x08015c1c
 800b438:	08015b1c 	.word	0x08015b1c
 800b43c:	08015c38 	.word	0x08015c38
 800b440:	20006cf0 	.word	0x20006cf0
 800b444:	20006cec 	.word	0x20006cec
 800b448:	20006ce0 	.word	0x20006ce0
 800b44c:	20006cdc 	.word	0x20006cdc

0800b450 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b458:	2101      	movs	r1, #1
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff ff3a 	bl	800b2d4 <tcp_abandon>
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <tcp_update_rcv_ann_wnd+0x1c>
 800b476:	4b25      	ldr	r3, [pc, #148]	; (800b50c <tcp_update_rcv_ann_wnd+0xa4>)
 800b478:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b47c:	4924      	ldr	r1, [pc, #144]	; (800b510 <tcp_update_rcv_ann_wnd+0xa8>)
 800b47e:	4825      	ldr	r0, [pc, #148]	; (800b514 <tcp_update_rcv_ann_wnd+0xac>)
 800b480:	f008 fe3c 	bl	80140fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b48c:	4413      	add	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b498:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b49c:	bf28      	it	cs
 800b49e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	4413      	add	r3, r2
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	db08      	blt.n	800b4c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	e020      	b.n	800b502 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c8:	1ad3      	subs	r3, r2, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	dd03      	ble.n	800b4d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4d4:	e014      	b.n	800b500 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e8:	d306      	bcc.n	800b4f8 <tcp_update_rcv_ann_wnd+0x90>
 800b4ea:	4b08      	ldr	r3, [pc, #32]	; (800b50c <tcp_update_rcv_ann_wnd+0xa4>)
 800b4ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b4f0:	4909      	ldr	r1, [pc, #36]	; (800b518 <tcp_update_rcv_ann_wnd+0xb0>)
 800b4f2:	4808      	ldr	r0, [pc, #32]	; (800b514 <tcp_update_rcv_ann_wnd+0xac>)
 800b4f4:	f008 fe02 	bl	80140fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b500:	2300      	movs	r3, #0
  }
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	08015ad8 	.word	0x08015ad8
 800b510:	08015d34 	.word	0x08015d34
 800b514:	08015b1c 	.word	0x08015b1c
 800b518:	08015d58 	.word	0x08015d58

0800b51c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d107      	bne.n	800b53e <tcp_recved+0x22>
 800b52e:	4b1f      	ldr	r3, [pc, #124]	; (800b5ac <tcp_recved+0x90>)
 800b530:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b534:	491e      	ldr	r1, [pc, #120]	; (800b5b0 <tcp_recved+0x94>)
 800b536:	481f      	ldr	r0, [pc, #124]	; (800b5b4 <tcp_recved+0x98>)
 800b538:	f008 fde0 	bl	80140fc <iprintf>
 800b53c:	e032      	b.n	800b5a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	7d1b      	ldrb	r3, [r3, #20]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d106      	bne.n	800b554 <tcp_recved+0x38>
 800b546:	4b19      	ldr	r3, [pc, #100]	; (800b5ac <tcp_recved+0x90>)
 800b548:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b54c:	491a      	ldr	r1, [pc, #104]	; (800b5b8 <tcp_recved+0x9c>)
 800b54e:	4819      	ldr	r0, [pc, #100]	; (800b5b4 <tcp_recved+0x98>)
 800b550:	f008 fdd4 	bl	80140fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b558:	887b      	ldrh	r3, [r7, #2]
 800b55a:	4413      	add	r3, r2
 800b55c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b55e:	89fb      	ldrh	r3, [r7, #14]
 800b560:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b564:	d804      	bhi.n	800b570 <tcp_recved+0x54>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56a:	89fa      	ldrh	r2, [r7, #14]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d204      	bcs.n	800b57a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b576:	851a      	strh	r2, [r3, #40]	; 0x28
 800b578:	e002      	b.n	800b580 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	89fa      	ldrh	r2, [r7, #14]
 800b57e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff ff71 	bl	800b468 <tcp_update_rcv_ann_wnd>
 800b586:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b58e:	d309      	bcc.n	800b5a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	8b5b      	ldrh	r3, [r3, #26]
 800b594:	f043 0302 	orr.w	r3, r3, #2
 800b598:	b29a      	uxth	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f003 fe3e 	bl	800f220 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	08015ad8 	.word	0x08015ad8
 800b5b0:	08015d74 	.word	0x08015d74
 800b5b4:	08015b1c 	.word	0x08015b1c
 800b5b8:	08015d8c 	.word	0x08015d8c

0800b5bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b5bc:	b5b0      	push	{r4, r5, r7, lr}
 800b5be:	b090      	sub	sp, #64	; 0x40
 800b5c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b5c8:	4b94      	ldr	r3, [pc, #592]	; (800b81c <tcp_slowtmr+0x260>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	4a93      	ldr	r2, [pc, #588]	; (800b81c <tcp_slowtmr+0x260>)
 800b5d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b5d2:	4b93      	ldr	r3, [pc, #588]	; (800b820 <tcp_slowtmr+0x264>)
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b91      	ldr	r3, [pc, #580]	; (800b820 <tcp_slowtmr+0x264>)
 800b5dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b5e2:	4b90      	ldr	r3, [pc, #576]	; (800b824 <tcp_slowtmr+0x268>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b5e8:	e29d      	b.n	800bb26 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <tcp_slowtmr+0x44>
 800b5f2:	4b8d      	ldr	r3, [pc, #564]	; (800b828 <tcp_slowtmr+0x26c>)
 800b5f4:	f240 42be 	movw	r2, #1214	; 0x4be
 800b5f8:	498c      	ldr	r1, [pc, #560]	; (800b82c <tcp_slowtmr+0x270>)
 800b5fa:	488d      	ldr	r0, [pc, #564]	; (800b830 <tcp_slowtmr+0x274>)
 800b5fc:	f008 fd7e 	bl	80140fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	7d1b      	ldrb	r3, [r3, #20]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d106      	bne.n	800b616 <tcp_slowtmr+0x5a>
 800b608:	4b87      	ldr	r3, [pc, #540]	; (800b828 <tcp_slowtmr+0x26c>)
 800b60a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b60e:	4989      	ldr	r1, [pc, #548]	; (800b834 <tcp_slowtmr+0x278>)
 800b610:	4887      	ldr	r0, [pc, #540]	; (800b830 <tcp_slowtmr+0x274>)
 800b612:	f008 fd73 	bl	80140fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	7d1b      	ldrb	r3, [r3, #20]
 800b61a:	2b0a      	cmp	r3, #10
 800b61c:	d106      	bne.n	800b62c <tcp_slowtmr+0x70>
 800b61e:	4b82      	ldr	r3, [pc, #520]	; (800b828 <tcp_slowtmr+0x26c>)
 800b620:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b624:	4984      	ldr	r1, [pc, #528]	; (800b838 <tcp_slowtmr+0x27c>)
 800b626:	4882      	ldr	r0, [pc, #520]	; (800b830 <tcp_slowtmr+0x274>)
 800b628:	f008 fd68 	bl	80140fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	7f9a      	ldrb	r2, [r3, #30]
 800b630:	4b7b      	ldr	r3, [pc, #492]	; (800b820 <tcp_slowtmr+0x264>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	429a      	cmp	r2, r3
 800b636:	d105      	bne.n	800b644 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b642:	e270      	b.n	800bb26 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b644:	4b76      	ldr	r3, [pc, #472]	; (800b820 <tcp_slowtmr+0x264>)
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	7d1b      	ldrb	r3, [r3, #20]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d10a      	bne.n	800b676 <tcp_slowtmr+0xba>
 800b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b662:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b666:	2b05      	cmp	r3, #5
 800b668:	d905      	bls.n	800b676 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b66a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b66e:	3301      	adds	r3, #1
 800b670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b674:	e11e      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b67c:	2b0b      	cmp	r3, #11
 800b67e:	d905      	bls.n	800b68c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b684:	3301      	adds	r3, #1
 800b686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b68a:	e113      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b692:	2b00      	cmp	r3, #0
 800b694:	d075      	beq.n	800b782 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d006      	beq.n	800b6ac <tcp_slowtmr+0xf0>
 800b69e:	4b62      	ldr	r3, [pc, #392]	; (800b828 <tcp_slowtmr+0x26c>)
 800b6a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b6a4:	4965      	ldr	r1, [pc, #404]	; (800b83c <tcp_slowtmr+0x280>)
 800b6a6:	4862      	ldr	r0, [pc, #392]	; (800b830 <tcp_slowtmr+0x274>)
 800b6a8:	f008 fd28 	bl	80140fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d106      	bne.n	800b6c2 <tcp_slowtmr+0x106>
 800b6b4:	4b5c      	ldr	r3, [pc, #368]	; (800b828 <tcp_slowtmr+0x26c>)
 800b6b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b6ba:	4961      	ldr	r1, [pc, #388]	; (800b840 <tcp_slowtmr+0x284>)
 800b6bc:	485c      	ldr	r0, [pc, #368]	; (800b830 <tcp_slowtmr+0x274>)
 800b6be:	f008 fd1d 	bl	80140fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b6c8:	2b0b      	cmp	r3, #11
 800b6ca:	d905      	bls.n	800b6d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6d6:	e0ed      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	4a58      	ldr	r2, [pc, #352]	; (800b844 <tcp_slowtmr+0x288>)
 800b6e2:	5cd3      	ldrb	r3, [r2, r3]
 800b6e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6ec:	7c7a      	ldrb	r2, [r7, #17]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d907      	bls.n	800b702 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b708:	7c7a      	ldrb	r2, [r7, #17]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	f200 80d2 	bhi.w	800b8b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b710:	2301      	movs	r3, #1
 800b712:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d108      	bne.n	800b730 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b720:	f004 fc26 	bl	800ff70 <tcp_zero_window_probe>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d014      	beq.n	800b754 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b72a:	2300      	movs	r3, #0
 800b72c:	623b      	str	r3, [r7, #32]
 800b72e:	e011      	b.n	800b754 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b736:	4619      	mov	r1, r3
 800b738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b73a:	f003 faeb 	bl	800ed14 <tcp_split_unsent_seg>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d107      	bne.n	800b754 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b746:	f003 fd6b 	bl	800f220 <tcp_output>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 80ac 	beq.w	800b8b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b766:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b76a:	2b06      	cmp	r3, #6
 800b76c:	f200 80a2 	bhi.w	800b8b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b772:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b776:	3301      	adds	r3, #1
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b780:	e098      	b.n	800b8b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b788:	2b00      	cmp	r3, #0
 800b78a:	db0f      	blt.n	800b7ac <tcp_slowtmr+0x1f0>
 800b78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b792:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b796:	4293      	cmp	r3, r2
 800b798:	d008      	beq.n	800b7ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	b21a      	sxth	r2, r3
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	db7b      	blt.n	800b8b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b7bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7be:	f004 f821 	bl	800f804 <tcp_rexmit_rto_prepare>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <tcp_slowtmr+0x21c>
 800b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d171      	bne.n	800b8b4 <tcp_slowtmr+0x2f8>
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d06d      	beq.n	800b8b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	7d1b      	ldrb	r3, [r3, #20]
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	d03a      	beq.n	800b856 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7e6:	2b0c      	cmp	r3, #12
 800b7e8:	bf28      	it	cs
 800b7ea:	230c      	movcs	r3, #12
 800b7ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b7f4:	10db      	asrs	r3, r3, #3
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b800:	4413      	add	r3, r2
 800b802:	7efa      	ldrb	r2, [r7, #27]
 800b804:	4910      	ldr	r1, [pc, #64]	; (800b848 <tcp_slowtmr+0x28c>)
 800b806:	5c8a      	ldrb	r2, [r1, r2]
 800b808:	4093      	lsls	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b812:	4293      	cmp	r3, r2
 800b814:	dc1a      	bgt.n	800b84c <tcp_slowtmr+0x290>
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	b21a      	sxth	r2, r3
 800b81a:	e019      	b.n	800b850 <tcp_slowtmr+0x294>
 800b81c:	20006ce4 	.word	0x20006ce4
 800b820:	200003aa 	.word	0x200003aa
 800b824:	20006ce0 	.word	0x20006ce0
 800b828:	08015ad8 	.word	0x08015ad8
 800b82c:	08015e1c 	.word	0x08015e1c
 800b830:	08015b1c 	.word	0x08015b1c
 800b834:	08015e48 	.word	0x08015e48
 800b838:	08015e74 	.word	0x08015e74
 800b83c:	08015ea4 	.word	0x08015ea4
 800b840:	08015ed8 	.word	0x08015ed8
 800b844:	08017aec 	.word	0x08017aec
 800b848:	08017adc 	.word	0x08017adc
 800b84c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	2200      	movs	r2, #0
 800b85a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b868:	4293      	cmp	r3, r2
 800b86a:	bf28      	it	cs
 800b86c:	4613      	movcs	r3, r2
 800b86e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b870:	8a7b      	ldrh	r3, [r7, #18]
 800b872:	085b      	lsrs	r3, r3, #1
 800b874:	b29a      	uxth	r2, r3
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b886:	005b      	lsls	r3, r3, #1
 800b888:	b29b      	uxth	r3, r3
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d206      	bcs.n	800b89c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	b29a      	uxth	r2, r3
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8b0:	f004 f818 	bl	800f8e4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b6:	7d1b      	ldrb	r3, [r3, #20]
 800b8b8:	2b06      	cmp	r3, #6
 800b8ba:	d111      	bne.n	800b8e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	8b5b      	ldrh	r3, [r3, #26]
 800b8c0:	f003 0310 	and.w	r3, r3, #16
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00b      	beq.n	800b8e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8c8:	4b9c      	ldr	r3, [pc, #624]	; (800bb3c <tcp_slowtmr+0x580>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b28      	cmp	r3, #40	; 0x28
 800b8d4:	d904      	bls.n	800b8e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8da:	3301      	adds	r3, #1
 800b8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e2:	7a5b      	ldrb	r3, [r3, #9]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d04a      	beq.n	800b982 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b8f0:	2b04      	cmp	r3, #4
 800b8f2:	d003      	beq.n	800b8fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b8f8:	2b07      	cmp	r3, #7
 800b8fa:	d142      	bne.n	800b982 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8fc:	4b8f      	ldr	r3, [pc, #572]	; (800bb3c <tcp_slowtmr+0x580>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b908:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b90c:	4b8c      	ldr	r3, [pc, #560]	; (800bb40 <tcp_slowtmr+0x584>)
 800b90e:	440b      	add	r3, r1
 800b910:	498c      	ldr	r1, [pc, #560]	; (800bb44 <tcp_slowtmr+0x588>)
 800b912:	fba1 1303 	umull	r1, r3, r1, r3
 800b916:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b918:	429a      	cmp	r2, r3
 800b91a:	d90a      	bls.n	800b932 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b920:	3301      	adds	r3, #1
 800b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b92a:	3301      	adds	r3, #1
 800b92c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b930:	e027      	b.n	800b982 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b932:	4b82      	ldr	r3, [pc, #520]	; (800bb3c <tcp_slowtmr+0x580>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b948:	4618      	mov	r0, r3
 800b94a:	4b7f      	ldr	r3, [pc, #508]	; (800bb48 <tcp_slowtmr+0x58c>)
 800b94c:	fb03 f300 	mul.w	r3, r3, r0
 800b950:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b952:	497c      	ldr	r1, [pc, #496]	; (800bb44 <tcp_slowtmr+0x588>)
 800b954:	fba1 1303 	umull	r1, r3, r1, r3
 800b958:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d911      	bls.n	800b982 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800b95e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b960:	f004 fac6 	bl	800fef0 <tcp_keepalive>
 800b964:	4603      	mov	r3, r0
 800b966:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b96a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d107      	bne.n	800b982 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800b972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b974:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b978:	3301      	adds	r3, #1
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b986:	2b00      	cmp	r3, #0
 800b988:	d011      	beq.n	800b9ae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b98a:	4b6c      	ldr	r3, [pc, #432]	; (800bb3c <tcp_slowtmr+0x580>)
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	1ad2      	subs	r2, r2, r3
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b99a:	4619      	mov	r1, r3
 800b99c:	460b      	mov	r3, r1
 800b99e:	005b      	lsls	r3, r3, #1
 800b9a0:	440b      	add	r3, r1
 800b9a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d302      	bcc.n	800b9ae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b9a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9aa:	f000 fddd 	bl	800c568 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	7d1b      	ldrb	r3, [r3, #20]
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d10b      	bne.n	800b9ce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b9b6:	4b61      	ldr	r3, [pc, #388]	; (800bb3c <tcp_slowtmr+0x580>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	2b28      	cmp	r3, #40	; 0x28
 800b9c2:	d904      	bls.n	800b9ce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d0:	7d1b      	ldrb	r3, [r3, #20]
 800b9d2:	2b09      	cmp	r3, #9
 800b9d4:	d10b      	bne.n	800b9ee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b9d6:	4b59      	ldr	r3, [pc, #356]	; (800bb3c <tcp_slowtmr+0x580>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2bf0      	cmp	r3, #240	; 0xf0
 800b9e2:	d904      	bls.n	800b9ee <tcp_slowtmr+0x432>
        ++pcb_remove;
 800b9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d060      	beq.n	800bab8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b9fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba00:	f000 fbfe 	bl	800c200 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d010      	beq.n	800ba2c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ba0a:	4b50      	ldr	r3, [pc, #320]	; (800bb4c <tcp_slowtmr+0x590>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d106      	bne.n	800ba22 <tcp_slowtmr+0x466>
 800ba14:	4b4e      	ldr	r3, [pc, #312]	; (800bb50 <tcp_slowtmr+0x594>)
 800ba16:	f240 526d 	movw	r2, #1389	; 0x56d
 800ba1a:	494e      	ldr	r1, [pc, #312]	; (800bb54 <tcp_slowtmr+0x598>)
 800ba1c:	484e      	ldr	r0, [pc, #312]	; (800bb58 <tcp_slowtmr+0x59c>)
 800ba1e:	f008 fb6d 	bl	80140fc <iprintf>
        prev->next = pcb->next;
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	68da      	ldr	r2, [r3, #12]
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	60da      	str	r2, [r3, #12]
 800ba2a:	e00f      	b.n	800ba4c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ba2c:	4b47      	ldr	r3, [pc, #284]	; (800bb4c <tcp_slowtmr+0x590>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d006      	beq.n	800ba44 <tcp_slowtmr+0x488>
 800ba36:	4b46      	ldr	r3, [pc, #280]	; (800bb50 <tcp_slowtmr+0x594>)
 800ba38:	f240 5271 	movw	r2, #1393	; 0x571
 800ba3c:	4947      	ldr	r1, [pc, #284]	; (800bb5c <tcp_slowtmr+0x5a0>)
 800ba3e:	4846      	ldr	r0, [pc, #280]	; (800bb58 <tcp_slowtmr+0x59c>)
 800ba40:	f008 fb5c 	bl	80140fc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	4a40      	ldr	r2, [pc, #256]	; (800bb4c <tcp_slowtmr+0x590>)
 800ba4a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ba4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d013      	beq.n	800ba7c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ba5c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ba5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba60:	3304      	adds	r3, #4
 800ba62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba64:	8ad2      	ldrh	r2, [r2, #22]
 800ba66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba68:	8b09      	ldrh	r1, [r1, #24]
 800ba6a:	9102      	str	r1, [sp, #8]
 800ba6c:	9201      	str	r2, [sp, #4]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	462b      	mov	r3, r5
 800ba72:	4622      	mov	r2, r4
 800ba74:	4601      	mov	r1, r0
 800ba76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba78:	f004 f986 	bl	800fd88 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	7d1b      	ldrb	r3, [r3, #20]
 800ba86:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ba92:	6838      	ldr	r0, [r7, #0]
 800ba94:	f7ff f9f4 	bl	800ae80 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ba98:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d004      	beq.n	800baae <tcp_slowtmr+0x4f2>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f06f 010c 	mvn.w	r1, #12
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800baae:	4b2c      	ldr	r3, [pc, #176]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d037      	beq.n	800bb26 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bab6:	e592      	b.n	800b5de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac4:	7f1b      	ldrb	r3, [r3, #28]
 800bac6:	3301      	adds	r3, #1
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	7f1a      	ldrb	r2, [r3, #28]
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	7f5b      	ldrb	r3, [r3, #29]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d325      	bcc.n	800bb26 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	2200      	movs	r2, #0
 800bade:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bae0:	4b1f      	ldr	r3, [pc, #124]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <tcp_slowtmr+0x54c>
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baf8:	6912      	ldr	r2, [r2, #16]
 800bafa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bafc:	4610      	mov	r0, r2
 800bafe:	4798      	blx	r3
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bb06:	e002      	b.n	800bb0e <tcp_slowtmr+0x552>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bb0e:	4b14      	ldr	r3, [pc, #80]	; (800bb60 <tcp_slowtmr+0x5a4>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d000      	beq.n	800bb18 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800bb16:	e562      	b.n	800b5de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bb18:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800bb20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb22:	f003 fb7d 	bl	800f220 <tcp_output>
  while (pcb != NULL) {
 800bb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f47f ad5e 	bne.w	800b5ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bb32:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <tcp_slowtmr+0x5a8>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bb38:	e069      	b.n	800bc0e <tcp_slowtmr+0x652>
 800bb3a:	bf00      	nop
 800bb3c:	20006ce4 	.word	0x20006ce4
 800bb40:	000a4cb8 	.word	0x000a4cb8
 800bb44:	10624dd3 	.word	0x10624dd3
 800bb48:	000124f8 	.word	0x000124f8
 800bb4c:	20006ce0 	.word	0x20006ce0
 800bb50:	08015ad8 	.word	0x08015ad8
 800bb54:	08015f10 	.word	0x08015f10
 800bb58:	08015b1c 	.word	0x08015b1c
 800bb5c:	08015f3c 	.word	0x08015f3c
 800bb60:	20006cdc 	.word	0x20006cdc
 800bb64:	20006cf0 	.word	0x20006cf0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	7d1b      	ldrb	r3, [r3, #20]
 800bb6c:	2b0a      	cmp	r3, #10
 800bb6e:	d006      	beq.n	800bb7e <tcp_slowtmr+0x5c2>
 800bb70:	4b2b      	ldr	r3, [pc, #172]	; (800bc20 <tcp_slowtmr+0x664>)
 800bb72:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bb76:	492b      	ldr	r1, [pc, #172]	; (800bc24 <tcp_slowtmr+0x668>)
 800bb78:	482b      	ldr	r0, [pc, #172]	; (800bc28 <tcp_slowtmr+0x66c>)
 800bb7a:	f008 fabf 	bl	80140fc <iprintf>
    pcb_remove = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bb84:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <tcp_slowtmr+0x670>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	2bf0      	cmp	r3, #240	; 0xf0
 800bb90:	d904      	bls.n	800bb9c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb96:	3301      	adds	r3, #1
 800bb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d02f      	beq.n	800bc04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bba6:	f000 fb2b 	bl	800c200 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d010      	beq.n	800bbd2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bbb0:	4b1f      	ldr	r3, [pc, #124]	; (800bc30 <tcp_slowtmr+0x674>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d106      	bne.n	800bbc8 <tcp_slowtmr+0x60c>
 800bbba:	4b19      	ldr	r3, [pc, #100]	; (800bc20 <tcp_slowtmr+0x664>)
 800bbbc:	f240 52af 	movw	r2, #1455	; 0x5af
 800bbc0:	491c      	ldr	r1, [pc, #112]	; (800bc34 <tcp_slowtmr+0x678>)
 800bbc2:	4819      	ldr	r0, [pc, #100]	; (800bc28 <tcp_slowtmr+0x66c>)
 800bbc4:	f008 fa9a 	bl	80140fc <iprintf>
        prev->next = pcb->next;
 800bbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	60da      	str	r2, [r3, #12]
 800bbd0:	e00f      	b.n	800bbf2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bbd2:	4b17      	ldr	r3, [pc, #92]	; (800bc30 <tcp_slowtmr+0x674>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d006      	beq.n	800bbea <tcp_slowtmr+0x62e>
 800bbdc:	4b10      	ldr	r3, [pc, #64]	; (800bc20 <tcp_slowtmr+0x664>)
 800bbde:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bbe2:	4915      	ldr	r1, [pc, #84]	; (800bc38 <tcp_slowtmr+0x67c>)
 800bbe4:	4810      	ldr	r0, [pc, #64]	; (800bc28 <tcp_slowtmr+0x66c>)
 800bbe6:	f008 fa89 	bl	80140fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	4a10      	ldr	r2, [pc, #64]	; (800bc30 <tcp_slowtmr+0x674>)
 800bbf0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bbfc:	69f8      	ldr	r0, [r7, #28]
 800bbfe:	f7ff f93f 	bl	800ae80 <tcp_free>
 800bc02:	e004      	b.n	800bc0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1a9      	bne.n	800bb68 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	3730      	adds	r7, #48	; 0x30
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	08015ad8 	.word	0x08015ad8
 800bc24:	08015f68 	.word	0x08015f68
 800bc28:	08015b1c 	.word	0x08015b1c
 800bc2c:	20006ce4 	.word	0x20006ce4
 800bc30:	20006cf0 	.word	0x20006cf0
 800bc34:	08015f98 	.word	0x08015f98
 800bc38:	08015fc0 	.word	0x08015fc0

0800bc3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bc42:	4b2d      	ldr	r3, [pc, #180]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	3301      	adds	r3, #1
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	4b2b      	ldr	r3, [pc, #172]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bc4e:	4b2b      	ldr	r3, [pc, #172]	; (800bcfc <tcp_fasttmr+0xc0>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bc54:	e048      	b.n	800bce8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	7f9a      	ldrb	r2, [r3, #30]
 800bc5a:	4b27      	ldr	r3, [pc, #156]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d03f      	beq.n	800bce2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bc62:	4b25      	ldr	r3, [pc, #148]	; (800bcf8 <tcp_fasttmr+0xbc>)
 800bc64:	781a      	ldrb	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8b5b      	ldrh	r3, [r3, #26]
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d010      	beq.n	800bc98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	8b5b      	ldrh	r3, [r3, #26]
 800bc7a:	f043 0302 	orr.w	r3, r3, #2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f003 facb 	bl	800f220 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	8b5b      	ldrh	r3, [r3, #26]
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	8b5b      	ldrh	r3, [r3, #26]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d009      	beq.n	800bcb8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	8b5b      	ldrh	r3, [r3, #26]
 800bca8:	f023 0308 	bic.w	r3, r3, #8
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7ff fa78 	bl	800b1a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00a      	beq.n	800bcdc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bcc6:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <tcp_fasttmr+0xc4>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f819 	bl	800bd04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bcd2:	4b0b      	ldr	r3, [pc, #44]	; (800bd00 <tcp_fasttmr+0xc4>)
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d000      	beq.n	800bcdc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bcda:	e7b8      	b.n	800bc4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	607b      	str	r3, [r7, #4]
 800bce0:	e002      	b.n	800bce8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1b3      	bne.n	800bc56 <tcp_fasttmr+0x1a>
    }
  }
}
 800bcee:	bf00      	nop
 800bcf0:	bf00      	nop
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	200003aa 	.word	0x200003aa
 800bcfc:	20006ce0 	.word	0x20006ce0
 800bd00:	20006cdc 	.word	0x20006cdc

0800bd04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d109      	bne.n	800bd26 <tcp_process_refused_data+0x22>
 800bd12:	4b37      	ldr	r3, [pc, #220]	; (800bdf0 <tcp_process_refused_data+0xec>)
 800bd14:	f240 6209 	movw	r2, #1545	; 0x609
 800bd18:	4936      	ldr	r1, [pc, #216]	; (800bdf4 <tcp_process_refused_data+0xf0>)
 800bd1a:	4837      	ldr	r0, [pc, #220]	; (800bdf8 <tcp_process_refused_data+0xf4>)
 800bd1c:	f008 f9ee 	bl	80140fc <iprintf>
 800bd20:	f06f 030f 	mvn.w	r3, #15
 800bd24:	e060      	b.n	800bde8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd2a:	7b5b      	ldrb	r3, [r3, #13]
 800bd2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <tcp_process_refused_data+0x58>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6918      	ldr	r0, [r3, #16]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	6879      	ldr	r1, [r7, #4]
 800bd54:	47a0      	blx	r4
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]
 800bd5a:	e007      	b.n	800bd6c <tcp_process_refused_data+0x68>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	6879      	ldr	r1, [r7, #4]
 800bd62:	2000      	movs	r0, #0
 800bd64:	f000 f8a4 	bl	800beb0 <tcp_recv_null>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bd6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d12a      	bne.n	800bdca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d033      	beq.n	800bde6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bd86:	d005      	beq.n	800bd94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <tcp_process_refused_data+0xb2>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6918      	ldr	r0, [r3, #16]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2200      	movs	r2, #0
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	47a0      	blx	r4
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
 800bdb4:	e001      	b.n	800bdba <tcp_process_refused_data+0xb6>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bdba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdbe:	f113 0f0d 	cmn.w	r3, #13
 800bdc2:	d110      	bne.n	800bde6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bdc4:	f06f 030c 	mvn.w	r3, #12
 800bdc8:	e00e      	b.n	800bde8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdce:	f113 0f0d 	cmn.w	r3, #13
 800bdd2:	d102      	bne.n	800bdda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bdd4:	f06f 030c 	mvn.w	r3, #12
 800bdd8:	e006      	b.n	800bde8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bde0:	f06f 0304 	mvn.w	r3, #4
 800bde4:	e000      	b.n	800bde8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd90      	pop	{r4, r7, pc}
 800bdf0:	08015ad8 	.word	0x08015ad8
 800bdf4:	08015fe8 	.word	0x08015fe8
 800bdf8:	08015b1c 	.word	0x08015b1c

0800bdfc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800be04:	e007      	b.n	800be16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f80a 	bl	800be26 <tcp_seg_free>
    seg = next;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1f4      	bne.n	800be06 <tcp_segs_free+0xa>
  }
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b082      	sub	sp, #8
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00c      	beq.n	800be4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe fd6d 	bl	800a920 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	2003      	movs	r0, #3
 800be4a:	f7fd ff57 	bl	8009cfc <memp_free>
  }
}
 800be4e:	bf00      	nop
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
	...

0800be58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <tcp_seg_copy+0x1c>
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <tcp_seg_copy+0x4c>)
 800be68:	f240 6282 	movw	r2, #1666	; 0x682
 800be6c:	490e      	ldr	r1, [pc, #56]	; (800bea8 <tcp_seg_copy+0x50>)
 800be6e:	480f      	ldr	r0, [pc, #60]	; (800beac <tcp_seg_copy+0x54>)
 800be70:	f008 f944 	bl	80140fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800be74:	2003      	movs	r0, #3
 800be76:	f7fd fef5 	bl	8009c64 <memp_malloc>
 800be7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <tcp_seg_copy+0x2e>
    return NULL;
 800be82:	2300      	movs	r3, #0
 800be84:	e00a      	b.n	800be9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800be86:	2210      	movs	r2, #16
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f008 f876 	bl	8013f7c <memcpy>
  pbuf_ref(cseg->p);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	4618      	mov	r0, r3
 800be96:	f7fe fde3 	bl	800aa60 <pbuf_ref>
  return cseg;
 800be9a:	68fb      	ldr	r3, [r7, #12]
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3710      	adds	r7, #16
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	08015ad8 	.word	0x08015ad8
 800bea8:	0801602c 	.word	0x0801602c
 800beac:	08015b1c 	.word	0x08015b1c

0800beb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
 800bebc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d109      	bne.n	800bed8 <tcp_recv_null+0x28>
 800bec4:	4b12      	ldr	r3, [pc, #72]	; (800bf10 <tcp_recv_null+0x60>)
 800bec6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800beca:	4912      	ldr	r1, [pc, #72]	; (800bf14 <tcp_recv_null+0x64>)
 800becc:	4812      	ldr	r0, [pc, #72]	; (800bf18 <tcp_recv_null+0x68>)
 800bece:	f008 f915 	bl	80140fc <iprintf>
 800bed2:	f06f 030f 	mvn.w	r3, #15
 800bed6:	e016      	b.n	800bf06 <tcp_recv_null+0x56>

  if (p != NULL) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d009      	beq.n	800bef2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	891b      	ldrh	r3, [r3, #8]
 800bee2:	4619      	mov	r1, r3
 800bee4:	68b8      	ldr	r0, [r7, #8]
 800bee6:	f7ff fb19 	bl	800b51c <tcp_recved>
    pbuf_free(p);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7fe fd18 	bl	800a920 <pbuf_free>
 800bef0:	e008      	b.n	800bf04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d104      	bne.n	800bf04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800befa:	68b8      	ldr	r0, [r7, #8]
 800befc:	f7ff f9be 	bl	800b27c <tcp_close>
 800bf00:	4603      	mov	r3, r0
 800bf02:	e000      	b.n	800bf06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	08015ad8 	.word	0x08015ad8
 800bf14:	08016048 	.word	0x08016048
 800bf18:	08015b1c 	.word	0x08015b1c

0800bf1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bf26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	db01      	blt.n	800bf32 <tcp_kill_prio+0x16>
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	e000      	b.n	800bf34 <tcp_kill_prio+0x18>
 800bf32:	237f      	movs	r3, #127	; 0x7f
 800bf34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bf36:	7afb      	ldrb	r3, [r7, #11]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d034      	beq.n	800bfa6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bf46:	2300      	movs	r3, #0
 800bf48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf4a:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <tcp_kill_prio+0x94>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	617b      	str	r3, [r7, #20]
 800bf50:	e01f      	b.n	800bf92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	7d5b      	ldrb	r3, [r3, #21]
 800bf56:	7afa      	ldrb	r2, [r7, #11]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d80c      	bhi.n	800bf76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bf60:	7afa      	ldrb	r2, [r7, #11]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d112      	bne.n	800bf8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bf66:	4b13      	ldr	r3, [pc, #76]	; (800bfb4 <tcp_kill_prio+0x98>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d80a      	bhi.n	800bf8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <tcp_kill_prio+0x98>)
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	7d5b      	ldrb	r3, [r3, #21]
 800bf8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1dc      	bne.n	800bf52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d004      	beq.n	800bfa8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bf9e:	6938      	ldr	r0, [r7, #16]
 800bfa0:	f7ff fa56 	bl	800b450 <tcp_abort>
 800bfa4:	e000      	b.n	800bfa8 <tcp_kill_prio+0x8c>
    return;
 800bfa6:	bf00      	nop
  }
}
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20006ce0 	.word	0x20006ce0
 800bfb4:	20006ce4 	.word	0x20006ce4

0800bfb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	2b08      	cmp	r3, #8
 800bfc6:	d009      	beq.n	800bfdc <tcp_kill_state+0x24>
 800bfc8:	79fb      	ldrb	r3, [r7, #7]
 800bfca:	2b09      	cmp	r3, #9
 800bfcc:	d006      	beq.n	800bfdc <tcp_kill_state+0x24>
 800bfce:	4b1a      	ldr	r3, [pc, #104]	; (800c038 <tcp_kill_state+0x80>)
 800bfd0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bfd4:	4919      	ldr	r1, [pc, #100]	; (800c03c <tcp_kill_state+0x84>)
 800bfd6:	481a      	ldr	r0, [pc, #104]	; (800c040 <tcp_kill_state+0x88>)
 800bfd8:	f008 f890 	bl	80140fc <iprintf>

  inactivity = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfe4:	4b17      	ldr	r3, [pc, #92]	; (800c044 <tcp_kill_state+0x8c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	617b      	str	r3, [r7, #20]
 800bfea:	e017      	b.n	800c01c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	7d1b      	ldrb	r3, [r3, #20]
 800bff0:	79fa      	ldrb	r2, [r7, #7]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d10f      	bne.n	800c016 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bff6:	4b14      	ldr	r3, [pc, #80]	; (800c048 <tcp_kill_state+0x90>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	429a      	cmp	r2, r3
 800c004:	d807      	bhi.n	800c016 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c006:	4b10      	ldr	r3, [pc, #64]	; (800c048 <tcp_kill_state+0x90>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1e4      	bne.n	800bfec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c028:	2100      	movs	r1, #0
 800c02a:	6938      	ldr	r0, [r7, #16]
 800c02c:	f7ff f952 	bl	800b2d4 <tcp_abandon>
  }
}
 800c030:	bf00      	nop
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	08015ad8 	.word	0x08015ad8
 800c03c:	08016064 	.word	0x08016064
 800c040:	08015b1c 	.word	0x08015b1c
 800c044:	20006ce0 	.word	0x20006ce0
 800c048:	20006ce4 	.word	0x20006ce4

0800c04c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c05a:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <tcp_kill_timewait+0x58>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	e012      	b.n	800c088 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c062:	4b11      	ldr	r3, [pc, #68]	; (800c0a8 <tcp_kill_timewait+0x5c>)
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d807      	bhi.n	800c082 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <tcp_kill_timewait+0x5c>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e9      	bne.n	800c062 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c094:	68b8      	ldr	r0, [r7, #8]
 800c096:	f7ff f9db 	bl	800b450 <tcp_abort>
  }
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20006cf0 	.word	0x20006cf0
 800c0a8:	20006ce4 	.word	0x20006ce4

0800c0ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c0b2:	4b10      	ldr	r3, [pc, #64]	; (800c0f4 <tcp_handle_closepend+0x48>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c0b8:	e014      	b.n	800c0e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	8b5b      	ldrh	r3, [r3, #26]
 800c0c4:	f003 0308 	and.w	r3, r3, #8
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d009      	beq.n	800c0e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8b5b      	ldrh	r3, [r3, #26]
 800c0d0:	f023 0308 	bic.w	r3, r3, #8
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff f864 	bl	800b1a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e7      	bne.n	800c0ba <tcp_handle_closepend+0xe>
  }
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20006ce0 	.word	0x20006ce0

0800c0f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c102:	2001      	movs	r0, #1
 800c104:	f7fd fdae 	bl	8009c64 <memp_malloc>
 800c108:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d126      	bne.n	800c15e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c110:	f7ff ffcc 	bl	800c0ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c114:	f7ff ff9a 	bl	800c04c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c118:	2001      	movs	r0, #1
 800c11a:	f7fd fda3 	bl	8009c64 <memp_malloc>
 800c11e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d11b      	bne.n	800c15e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c126:	2009      	movs	r0, #9
 800c128:	f7ff ff46 	bl	800bfb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c12c:	2001      	movs	r0, #1
 800c12e:	f7fd fd99 	bl	8009c64 <memp_malloc>
 800c132:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d111      	bne.n	800c15e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c13a:	2008      	movs	r0, #8
 800c13c:	f7ff ff3c 	bl	800bfb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c140:	2001      	movs	r0, #1
 800c142:	f7fd fd8f 	bl	8009c64 <memp_malloc>
 800c146:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d107      	bne.n	800c15e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff fee3 	bl	800bf1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c156:	2001      	movs	r0, #1
 800c158:	f7fd fd84 	bl	8009c64 <memp_malloc>
 800c15c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d03f      	beq.n	800c1e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c164:	229c      	movs	r2, #156	; 0x9c
 800c166:	2100      	movs	r1, #0
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f007 ff15 	bl	8013f98 <memset>
    pcb->prio = prio;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	79fa      	ldrb	r2, [r7, #7]
 800c172:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c17a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c184:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	22ff      	movs	r2, #255	; 0xff
 800c192:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c19a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2206      	movs	r2, #6
 800c1a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2206      	movs	r2, #6
 800c1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c1ba:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <tcp_alloc+0xf8>)
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <tcp_alloc+0xfc>)
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c1d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <tcp_alloc+0x100>)
 800c1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <tcp_alloc+0x104>)
 800c1e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20006ce4 	.word	0x20006ce4
 800c1f4:	200003aa 	.word	0x200003aa
 800c1f8:	0800beb1 	.word	0x0800beb1
 800c1fc:	006ddd00 	.word	0x006ddd00

0800c200 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d107      	bne.n	800c21e <tcp_pcb_purge+0x1e>
 800c20e:	4b21      	ldr	r3, [pc, #132]	; (800c294 <tcp_pcb_purge+0x94>)
 800c210:	f640 0251 	movw	r2, #2129	; 0x851
 800c214:	4920      	ldr	r1, [pc, #128]	; (800c298 <tcp_pcb_purge+0x98>)
 800c216:	4821      	ldr	r0, [pc, #132]	; (800c29c <tcp_pcb_purge+0x9c>)
 800c218:	f007 ff70 	bl	80140fc <iprintf>
 800c21c:	e037      	b.n	800c28e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	7d1b      	ldrb	r3, [r3, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d033      	beq.n	800c28e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c22a:	2b0a      	cmp	r3, #10
 800c22c:	d02f      	beq.n	800c28e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c232:	2b01      	cmp	r3, #1
 800c234:	d02b      	beq.n	800c28e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d007      	beq.n	800c24e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe fb6c 	bl	800a920 <pbuf_free>
      pcb->refused_data = NULL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c252:	2b00      	cmp	r3, #0
 800c254:	d002      	beq.n	800c25c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f986 	bl	800c568 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c262:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff fdc7 	bl	800bdfc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c272:	4618      	mov	r0, r3
 800c274:	f7ff fdc2 	bl	800bdfc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	08015ad8 	.word	0x08015ad8
 800c298:	08016124 	.word	0x08016124
 800c29c:	08015b1c 	.word	0x08015b1c

0800c2a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <tcp_pcb_remove+0x1e>
 800c2b0:	4b3e      	ldr	r3, [pc, #248]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c2b2:	f640 0283 	movw	r2, #2179	; 0x883
 800c2b6:	493e      	ldr	r1, [pc, #248]	; (800c3b0 <tcp_pcb_remove+0x110>)
 800c2b8:	483e      	ldr	r0, [pc, #248]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c2ba:	f007 ff1f 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <tcp_pcb_remove+0x32>
 800c2c4:	4b39      	ldr	r3, [pc, #228]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c2c6:	f640 0284 	movw	r2, #2180	; 0x884
 800c2ca:	493b      	ldr	r1, [pc, #236]	; (800c3b8 <tcp_pcb_remove+0x118>)
 800c2cc:	4839      	ldr	r0, [pc, #228]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c2ce:	f007 ff15 	bl	80140fc <iprintf>

  TCP_RMV(pcblist, pcb);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d105      	bne.n	800c2e8 <tcp_pcb_remove+0x48>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	601a      	str	r2, [r3, #0]
 800c2e6:	e013      	b.n	800c310 <tcp_pcb_remove+0x70>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	e00c      	b.n	800c30a <tcp_pcb_remove+0x6a>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d104      	bne.n	800c304 <tcp_pcb_remove+0x64>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	60da      	str	r2, [r3, #12]
 800c302:	e005      	b.n	800c310 <tcp_pcb_remove+0x70>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	60fb      	str	r3, [r7, #12]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1ef      	bne.n	800c2f0 <tcp_pcb_remove+0x50>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	2200      	movs	r2, #0
 800c314:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c316:	6838      	ldr	r0, [r7, #0]
 800c318:	f7ff ff72 	bl	800c200 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	7d1b      	ldrb	r3, [r3, #20]
 800c320:	2b0a      	cmp	r3, #10
 800c322:	d013      	beq.n	800c34c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d00f      	beq.n	800c34c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	8b5b      	ldrh	r3, [r3, #26]
 800c330:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c334:	2b00      	cmp	r3, #0
 800c336:	d009      	beq.n	800c34c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	8b5b      	ldrh	r3, [r3, #26]
 800c33c:	f043 0302 	orr.w	r3, r3, #2
 800c340:	b29a      	uxth	r2, r3
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c346:	6838      	ldr	r0, [r7, #0]
 800c348:	f002 ff6a 	bl	800f220 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	7d1b      	ldrb	r3, [r3, #20]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d020      	beq.n	800c396 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d006      	beq.n	800c36a <tcp_pcb_remove+0xca>
 800c35c:	4b13      	ldr	r3, [pc, #76]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c35e:	f640 0293 	movw	r2, #2195	; 0x893
 800c362:	4916      	ldr	r1, [pc, #88]	; (800c3bc <tcp_pcb_remove+0x11c>)
 800c364:	4813      	ldr	r0, [pc, #76]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c366:	f007 fec9 	bl	80140fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <tcp_pcb_remove+0xe0>
 800c372:	4b0e      	ldr	r3, [pc, #56]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c374:	f640 0294 	movw	r2, #2196	; 0x894
 800c378:	4911      	ldr	r1, [pc, #68]	; (800c3c0 <tcp_pcb_remove+0x120>)
 800c37a:	480e      	ldr	r0, [pc, #56]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c37c:	f007 febe 	bl	80140fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <tcp_pcb_remove+0xf6>
 800c388:	4b08      	ldr	r3, [pc, #32]	; (800c3ac <tcp_pcb_remove+0x10c>)
 800c38a:	f640 0296 	movw	r2, #2198	; 0x896
 800c38e:	490d      	ldr	r1, [pc, #52]	; (800c3c4 <tcp_pcb_remove+0x124>)
 800c390:	4808      	ldr	r0, [pc, #32]	; (800c3b4 <tcp_pcb_remove+0x114>)
 800c392:	f007 feb3 	bl	80140fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2200      	movs	r2, #0
 800c39a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c3a2:	bf00      	nop
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	08015ad8 	.word	0x08015ad8
 800c3b0:	08016140 	.word	0x08016140
 800c3b4:	08015b1c 	.word	0x08015b1c
 800c3b8:	0801615c 	.word	0x0801615c
 800c3bc:	0801617c 	.word	0x0801617c
 800c3c0:	08016194 	.word	0x08016194
 800c3c4:	080161b0 	.word	0x080161b0

0800c3c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <tcp_next_iss+0x1c>
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <tcp_next_iss+0x38>)
 800c3d8:	f640 02af 	movw	r2, #2223	; 0x8af
 800c3dc:	4909      	ldr	r1, [pc, #36]	; (800c404 <tcp_next_iss+0x3c>)
 800c3de:	480a      	ldr	r0, [pc, #40]	; (800c408 <tcp_next_iss+0x40>)
 800c3e0:	f007 fe8c 	bl	80140fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c3e4:	4b09      	ldr	r3, [pc, #36]	; (800c40c <tcp_next_iss+0x44>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	4b09      	ldr	r3, [pc, #36]	; (800c410 <tcp_next_iss+0x48>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	4a07      	ldr	r2, [pc, #28]	; (800c40c <tcp_next_iss+0x44>)
 800c3f0:	6013      	str	r3, [r2, #0]
  return iss;
 800c3f2:	4b06      	ldr	r3, [pc, #24]	; (800c40c <tcp_next_iss+0x44>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	08015ad8 	.word	0x08015ad8
 800c404:	080161c8 	.word	0x080161c8
 800c408:	08015b1c 	.word	0x08015b1c
 800c40c:	20000120 	.word	0x20000120
 800c410:	20006ce4 	.word	0x20006ce4

0800c414 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d106      	bne.n	800c436 <tcp_eff_send_mss_netif+0x22>
 800c428:	4b14      	ldr	r3, [pc, #80]	; (800c47c <tcp_eff_send_mss_netif+0x68>)
 800c42a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c42e:	4914      	ldr	r1, [pc, #80]	; (800c480 <tcp_eff_send_mss_netif+0x6c>)
 800c430:	4814      	ldr	r0, [pc, #80]	; (800c484 <tcp_eff_send_mss_netif+0x70>)
 800c432:	f007 fe63 	bl	80140fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d101      	bne.n	800c440 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c43c:	89fb      	ldrh	r3, [r7, #14]
 800c43e:	e019      	b.n	800c474 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c444:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c446:	8afb      	ldrh	r3, [r7, #22]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d012      	beq.n	800c472 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c44c:	2328      	movs	r3, #40	; 0x28
 800c44e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c450:	8afa      	ldrh	r2, [r7, #22]
 800c452:	8abb      	ldrh	r3, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d904      	bls.n	800c462 <tcp_eff_send_mss_netif+0x4e>
 800c458:	8afa      	ldrh	r2, [r7, #22]
 800c45a:	8abb      	ldrh	r3, [r7, #20]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	b29b      	uxth	r3, r3
 800c460:	e000      	b.n	800c464 <tcp_eff_send_mss_netif+0x50>
 800c462:	2300      	movs	r3, #0
 800c464:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c466:	8a7a      	ldrh	r2, [r7, #18]
 800c468:	89fb      	ldrh	r3, [r7, #14]
 800c46a:	4293      	cmp	r3, r2
 800c46c:	bf28      	it	cs
 800c46e:	4613      	movcs	r3, r2
 800c470:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c472:	89fb      	ldrh	r3, [r7, #14]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	08015ad8 	.word	0x08015ad8
 800c480:	080161e4 	.word	0x080161e4
 800c484:	08015b1c 	.word	0x08015b1c

0800c488 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d119      	bne.n	800c4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c49c:	4b10      	ldr	r3, [pc, #64]	; (800c4e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c49e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c4a2:	4910      	ldr	r1, [pc, #64]	; (800c4e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c4a4:	4810      	ldr	r0, [pc, #64]	; (800c4e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c4a6:	f007 fe29 	bl	80140fc <iprintf>

  while (pcb != NULL) {
 800c4aa:	e011      	b.n	800c4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d108      	bne.n	800c4ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7fe ffc6 	bl	800b450 <tcp_abort>
      pcb = next;
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	e002      	b.n	800c4d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1ea      	bne.n	800c4ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	08015ad8 	.word	0x08015ad8
 800c4e4:	0801620c 	.word	0x0801620c
 800c4e8:	08015b1c 	.word	0x08015b1c

0800c4ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d02a      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d026      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c504:	4b15      	ldr	r3, [pc, #84]	; (800c55c <tcp_netif_ip_addr_changed+0x70>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4619      	mov	r1, r3
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff ffbc 	bl	800c488 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c510:	4b13      	ldr	r3, [pc, #76]	; (800c560 <tcp_netif_ip_addr_changed+0x74>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff ffb6 	bl	800c488 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d017      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d013      	beq.n	800c552 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c52a:	4b0e      	ldr	r3, [pc, #56]	; (800c564 <tcp_netif_ip_addr_changed+0x78>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	e00c      	b.n	800c54c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d103      	bne.n	800c546 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1ef      	bne.n	800c532 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c552:	bf00      	nop
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	20006ce0 	.word	0x20006ce0
 800c560:	20006cec 	.word	0x20006cec
 800c564:	20006ce8 	.word	0x20006ce8

0800c568 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c574:	2b00      	cmp	r3, #0
 800c576:	d007      	beq.n	800c588 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff fc3d 	bl	800bdfc <tcp_segs_free>
    pcb->ooseq = NULL;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c588:	bf00      	nop
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c590:	b590      	push	{r4, r7, lr}
 800c592:	b08d      	sub	sp, #52	; 0x34
 800c594:	af04      	add	r7, sp, #16
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d105      	bne.n	800c5ac <tcp_input+0x1c>
 800c5a0:	4b9b      	ldr	r3, [pc, #620]	; (800c810 <tcp_input+0x280>)
 800c5a2:	2283      	movs	r2, #131	; 0x83
 800c5a4:	499b      	ldr	r1, [pc, #620]	; (800c814 <tcp_input+0x284>)
 800c5a6:	489c      	ldr	r0, [pc, #624]	; (800c818 <tcp_input+0x288>)
 800c5a8:	f007 fda8 	bl	80140fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	4a9a      	ldr	r2, [pc, #616]	; (800c81c <tcp_input+0x28c>)
 800c5b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	2b13      	cmp	r3, #19
 800c5ba:	f240 83c4 	bls.w	800cd46 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c5be:	4b98      	ldr	r3, [pc, #608]	; (800c820 <tcp_input+0x290>)
 800c5c0:	695b      	ldr	r3, [r3, #20]
 800c5c2:	4a97      	ldr	r2, [pc, #604]	; (800c820 <tcp_input+0x290>)
 800c5c4:	6812      	ldr	r2, [r2, #0]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f005 ffcd 	bl	8012568 <ip4_addr_isbroadcast_u32>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f040 83ba 	bne.w	800cd4a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c5d6:	4b92      	ldr	r3, [pc, #584]	; (800c820 <tcp_input+0x290>)
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c5de:	2be0      	cmp	r3, #224	; 0xe0
 800c5e0:	f000 83b3 	beq.w	800cd4a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c5e4:	4b8d      	ldr	r3, [pc, #564]	; (800c81c <tcp_input+0x28c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	899b      	ldrh	r3, [r3, #12]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fc fee3 	bl	80093b8 <lwip_htons>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	0b1b      	lsrs	r3, r3, #12
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c5fe:	7cbb      	ldrb	r3, [r7, #18]
 800c600:	2b13      	cmp	r3, #19
 800c602:	f240 83a4 	bls.w	800cd4e <tcp_input+0x7be>
 800c606:	7cbb      	ldrb	r3, [r7, #18]
 800c608:	b29a      	uxth	r2, r3
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	891b      	ldrh	r3, [r3, #8]
 800c60e:	429a      	cmp	r2, r3
 800c610:	f200 839d 	bhi.w	800cd4e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c614:	7cbb      	ldrb	r3, [r7, #18]
 800c616:	b29b      	uxth	r3, r3
 800c618:	3b14      	subs	r3, #20
 800c61a:	b29a      	uxth	r2, r3
 800c61c:	4b81      	ldr	r3, [pc, #516]	; (800c824 <tcp_input+0x294>)
 800c61e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c620:	4b81      	ldr	r3, [pc, #516]	; (800c828 <tcp_input+0x298>)
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	895a      	ldrh	r2, [r3, #10]
 800c62a:	7cbb      	ldrb	r3, [r7, #18]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	429a      	cmp	r2, r3
 800c630:	d309      	bcc.n	800c646 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c632:	4b7c      	ldr	r3, [pc, #496]	; (800c824 <tcp_input+0x294>)
 800c634:	881a      	ldrh	r2, [r3, #0]
 800c636:	4b7d      	ldr	r3, [pc, #500]	; (800c82c <tcp_input+0x29c>)
 800c638:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c63a:	7cbb      	ldrb	r3, [r7, #18]
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7fe f8e8 	bl	800a814 <pbuf_remove_header>
 800c644:	e04e      	b.n	800c6e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d105      	bne.n	800c65a <tcp_input+0xca>
 800c64e:	4b70      	ldr	r3, [pc, #448]	; (800c810 <tcp_input+0x280>)
 800c650:	22c2      	movs	r2, #194	; 0xc2
 800c652:	4977      	ldr	r1, [pc, #476]	; (800c830 <tcp_input+0x2a0>)
 800c654:	4870      	ldr	r0, [pc, #448]	; (800c818 <tcp_input+0x288>)
 800c656:	f007 fd51 	bl	80140fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c65a:	2114      	movs	r1, #20
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7fe f8d9 	bl	800a814 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	895a      	ldrh	r2, [r3, #10]
 800c666:	4b71      	ldr	r3, [pc, #452]	; (800c82c <tcp_input+0x29c>)
 800c668:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c66a:	4b6e      	ldr	r3, [pc, #440]	; (800c824 <tcp_input+0x294>)
 800c66c:	881a      	ldrh	r2, [r3, #0]
 800c66e:	4b6f      	ldr	r3, [pc, #444]	; (800c82c <tcp_input+0x29c>)
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c676:	4b6d      	ldr	r3, [pc, #436]	; (800c82c <tcp_input+0x29c>)
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7fe f8c9 	bl	800a814 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	895b      	ldrh	r3, [r3, #10]
 800c688:	8a3a      	ldrh	r2, [r7, #16]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	f200 8361 	bhi.w	800cd52 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	4a64      	ldr	r2, [pc, #400]	; (800c828 <tcp_input+0x298>)
 800c698:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	8a3a      	ldrh	r2, [r7, #16]
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fe f8b6 	bl	800a814 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	891a      	ldrh	r2, [r3, #8]
 800c6ac:	8a3b      	ldrh	r3, [r7, #16]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	b29a      	uxth	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	895b      	ldrh	r3, [r3, #10]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d005      	beq.n	800c6ca <tcp_input+0x13a>
 800c6be:	4b54      	ldr	r3, [pc, #336]	; (800c810 <tcp_input+0x280>)
 800c6c0:	22df      	movs	r2, #223	; 0xdf
 800c6c2:	495c      	ldr	r1, [pc, #368]	; (800c834 <tcp_input+0x2a4>)
 800c6c4:	4854      	ldr	r0, [pc, #336]	; (800c818 <tcp_input+0x288>)
 800c6c6:	f007 fd19 	bl	80140fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	891a      	ldrh	r2, [r3, #8]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	891b      	ldrh	r3, [r3, #8]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d005      	beq.n	800c6e4 <tcp_input+0x154>
 800c6d8:	4b4d      	ldr	r3, [pc, #308]	; (800c810 <tcp_input+0x280>)
 800c6da:	22e0      	movs	r2, #224	; 0xe0
 800c6dc:	4956      	ldr	r1, [pc, #344]	; (800c838 <tcp_input+0x2a8>)
 800c6de:	484e      	ldr	r0, [pc, #312]	; (800c818 <tcp_input+0x288>)
 800c6e0:	f007 fd0c 	bl	80140fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c6e4:	4b4d      	ldr	r3, [pc, #308]	; (800c81c <tcp_input+0x28c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	881b      	ldrh	r3, [r3, #0]
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4a4b      	ldr	r2, [pc, #300]	; (800c81c <tcp_input+0x28c>)
 800c6ee:	6814      	ldr	r4, [r2, #0]
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7fc fe61 	bl	80093b8 <lwip_htons>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c6fa:	4b48      	ldr	r3, [pc, #288]	; (800c81c <tcp_input+0x28c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	885b      	ldrh	r3, [r3, #2]
 800c700:	b29b      	uxth	r3, r3
 800c702:	4a46      	ldr	r2, [pc, #280]	; (800c81c <tcp_input+0x28c>)
 800c704:	6814      	ldr	r4, [r2, #0]
 800c706:	4618      	mov	r0, r3
 800c708:	f7fc fe56 	bl	80093b8 <lwip_htons>
 800c70c:	4603      	mov	r3, r0
 800c70e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c710:	4b42      	ldr	r3, [pc, #264]	; (800c81c <tcp_input+0x28c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	4a41      	ldr	r2, [pc, #260]	; (800c81c <tcp_input+0x28c>)
 800c718:	6814      	ldr	r4, [r2, #0]
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fc fe61 	bl	80093e2 <lwip_htonl>
 800c720:	4603      	mov	r3, r0
 800c722:	6063      	str	r3, [r4, #4]
 800c724:	6863      	ldr	r3, [r4, #4]
 800c726:	4a45      	ldr	r2, [pc, #276]	; (800c83c <tcp_input+0x2ac>)
 800c728:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c72a:	4b3c      	ldr	r3, [pc, #240]	; (800c81c <tcp_input+0x28c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	4a3a      	ldr	r2, [pc, #232]	; (800c81c <tcp_input+0x28c>)
 800c732:	6814      	ldr	r4, [r2, #0]
 800c734:	4618      	mov	r0, r3
 800c736:	f7fc fe54 	bl	80093e2 <lwip_htonl>
 800c73a:	4603      	mov	r3, r0
 800c73c:	60a3      	str	r3, [r4, #8]
 800c73e:	68a3      	ldr	r3, [r4, #8]
 800c740:	4a3f      	ldr	r2, [pc, #252]	; (800c840 <tcp_input+0x2b0>)
 800c742:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c744:	4b35      	ldr	r3, [pc, #212]	; (800c81c <tcp_input+0x28c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	89db      	ldrh	r3, [r3, #14]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4a33      	ldr	r2, [pc, #204]	; (800c81c <tcp_input+0x28c>)
 800c74e:	6814      	ldr	r4, [r2, #0]
 800c750:	4618      	mov	r0, r3
 800c752:	f7fc fe31 	bl	80093b8 <lwip_htons>
 800c756:	4603      	mov	r3, r0
 800c758:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c75a:	4b30      	ldr	r3, [pc, #192]	; (800c81c <tcp_input+0x28c>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	b29b      	uxth	r3, r3
 800c762:	4618      	mov	r0, r3
 800c764:	f7fc fe28 	bl	80093b8 <lwip_htons>
 800c768:	4603      	mov	r3, r0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c770:	b2da      	uxtb	r2, r3
 800c772:	4b34      	ldr	r3, [pc, #208]	; (800c844 <tcp_input+0x2b4>)
 800c774:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	891a      	ldrh	r2, [r3, #8]
 800c77a:	4b33      	ldr	r3, [pc, #204]	; (800c848 <tcp_input+0x2b8>)
 800c77c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c77e:	4b31      	ldr	r3, [pc, #196]	; (800c844 <tcp_input+0x2b4>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	f003 0303 	and.w	r3, r3, #3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00c      	beq.n	800c7a4 <tcp_input+0x214>
    tcplen++;
 800c78a:	4b2f      	ldr	r3, [pc, #188]	; (800c848 <tcp_input+0x2b8>)
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	b29a      	uxth	r2, r3
 800c792:	4b2d      	ldr	r3, [pc, #180]	; (800c848 <tcp_input+0x2b8>)
 800c794:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	891a      	ldrh	r2, [r3, #8]
 800c79a:	4b2b      	ldr	r3, [pc, #172]	; (800c848 <tcp_input+0x2b8>)
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	f200 82d9 	bhi.w	800cd56 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7a8:	4b28      	ldr	r3, [pc, #160]	; (800c84c <tcp_input+0x2bc>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	e09d      	b.n	800c8ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	7d1b      	ldrb	r3, [r3, #20]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d105      	bne.n	800c7c4 <tcp_input+0x234>
 800c7b8:	4b15      	ldr	r3, [pc, #84]	; (800c810 <tcp_input+0x280>)
 800c7ba:	22fb      	movs	r2, #251	; 0xfb
 800c7bc:	4924      	ldr	r1, [pc, #144]	; (800c850 <tcp_input+0x2c0>)
 800c7be:	4816      	ldr	r0, [pc, #88]	; (800c818 <tcp_input+0x288>)
 800c7c0:	f007 fc9c 	bl	80140fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	7d1b      	ldrb	r3, [r3, #20]
 800c7c8:	2b0a      	cmp	r3, #10
 800c7ca:	d105      	bne.n	800c7d8 <tcp_input+0x248>
 800c7cc:	4b10      	ldr	r3, [pc, #64]	; (800c810 <tcp_input+0x280>)
 800c7ce:	22fc      	movs	r2, #252	; 0xfc
 800c7d0:	4920      	ldr	r1, [pc, #128]	; (800c854 <tcp_input+0x2c4>)
 800c7d2:	4811      	ldr	r0, [pc, #68]	; (800c818 <tcp_input+0x288>)
 800c7d4:	f007 fc92 	bl	80140fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d105      	bne.n	800c7ec <tcp_input+0x25c>
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <tcp_input+0x280>)
 800c7e2:	22fd      	movs	r2, #253	; 0xfd
 800c7e4:	491c      	ldr	r1, [pc, #112]	; (800c858 <tcp_input+0x2c8>)
 800c7e6:	480c      	ldr	r0, [pc, #48]	; (800c818 <tcp_input+0x288>)
 800c7e8:	f007 fc88 	bl	80140fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	7a1b      	ldrb	r3, [r3, #8]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d033      	beq.n	800c85c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	7a1a      	ldrb	r2, [r3, #8]
 800c7f8:	4b09      	ldr	r3, [pc, #36]	; (800c820 <tcp_input+0x290>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c800:	3301      	adds	r3, #1
 800c802:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c804:	429a      	cmp	r2, r3
 800c806:	d029      	beq.n	800c85c <tcp_input+0x2cc>
      prev = pcb;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	61bb      	str	r3, [r7, #24]
      continue;
 800c80c:	e06b      	b.n	800c8e6 <tcp_input+0x356>
 800c80e:	bf00      	nop
 800c810:	08016240 	.word	0x08016240
 800c814:	08016274 	.word	0x08016274
 800c818:	0801628c 	.word	0x0801628c
 800c81c:	200003bc 	.word	0x200003bc
 800c820:	2000379c 	.word	0x2000379c
 800c824:	200003c0 	.word	0x200003c0
 800c828:	200003c4 	.word	0x200003c4
 800c82c:	200003c2 	.word	0x200003c2
 800c830:	080162b4 	.word	0x080162b4
 800c834:	080162c4 	.word	0x080162c4
 800c838:	080162d0 	.word	0x080162d0
 800c83c:	200003cc 	.word	0x200003cc
 800c840:	200003d0 	.word	0x200003d0
 800c844:	200003d8 	.word	0x200003d8
 800c848:	200003d6 	.word	0x200003d6
 800c84c:	20006ce0 	.word	0x20006ce0
 800c850:	080162f0 	.word	0x080162f0
 800c854:	08016318 	.word	0x08016318
 800c858:	08016344 	.word	0x08016344
    }

    if (pcb->remote_port == tcphdr->src &&
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	8b1a      	ldrh	r2, [r3, #24]
 800c860:	4b94      	ldr	r3, [pc, #592]	; (800cab4 <tcp_input+0x524>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	b29b      	uxth	r3, r3
 800c868:	429a      	cmp	r2, r3
 800c86a:	d13a      	bne.n	800c8e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	8ada      	ldrh	r2, [r3, #22]
 800c870:	4b90      	ldr	r3, [pc, #576]	; (800cab4 <tcp_input+0x524>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	885b      	ldrh	r3, [r3, #2]
 800c876:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c878:	429a      	cmp	r2, r3
 800c87a:	d132      	bne.n	800c8e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	4b8d      	ldr	r3, [pc, #564]	; (800cab8 <tcp_input+0x528>)
 800c882:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c884:	429a      	cmp	r2, r3
 800c886:	d12c      	bne.n	800c8e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b8a      	ldr	r3, [pc, #552]	; (800cab8 <tcp_input+0x528>)
 800c88e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c890:	429a      	cmp	r2, r3
 800c892:	d126      	bne.n	800c8e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	69fa      	ldr	r2, [r7, #28]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d106      	bne.n	800c8ac <tcp_input+0x31c>
 800c89e:	4b87      	ldr	r3, [pc, #540]	; (800cabc <tcp_input+0x52c>)
 800c8a0:	f240 120d 	movw	r2, #269	; 0x10d
 800c8a4:	4986      	ldr	r1, [pc, #536]	; (800cac0 <tcp_input+0x530>)
 800c8a6:	4887      	ldr	r0, [pc, #540]	; (800cac4 <tcp_input+0x534>)
 800c8a8:	f007 fc28 	bl	80140fc <iprintf>
      if (prev != NULL) {
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c8ba:	4b83      	ldr	r3, [pc, #524]	; (800cac8 <tcp_input+0x538>)
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c8c2:	4a81      	ldr	r2, [pc, #516]	; (800cac8 <tcp_input+0x538>)
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	69fa      	ldr	r2, [r7, #28]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d111      	bne.n	800c8f6 <tcp_input+0x366>
 800c8d2:	4b7a      	ldr	r3, [pc, #488]	; (800cabc <tcp_input+0x52c>)
 800c8d4:	f240 1215 	movw	r2, #277	; 0x115
 800c8d8:	497c      	ldr	r1, [pc, #496]	; (800cacc <tcp_input+0x53c>)
 800c8da:	487a      	ldr	r0, [pc, #488]	; (800cac4 <tcp_input+0x534>)
 800c8dc:	f007 fc0e 	bl	80140fc <iprintf>
      break;
 800c8e0:	e009      	b.n	800c8f6 <tcp_input+0x366>
    }
    prev = pcb;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	61fb      	str	r3, [r7, #28]
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f47f af5e 	bne.w	800c7b0 <tcp_input+0x220>
 800c8f4:	e000      	b.n	800c8f8 <tcp_input+0x368>
      break;
 800c8f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f040 8095 	bne.w	800ca2a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c900:	4b73      	ldr	r3, [pc, #460]	; (800cad0 <tcp_input+0x540>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	e03f      	b.n	800c988 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	7d1b      	ldrb	r3, [r3, #20]
 800c90c:	2b0a      	cmp	r3, #10
 800c90e:	d006      	beq.n	800c91e <tcp_input+0x38e>
 800c910:	4b6a      	ldr	r3, [pc, #424]	; (800cabc <tcp_input+0x52c>)
 800c912:	f240 121f 	movw	r2, #287	; 0x11f
 800c916:	496f      	ldr	r1, [pc, #444]	; (800cad4 <tcp_input+0x544>)
 800c918:	486a      	ldr	r0, [pc, #424]	; (800cac4 <tcp_input+0x534>)
 800c91a:	f007 fbef 	bl	80140fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	7a1b      	ldrb	r3, [r3, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d009      	beq.n	800c93a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	7a1a      	ldrb	r2, [r3, #8]
 800c92a:	4b63      	ldr	r3, [pc, #396]	; (800cab8 <tcp_input+0x528>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c932:	3301      	adds	r3, #1
 800c934:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c936:	429a      	cmp	r2, r3
 800c938:	d122      	bne.n	800c980 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	8b1a      	ldrh	r2, [r3, #24]
 800c93e:	4b5d      	ldr	r3, [pc, #372]	; (800cab4 <tcp_input+0x524>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	b29b      	uxth	r3, r3
 800c946:	429a      	cmp	r2, r3
 800c948:	d11b      	bne.n	800c982 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	8ada      	ldrh	r2, [r3, #22]
 800c94e:	4b59      	ldr	r3, [pc, #356]	; (800cab4 <tcp_input+0x524>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	885b      	ldrh	r3, [r3, #2]
 800c954:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c956:	429a      	cmp	r2, r3
 800c958:	d113      	bne.n	800c982 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c95a:	69fb      	ldr	r3, [r7, #28]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	4b56      	ldr	r3, [pc, #344]	; (800cab8 <tcp_input+0x528>)
 800c960:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c962:	429a      	cmp	r2, r3
 800c964:	d10d      	bne.n	800c982 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b53      	ldr	r3, [pc, #332]	; (800cab8 <tcp_input+0x528>)
 800c96c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c96e:	429a      	cmp	r2, r3
 800c970:	d107      	bne.n	800c982 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c972:	69f8      	ldr	r0, [r7, #28]
 800c974:	f000 fb54 	bl	800d020 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7fd ffd1 	bl	800a920 <pbuf_free>
        return;
 800c97e:	e1f0      	b.n	800cd62 <tcp_input+0x7d2>
        continue;
 800c980:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1bc      	bne.n	800c908 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c98e:	2300      	movs	r3, #0
 800c990:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c992:	4b51      	ldr	r3, [pc, #324]	; (800cad8 <tcp_input+0x548>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	e02a      	b.n	800c9f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	7a1b      	ldrb	r3, [r3, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	7a1a      	ldrb	r2, [r3, #8]
 800c9a6:	4b44      	ldr	r3, [pc, #272]	; (800cab8 <tcp_input+0x528>)
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d002      	beq.n	800c9bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	61bb      	str	r3, [r7, #24]
        continue;
 800c9ba:	e016      	b.n	800c9ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	8ada      	ldrh	r2, [r3, #22]
 800c9c0:	4b3c      	ldr	r3, [pc, #240]	; (800cab4 <tcp_input+0x524>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	885b      	ldrh	r3, [r3, #2]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d10c      	bne.n	800c9e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	4b39      	ldr	r3, [pc, #228]	; (800cab8 <tcp_input+0x528>)
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d00f      	beq.n	800c9f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00d      	beq.n	800c9fa <tcp_input+0x46a>
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d009      	beq.n	800c9fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	617b      	str	r3, [r7, #20]
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1d1      	bne.n	800c99a <tcp_input+0x40a>
 800c9f6:	e000      	b.n	800c9fa <tcp_input+0x46a>
            break;
 800c9f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d014      	beq.n	800ca2a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00a      	beq.n	800ca1c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	68da      	ldr	r2, [r3, #12]
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ca0e:	4b32      	ldr	r3, [pc, #200]	; (800cad8 <tcp_input+0x548>)
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ca16:	4a30      	ldr	r2, [pc, #192]	; (800cad8 <tcp_input+0x548>)
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ca1c:	6978      	ldr	r0, [r7, #20]
 800ca1e:	f000 fa01 	bl	800ce24 <tcp_listen_input>
      }
      pbuf_free(p);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7fd ff7c 	bl	800a920 <pbuf_free>
      return;
 800ca28:	e19b      	b.n	800cd62 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 8160 	beq.w	800ccf2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ca32:	4b2a      	ldr	r3, [pc, #168]	; (800cadc <tcp_input+0x54c>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	891a      	ldrh	r2, [r3, #8]
 800ca3c:	4b27      	ldr	r3, [pc, #156]	; (800cadc <tcp_input+0x54c>)
 800ca3e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ca40:	4a26      	ldr	r2, [pc, #152]	; (800cadc <tcp_input+0x54c>)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ca46:	4b1b      	ldr	r3, [pc, #108]	; (800cab4 <tcp_input+0x524>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a24      	ldr	r2, [pc, #144]	; (800cadc <tcp_input+0x54c>)
 800ca4c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ca4e:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <tcp_input+0x550>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ca54:	4b23      	ldr	r3, [pc, #140]	; (800cae4 <tcp_input+0x554>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ca5a:	4b23      	ldr	r3, [pc, #140]	; (800cae8 <tcp_input+0x558>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ca60:	4b22      	ldr	r3, [pc, #136]	; (800caec <tcp_input+0x55c>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	f003 0308 	and.w	r3, r3, #8
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d006      	beq.n	800ca7a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	7b5b      	ldrb	r3, [r3, #13]
 800ca70:	f043 0301 	orr.w	r3, r3, #1
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d038      	beq.n	800caf4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ca82:	69f8      	ldr	r0, [r7, #28]
 800ca84:	f7ff f93e 	bl	800bd04 <tcp_process_refused_data>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f113 0f0d 	cmn.w	r3, #13
 800ca8e:	d007      	beq.n	800caa0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d02d      	beq.n	800caf4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ca98:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <tcp_input+0x560>)
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d029      	beq.n	800caf4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f040 8104 	bne.w	800ccb2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800caaa:	69f8      	ldr	r0, [r7, #28]
 800caac:	f003 f9be 	bl	800fe2c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cab0:	e0ff      	b.n	800ccb2 <tcp_input+0x722>
 800cab2:	bf00      	nop
 800cab4:	200003bc 	.word	0x200003bc
 800cab8:	2000379c 	.word	0x2000379c
 800cabc:	08016240 	.word	0x08016240
 800cac0:	0801636c 	.word	0x0801636c
 800cac4:	0801628c 	.word	0x0801628c
 800cac8:	20006ce0 	.word	0x20006ce0
 800cacc:	08016398 	.word	0x08016398
 800cad0:	20006cf0 	.word	0x20006cf0
 800cad4:	080163c4 	.word	0x080163c4
 800cad8:	20006ce8 	.word	0x20006ce8
 800cadc:	200003ac 	.word	0x200003ac
 800cae0:	200003dc 	.word	0x200003dc
 800cae4:	200003d9 	.word	0x200003d9
 800cae8:	200003d4 	.word	0x200003d4
 800caec:	200003d8 	.word	0x200003d8
 800caf0:	200003d6 	.word	0x200003d6
      }
    }
    tcp_input_pcb = pcb;
 800caf4:	4a9c      	ldr	r2, [pc, #624]	; (800cd68 <tcp_input+0x7d8>)
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cafa:	69f8      	ldr	r0, [r7, #28]
 800cafc:	f000 fb0a 	bl	800d114 <tcp_process>
 800cb00:	4603      	mov	r3, r0
 800cb02:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cb04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb08:	f113 0f0d 	cmn.w	r3, #13
 800cb0c:	f000 80d3 	beq.w	800ccb6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800cb10:	4b96      	ldr	r3, [pc, #600]	; (800cd6c <tcp_input+0x7dc>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	f003 0308 	and.w	r3, r3, #8
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d015      	beq.n	800cb48 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d008      	beq.n	800cb38 <tcp_input+0x5a8>
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb2c:	69fa      	ldr	r2, [r7, #28]
 800cb2e:	6912      	ldr	r2, [r2, #16]
 800cb30:	f06f 010d 	mvn.w	r1, #13
 800cb34:	4610      	mov	r0, r2
 800cb36:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb38:	69f9      	ldr	r1, [r7, #28]
 800cb3a:	488d      	ldr	r0, [pc, #564]	; (800cd70 <tcp_input+0x7e0>)
 800cb3c:	f7ff fbb0 	bl	800c2a0 <tcp_pcb_remove>
        tcp_free(pcb);
 800cb40:	69f8      	ldr	r0, [r7, #28]
 800cb42:	f7fe f99d 	bl	800ae80 <tcp_free>
 800cb46:	e0c1      	b.n	800cccc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cb4c:	4b89      	ldr	r3, [pc, #548]	; (800cd74 <tcp_input+0x7e4>)
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d01d      	beq.n	800cb90 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cb54:	4b87      	ldr	r3, [pc, #540]	; (800cd74 <tcp_input+0x7e4>)
 800cb56:	881b      	ldrh	r3, [r3, #0]
 800cb58:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00a      	beq.n	800cb7a <tcp_input+0x5ea>
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	6910      	ldr	r0, [r2, #16]
 800cb6e:	89fa      	ldrh	r2, [r7, #14]
 800cb70:	69f9      	ldr	r1, [r7, #28]
 800cb72:	4798      	blx	r3
 800cb74:	4603      	mov	r3, r0
 800cb76:	74fb      	strb	r3, [r7, #19]
 800cb78:	e001      	b.n	800cb7e <tcp_input+0x5ee>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cb7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb82:	f113 0f0d 	cmn.w	r3, #13
 800cb86:	f000 8098 	beq.w	800ccba <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cb8a:	4b7a      	ldr	r3, [pc, #488]	; (800cd74 <tcp_input+0x7e4>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cb90:	69f8      	ldr	r0, [r7, #28]
 800cb92:	f000 f907 	bl	800cda4 <tcp_input_delayed_close>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f040 8090 	bne.w	800ccbe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cb9e:	4b76      	ldr	r3, [pc, #472]	; (800cd78 <tcp_input+0x7e8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d041      	beq.n	800cc2a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d006      	beq.n	800cbbc <tcp_input+0x62c>
 800cbae:	4b73      	ldr	r3, [pc, #460]	; (800cd7c <tcp_input+0x7ec>)
 800cbb0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cbb4:	4972      	ldr	r1, [pc, #456]	; (800cd80 <tcp_input+0x7f0>)
 800cbb6:	4873      	ldr	r0, [pc, #460]	; (800cd84 <tcp_input+0x7f4>)
 800cbb8:	f007 faa0 	bl	80140fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	8b5b      	ldrh	r3, [r3, #26]
 800cbc0:	f003 0310 	and.w	r3, r3, #16
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d008      	beq.n	800cbda <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cbc8:	4b6b      	ldr	r3, [pc, #428]	; (800cd78 <tcp_input+0x7e8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7fd fea7 	bl	800a920 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cbd2:	69f8      	ldr	r0, [r7, #28]
 800cbd4:	f7fe fc3c 	bl	800b450 <tcp_abort>
            goto aborted;
 800cbd8:	e078      	b.n	800cccc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00c      	beq.n	800cbfe <tcp_input+0x66e>
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	6918      	ldr	r0, [r3, #16]
 800cbee:	4b62      	ldr	r3, [pc, #392]	; (800cd78 <tcp_input+0x7e8>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	69f9      	ldr	r1, [r7, #28]
 800cbf6:	47a0      	blx	r4
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	74fb      	strb	r3, [r7, #19]
 800cbfc:	e008      	b.n	800cc10 <tcp_input+0x680>
 800cbfe:	4b5e      	ldr	r3, [pc, #376]	; (800cd78 <tcp_input+0x7e8>)
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	2300      	movs	r3, #0
 800cc04:	69f9      	ldr	r1, [r7, #28]
 800cc06:	2000      	movs	r0, #0
 800cc08:	f7ff f952 	bl	800beb0 <tcp_recv_null>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cc10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc14:	f113 0f0d 	cmn.w	r3, #13
 800cc18:	d053      	beq.n	800ccc2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cc1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cc22:	4b55      	ldr	r3, [pc, #340]	; (800cd78 <tcp_input+0x7e8>)
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cc2a:	4b50      	ldr	r3, [pc, #320]	; (800cd6c <tcp_input+0x7dc>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	f003 0320 	and.w	r3, r3, #32
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d030      	beq.n	800cc98 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d009      	beq.n	800cc52 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc42:	7b5a      	ldrb	r2, [r3, #13]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc48:	f042 0220 	orr.w	r2, r2, #32
 800cc4c:	b2d2      	uxtb	r2, r2
 800cc4e:	735a      	strb	r2, [r3, #13]
 800cc50:	e022      	b.n	800cc98 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc5a:	d005      	beq.n	800cc68 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc60:	3301      	adds	r3, #1
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00b      	beq.n	800cc8a <tcp_input+0x6fa>
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	6918      	ldr	r0, [r3, #16]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	2200      	movs	r2, #0
 800cc80:	69f9      	ldr	r1, [r7, #28]
 800cc82:	47a0      	blx	r4
 800cc84:	4603      	mov	r3, r0
 800cc86:	74fb      	strb	r3, [r7, #19]
 800cc88:	e001      	b.n	800cc8e <tcp_input+0x6fe>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cc8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc92:	f113 0f0d 	cmn.w	r3, #13
 800cc96:	d016      	beq.n	800ccc6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cc98:	4b33      	ldr	r3, [pc, #204]	; (800cd68 <tcp_input+0x7d8>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cc9e:	69f8      	ldr	r0, [r7, #28]
 800cca0:	f000 f880 	bl	800cda4 <tcp_input_delayed_close>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10f      	bne.n	800ccca <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ccaa:	69f8      	ldr	r0, [r7, #28]
 800ccac:	f002 fab8 	bl	800f220 <tcp_output>
 800ccb0:	e00c      	b.n	800cccc <tcp_input+0x73c>
        goto aborted;
 800ccb2:	bf00      	nop
 800ccb4:	e00a      	b.n	800cccc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ccb6:	bf00      	nop
 800ccb8:	e008      	b.n	800cccc <tcp_input+0x73c>
              goto aborted;
 800ccba:	bf00      	nop
 800ccbc:	e006      	b.n	800cccc <tcp_input+0x73c>
          goto aborted;
 800ccbe:	bf00      	nop
 800ccc0:	e004      	b.n	800cccc <tcp_input+0x73c>
            goto aborted;
 800ccc2:	bf00      	nop
 800ccc4:	e002      	b.n	800cccc <tcp_input+0x73c>
              goto aborted;
 800ccc6:	bf00      	nop
 800ccc8:	e000      	b.n	800cccc <tcp_input+0x73c>
          goto aborted;
 800ccca:	bf00      	nop
    tcp_input_pcb = NULL;
 800cccc:	4b26      	ldr	r3, [pc, #152]	; (800cd68 <tcp_input+0x7d8>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ccd2:	4b29      	ldr	r3, [pc, #164]	; (800cd78 <tcp_input+0x7e8>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ccd8:	4b2b      	ldr	r3, [pc, #172]	; (800cd88 <tcp_input+0x7f8>)
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d03f      	beq.n	800cd60 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800cce0:	4b29      	ldr	r3, [pc, #164]	; (800cd88 <tcp_input+0x7f8>)
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fd fe1b 	bl	800a920 <pbuf_free>
      inseg.p = NULL;
 800ccea:	4b27      	ldr	r3, [pc, #156]	; (800cd88 <tcp_input+0x7f8>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ccf0:	e036      	b.n	800cd60 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ccf2:	4b26      	ldr	r3, [pc, #152]	; (800cd8c <tcp_input+0x7fc>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	899b      	ldrh	r3, [r3, #12]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fc fb5c 	bl	80093b8 <lwip_htons>
 800cd00:	4603      	mov	r3, r0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	f003 0304 	and.w	r3, r3, #4
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d118      	bne.n	800cd3e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd0c:	4b20      	ldr	r3, [pc, #128]	; (800cd90 <tcp_input+0x800>)
 800cd0e:	6819      	ldr	r1, [r3, #0]
 800cd10:	4b20      	ldr	r3, [pc, #128]	; (800cd94 <tcp_input+0x804>)
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	461a      	mov	r2, r3
 800cd16:	4b20      	ldr	r3, [pc, #128]	; (800cd98 <tcp_input+0x808>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd1c:	4b1b      	ldr	r3, [pc, #108]	; (800cd8c <tcp_input+0x7fc>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd20:	885b      	ldrh	r3, [r3, #2]
 800cd22:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd24:	4a19      	ldr	r2, [pc, #100]	; (800cd8c <tcp_input+0x7fc>)
 800cd26:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd28:	8812      	ldrh	r2, [r2, #0]
 800cd2a:	b292      	uxth	r2, r2
 800cd2c:	9202      	str	r2, [sp, #8]
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <tcp_input+0x80c>)
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	4b1a      	ldr	r3, [pc, #104]	; (800cda0 <tcp_input+0x810>)
 800cd36:	4602      	mov	r2, r0
 800cd38:	2000      	movs	r0, #0
 800cd3a:	f003 f825 	bl	800fd88 <tcp_rst>
    pbuf_free(p);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7fd fdee 	bl	800a920 <pbuf_free>
  return;
 800cd44:	e00c      	b.n	800cd60 <tcp_input+0x7d0>
    goto dropped;
 800cd46:	bf00      	nop
 800cd48:	e006      	b.n	800cd58 <tcp_input+0x7c8>
    goto dropped;
 800cd4a:	bf00      	nop
 800cd4c:	e004      	b.n	800cd58 <tcp_input+0x7c8>
    goto dropped;
 800cd4e:	bf00      	nop
 800cd50:	e002      	b.n	800cd58 <tcp_input+0x7c8>
      goto dropped;
 800cd52:	bf00      	nop
 800cd54:	e000      	b.n	800cd58 <tcp_input+0x7c8>
      goto dropped;
 800cd56:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7fd fde1 	bl	800a920 <pbuf_free>
 800cd5e:	e000      	b.n	800cd62 <tcp_input+0x7d2>
  return;
 800cd60:	bf00      	nop
}
 800cd62:	3724      	adds	r7, #36	; 0x24
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd90      	pop	{r4, r7, pc}
 800cd68:	20006cf4 	.word	0x20006cf4
 800cd6c:	200003d9 	.word	0x200003d9
 800cd70:	20006ce0 	.word	0x20006ce0
 800cd74:	200003d4 	.word	0x200003d4
 800cd78:	200003dc 	.word	0x200003dc
 800cd7c:	08016240 	.word	0x08016240
 800cd80:	080163f4 	.word	0x080163f4
 800cd84:	0801628c 	.word	0x0801628c
 800cd88:	200003ac 	.word	0x200003ac
 800cd8c:	200003bc 	.word	0x200003bc
 800cd90:	200003d0 	.word	0x200003d0
 800cd94:	200003d6 	.word	0x200003d6
 800cd98:	200003cc 	.word	0x200003cc
 800cd9c:	200037ac 	.word	0x200037ac
 800cda0:	200037b0 	.word	0x200037b0

0800cda4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d106      	bne.n	800cdc0 <tcp_input_delayed_close+0x1c>
 800cdb2:	4b17      	ldr	r3, [pc, #92]	; (800ce10 <tcp_input_delayed_close+0x6c>)
 800cdb4:	f240 225a 	movw	r2, #602	; 0x25a
 800cdb8:	4916      	ldr	r1, [pc, #88]	; (800ce14 <tcp_input_delayed_close+0x70>)
 800cdba:	4817      	ldr	r0, [pc, #92]	; (800ce18 <tcp_input_delayed_close+0x74>)
 800cdbc:	f007 f99e 	bl	80140fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cdc0:	4b16      	ldr	r3, [pc, #88]	; (800ce1c <tcp_input_delayed_close+0x78>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f003 0310 	and.w	r3, r3, #16
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d01c      	beq.n	800ce06 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	8b5b      	ldrh	r3, [r3, #26]
 800cdd0:	f003 0310 	and.w	r3, r3, #16
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10d      	bne.n	800cdf4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d008      	beq.n	800cdf4 <tcp_input_delayed_close+0x50>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	6912      	ldr	r2, [r2, #16]
 800cdec:	f06f 010e 	mvn.w	r1, #14
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	480a      	ldr	r0, [pc, #40]	; (800ce20 <tcp_input_delayed_close+0x7c>)
 800cdf8:	f7ff fa52 	bl	800c2a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7fe f83f 	bl	800ae80 <tcp_free>
    return 1;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e000      	b.n	800ce08 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	08016240 	.word	0x08016240
 800ce14:	08016410 	.word	0x08016410
 800ce18:	0801628c 	.word	0x0801628c
 800ce1c:	200003d9 	.word	0x200003d9
 800ce20:	20006ce0 	.word	0x20006ce0

0800ce24 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b08b      	sub	sp, #44	; 0x2c
 800ce28:	af04      	add	r7, sp, #16
 800ce2a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ce2c:	4b6f      	ldr	r3, [pc, #444]	; (800cfec <tcp_listen_input+0x1c8>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	f003 0304 	and.w	r3, r3, #4
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f040 80d2 	bne.w	800cfde <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d106      	bne.n	800ce4e <tcp_listen_input+0x2a>
 800ce40:	4b6b      	ldr	r3, [pc, #428]	; (800cff0 <tcp_listen_input+0x1cc>)
 800ce42:	f240 2281 	movw	r2, #641	; 0x281
 800ce46:	496b      	ldr	r1, [pc, #428]	; (800cff4 <tcp_listen_input+0x1d0>)
 800ce48:	486b      	ldr	r0, [pc, #428]	; (800cff8 <tcp_listen_input+0x1d4>)
 800ce4a:	f007 f957 	bl	80140fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ce4e:	4b67      	ldr	r3, [pc, #412]	; (800cfec <tcp_listen_input+0x1c8>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	f003 0310 	and.w	r3, r3, #16
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d019      	beq.n	800ce8e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce5a:	4b68      	ldr	r3, [pc, #416]	; (800cffc <tcp_listen_input+0x1d8>)
 800ce5c:	6819      	ldr	r1, [r3, #0]
 800ce5e:	4b68      	ldr	r3, [pc, #416]	; (800d000 <tcp_listen_input+0x1dc>)
 800ce60:	881b      	ldrh	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	4b67      	ldr	r3, [pc, #412]	; (800d004 <tcp_listen_input+0x1e0>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce6a:	4b67      	ldr	r3, [pc, #412]	; (800d008 <tcp_listen_input+0x1e4>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce6e:	885b      	ldrh	r3, [r3, #2]
 800ce70:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce72:	4a65      	ldr	r2, [pc, #404]	; (800d008 <tcp_listen_input+0x1e4>)
 800ce74:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce76:	8812      	ldrh	r2, [r2, #0]
 800ce78:	b292      	uxth	r2, r2
 800ce7a:	9202      	str	r2, [sp, #8]
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	4b63      	ldr	r3, [pc, #396]	; (800d00c <tcp_listen_input+0x1e8>)
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	4b63      	ldr	r3, [pc, #396]	; (800d010 <tcp_listen_input+0x1ec>)
 800ce84:	4602      	mov	r2, r0
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f002 ff7e 	bl	800fd88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ce8c:	e0a9      	b.n	800cfe2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ce8e:	4b57      	ldr	r3, [pc, #348]	; (800cfec <tcp_listen_input+0x1c8>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	f003 0302 	and.w	r3, r3, #2
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	f000 80a3 	beq.w	800cfe2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	7d5b      	ldrb	r3, [r3, #21]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff f929 	bl	800c0f8 <tcp_alloc>
 800cea6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d111      	bne.n	800ced2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00a      	beq.n	800cecc <tcp_listen_input+0xa8>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	699b      	ldr	r3, [r3, #24]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	6910      	ldr	r0, [r2, #16]
 800cebe:	f04f 32ff 	mov.w	r2, #4294967295
 800cec2:	2100      	movs	r1, #0
 800cec4:	4798      	blx	r3
 800cec6:	4603      	mov	r3, r0
 800cec8:	73bb      	strb	r3, [r7, #14]
      return;
 800ceca:	e08b      	b.n	800cfe4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cecc:	23f0      	movs	r3, #240	; 0xf0
 800cece:	73bb      	strb	r3, [r7, #14]
      return;
 800ced0:	e088      	b.n	800cfe4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ced2:	4b50      	ldr	r3, [pc, #320]	; (800d014 <tcp_listen_input+0x1f0>)
 800ced4:	695a      	ldr	r2, [r3, #20]
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ceda:	4b4e      	ldr	r3, [pc, #312]	; (800d014 <tcp_listen_input+0x1f0>)
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	8ada      	ldrh	r2, [r3, #22]
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ceea:	4b47      	ldr	r3, [pc, #284]	; (800d008 <tcp_listen_input+0x1e4>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	2203      	movs	r2, #3
 800cefa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cefc:	4b41      	ldr	r3, [pc, #260]	; (800d004 <tcp_listen_input+0x1e0>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cf0e:	6978      	ldr	r0, [r7, #20]
 800cf10:	f7ff fa5a 	bl	800c3c8 <tcp_next_iss>
 800cf14:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cf2e:	4b35      	ldr	r3, [pc, #212]	; (800d004 <tcp_listen_input+0x1e0>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	1e5a      	subs	r2, r3, #1
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	691a      	ldr	r2, [r3, #16]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7a5b      	ldrb	r3, [r3, #9]
 800cf4a:	f003 030c 	and.w	r3, r3, #12
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	7a1a      	ldrb	r2, [r3, #8]
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cf5c:	4b2e      	ldr	r3, [pc, #184]	; (800d018 <tcp_listen_input+0x1f4>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	60da      	str	r2, [r3, #12]
 800cf64:	4a2c      	ldr	r2, [pc, #176]	; (800d018 <tcp_listen_input+0x1f4>)
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	f003 f8cf 	bl	801010c <tcp_timer_needed>
 800cf6e:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <tcp_listen_input+0x1f8>)
 800cf70:	2201      	movs	r2, #1
 800cf72:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cf74:	6978      	ldr	r0, [r7, #20]
 800cf76:	f001 fd8d 	bl	800ea94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cf7a:	4b23      	ldr	r3, [pc, #140]	; (800d008 <tcp_listen_input+0x1e4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	89db      	ldrh	r3, [r3, #14]
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f005 f84d 	bl	801203c <ip4_route>
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f7ff fa32 	bl	800c414 <tcp_eff_send_mss_netif>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cfb8:	2112      	movs	r1, #18
 800cfba:	6978      	ldr	r0, [r7, #20]
 800cfbc:	f002 f842 	bl	800f044 <tcp_enqueue_flags>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cfc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d004      	beq.n	800cfd6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6978      	ldr	r0, [r7, #20]
 800cfd0:	f7fe f980 	bl	800b2d4 <tcp_abandon>
      return;
 800cfd4:	e006      	b.n	800cfe4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cfd6:	6978      	ldr	r0, [r7, #20]
 800cfd8:	f002 f922 	bl	800f220 <tcp_output>
  return;
 800cfdc:	e001      	b.n	800cfe2 <tcp_listen_input+0x1be>
    return;
 800cfde:	bf00      	nop
 800cfe0:	e000      	b.n	800cfe4 <tcp_listen_input+0x1c0>
  return;
 800cfe2:	bf00      	nop
}
 800cfe4:	371c      	adds	r7, #28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd90      	pop	{r4, r7, pc}
 800cfea:	bf00      	nop
 800cfec:	200003d8 	.word	0x200003d8
 800cff0:	08016240 	.word	0x08016240
 800cff4:	08016438 	.word	0x08016438
 800cff8:	0801628c 	.word	0x0801628c
 800cffc:	200003d0 	.word	0x200003d0
 800d000:	200003d6 	.word	0x200003d6
 800d004:	200003cc 	.word	0x200003cc
 800d008:	200003bc 	.word	0x200003bc
 800d00c:	200037ac 	.word	0x200037ac
 800d010:	200037b0 	.word	0x200037b0
 800d014:	2000379c 	.word	0x2000379c
 800d018:	20006ce0 	.word	0x20006ce0
 800d01c:	20006cdc 	.word	0x20006cdc

0800d020 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af04      	add	r7, sp, #16
 800d026:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d028:	4b2f      	ldr	r3, [pc, #188]	; (800d0e8 <tcp_timewait_input+0xc8>)
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	f003 0304 	and.w	r3, r3, #4
 800d030:	2b00      	cmp	r3, #0
 800d032:	d153      	bne.n	800d0dc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d106      	bne.n	800d048 <tcp_timewait_input+0x28>
 800d03a:	4b2c      	ldr	r3, [pc, #176]	; (800d0ec <tcp_timewait_input+0xcc>)
 800d03c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d040:	492b      	ldr	r1, [pc, #172]	; (800d0f0 <tcp_timewait_input+0xd0>)
 800d042:	482c      	ldr	r0, [pc, #176]	; (800d0f4 <tcp_timewait_input+0xd4>)
 800d044:	f007 f85a 	bl	80140fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d048:	4b27      	ldr	r3, [pc, #156]	; (800d0e8 <tcp_timewait_input+0xc8>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f003 0302 	and.w	r3, r3, #2
 800d050:	2b00      	cmp	r3, #0
 800d052:	d02a      	beq.n	800d0aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d054:	4b28      	ldr	r3, [pc, #160]	; (800d0f8 <tcp_timewait_input+0xd8>)
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	db2d      	blt.n	800d0be <tcp_timewait_input+0x9e>
 800d062:	4b25      	ldr	r3, [pc, #148]	; (800d0f8 <tcp_timewait_input+0xd8>)
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06a:	6879      	ldr	r1, [r7, #4]
 800d06c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d06e:	440b      	add	r3, r1
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	2b00      	cmp	r3, #0
 800d074:	dc23      	bgt.n	800d0be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d076:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <tcp_timewait_input+0xdc>)
 800d078:	6819      	ldr	r1, [r3, #0]
 800d07a:	4b21      	ldr	r3, [pc, #132]	; (800d100 <tcp_timewait_input+0xe0>)
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	461a      	mov	r2, r3
 800d080:	4b1d      	ldr	r3, [pc, #116]	; (800d0f8 <tcp_timewait_input+0xd8>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d086:	4b1f      	ldr	r3, [pc, #124]	; (800d104 <tcp_timewait_input+0xe4>)
 800d088:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d08a:	885b      	ldrh	r3, [r3, #2]
 800d08c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d08e:	4a1d      	ldr	r2, [pc, #116]	; (800d104 <tcp_timewait_input+0xe4>)
 800d090:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d092:	8812      	ldrh	r2, [r2, #0]
 800d094:	b292      	uxth	r2, r2
 800d096:	9202      	str	r2, [sp, #8]
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	4b1b      	ldr	r3, [pc, #108]	; (800d108 <tcp_timewait_input+0xe8>)
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	4b1b      	ldr	r3, [pc, #108]	; (800d10c <tcp_timewait_input+0xec>)
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f002 fe70 	bl	800fd88 <tcp_rst>
      return;
 800d0a8:	e01b      	b.n	800d0e2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d0aa:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <tcp_timewait_input+0xc8>)
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d003      	beq.n	800d0be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d0b6:	4b16      	ldr	r3, [pc, #88]	; (800d110 <tcp_timewait_input+0xf0>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d0be:	4b10      	ldr	r3, [pc, #64]	; (800d100 <tcp_timewait_input+0xe0>)
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00c      	beq.n	800d0e0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ca:	f043 0302 	orr.w	r3, r3, #2
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f002 f8a3 	bl	800f220 <tcp_output>
  }
  return;
 800d0da:	e001      	b.n	800d0e0 <tcp_timewait_input+0xc0>
    return;
 800d0dc:	bf00      	nop
 800d0de:	e000      	b.n	800d0e2 <tcp_timewait_input+0xc2>
  return;
 800d0e0:	bf00      	nop
}
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	200003d8 	.word	0x200003d8
 800d0ec:	08016240 	.word	0x08016240
 800d0f0:	08016458 	.word	0x08016458
 800d0f4:	0801628c 	.word	0x0801628c
 800d0f8:	200003cc 	.word	0x200003cc
 800d0fc:	200003d0 	.word	0x200003d0
 800d100:	200003d6 	.word	0x200003d6
 800d104:	200003bc 	.word	0x200003bc
 800d108:	200037ac 	.word	0x200037ac
 800d10c:	200037b0 	.word	0x200037b0
 800d110:	20006ce4 	.word	0x20006ce4

0800d114 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d114:	b590      	push	{r4, r7, lr}
 800d116:	b08d      	sub	sp, #52	; 0x34
 800d118:	af04      	add	r7, sp, #16
 800d11a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d106      	bne.n	800d138 <tcp_process+0x24>
 800d12a:	4ba5      	ldr	r3, [pc, #660]	; (800d3c0 <tcp_process+0x2ac>)
 800d12c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d130:	49a4      	ldr	r1, [pc, #656]	; (800d3c4 <tcp_process+0x2b0>)
 800d132:	48a5      	ldr	r0, [pc, #660]	; (800d3c8 <tcp_process+0x2b4>)
 800d134:	f006 ffe2 	bl	80140fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d138:	4ba4      	ldr	r3, [pc, #656]	; (800d3cc <tcp_process+0x2b8>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b00      	cmp	r3, #0
 800d142:	d04e      	beq.n	800d1e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	7d1b      	ldrb	r3, [r3, #20]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d108      	bne.n	800d15e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d150:	4b9f      	ldr	r3, [pc, #636]	; (800d3d0 <tcp_process+0x2bc>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	429a      	cmp	r2, r3
 800d156:	d123      	bne.n	800d1a0 <tcp_process+0x8c>
        acceptable = 1;
 800d158:	2301      	movs	r3, #1
 800d15a:	76fb      	strb	r3, [r7, #27]
 800d15c:	e020      	b.n	800d1a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d162:	4b9c      	ldr	r3, [pc, #624]	; (800d3d4 <tcp_process+0x2c0>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d102      	bne.n	800d170 <tcp_process+0x5c>
        acceptable = 1;
 800d16a:	2301      	movs	r3, #1
 800d16c:	76fb      	strb	r3, [r7, #27]
 800d16e:	e017      	b.n	800d1a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d170:	4b98      	ldr	r3, [pc, #608]	; (800d3d4 <tcp_process+0x2c0>)
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	db10      	blt.n	800d1a0 <tcp_process+0x8c>
 800d17e:	4b95      	ldr	r3, [pc, #596]	; (800d3d4 <tcp_process+0x2c0>)
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	6879      	ldr	r1, [r7, #4]
 800d188:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d18a:	440b      	add	r3, r1
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dc06      	bgt.n	800d1a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8b5b      	ldrh	r3, [r3, #26]
 800d196:	f043 0302 	orr.w	r3, r3, #2
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d1a0:	7efb      	ldrb	r3, [r7, #27]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d01b      	beq.n	800d1de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	7d1b      	ldrb	r3, [r3, #20]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d106      	bne.n	800d1bc <tcp_process+0xa8>
 800d1ae:	4b84      	ldr	r3, [pc, #528]	; (800d3c0 <tcp_process+0x2ac>)
 800d1b0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d1b4:	4988      	ldr	r1, [pc, #544]	; (800d3d8 <tcp_process+0x2c4>)
 800d1b6:	4884      	ldr	r0, [pc, #528]	; (800d3c8 <tcp_process+0x2b4>)
 800d1b8:	f006 ffa0 	bl	80140fc <iprintf>
      recv_flags |= TF_RESET;
 800d1bc:	4b87      	ldr	r3, [pc, #540]	; (800d3dc <tcp_process+0x2c8>)
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	f043 0308 	orr.w	r3, r3, #8
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	4b85      	ldr	r3, [pc, #532]	; (800d3dc <tcp_process+0x2c8>)
 800d1c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	8b5b      	ldrh	r3, [r3, #26]
 800d1ce:	f023 0301 	bic.w	r3, r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d1d8:	f06f 030d 	mvn.w	r3, #13
 800d1dc:	e37a      	b.n	800d8d4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e378      	b.n	800d8d4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d1e2:	4b7a      	ldr	r3, [pc, #488]	; (800d3cc <tcp_process+0x2b8>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	f003 0302 	and.w	r3, r3, #2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d010      	beq.n	800d210 <tcp_process+0xfc>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	7d1b      	ldrb	r3, [r3, #20]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d00c      	beq.n	800d210 <tcp_process+0xfc>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7d1b      	ldrb	r3, [r3, #20]
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d008      	beq.n	800d210 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	8b5b      	ldrh	r3, [r3, #26]
 800d202:	f043 0302 	orr.w	r3, r3, #2
 800d206:	b29a      	uxth	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	e361      	b.n	800d8d4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	8b5b      	ldrh	r3, [r3, #26]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d103      	bne.n	800d224 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d21c:	4b70      	ldr	r3, [pc, #448]	; (800d3e0 <tcp_process+0x2cc>)
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f001 fc2d 	bl	800ea94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	7d1b      	ldrb	r3, [r3, #20]
 800d23e:	3b02      	subs	r3, #2
 800d240:	2b07      	cmp	r3, #7
 800d242:	f200 8337 	bhi.w	800d8b4 <tcp_process+0x7a0>
 800d246:	a201      	add	r2, pc, #4	; (adr r2, 800d24c <tcp_process+0x138>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d26d 	.word	0x0800d26d
 800d250:	0800d49d 	.word	0x0800d49d
 800d254:	0800d615 	.word	0x0800d615
 800d258:	0800d63f 	.word	0x0800d63f
 800d25c:	0800d763 	.word	0x0800d763
 800d260:	0800d615 	.word	0x0800d615
 800d264:	0800d7ef 	.word	0x0800d7ef
 800d268:	0800d87f 	.word	0x0800d87f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d26c:	4b57      	ldr	r3, [pc, #348]	; (800d3cc <tcp_process+0x2b8>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	f003 0310 	and.w	r3, r3, #16
 800d274:	2b00      	cmp	r3, #0
 800d276:	f000 80e4 	beq.w	800d442 <tcp_process+0x32e>
 800d27a:	4b54      	ldr	r3, [pc, #336]	; (800d3cc <tcp_process+0x2b8>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	f003 0302 	and.w	r3, r3, #2
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 80dd 	beq.w	800d442 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	4b50      	ldr	r3, [pc, #320]	; (800d3d0 <tcp_process+0x2bc>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	429a      	cmp	r2, r3
 800d294:	f040 80d5 	bne.w	800d442 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d298:	4b4e      	ldr	r3, [pc, #312]	; (800d3d4 <tcp_process+0x2c0>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d2aa:	4b49      	ldr	r3, [pc, #292]	; (800d3d0 <tcp_process+0x2bc>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d2b2:	4b4c      	ldr	r3, [pc, #304]	; (800d3e4 <tcp_process+0x2d0>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	89db      	ldrh	r3, [r3, #14]
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d2cc:	4b41      	ldr	r3, [pc, #260]	; (800d3d4 <tcp_process+0x2c0>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	1e5a      	subs	r2, r3, #1
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2204      	movs	r2, #4
 800d2da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f004 fea9 	bl	801203c <ip4_route>
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3304      	adds	r3, #4
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f7ff f88e 	bl	800c414 <tcp_eff_send_mss_netif>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d304:	009a      	lsls	r2, r3, #2
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d310:	428b      	cmp	r3, r1
 800d312:	bf38      	it	cc
 800d314:	460b      	movcc	r3, r1
 800d316:	429a      	cmp	r2, r3
 800d318:	d204      	bcs.n	800d324 <tcp_process+0x210>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	b29b      	uxth	r3, r3
 800d322:	e00d      	b.n	800d340 <tcp_process+0x22c>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d32e:	4293      	cmp	r3, r2
 800d330:	d904      	bls.n	800d33c <tcp_process+0x228>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d336:	005b      	lsls	r3, r3, #1
 800d338:	b29b      	uxth	r3, r3
 800d33a:	e001      	b.n	800d340 <tcp_process+0x22c>
 800d33c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d106      	bne.n	800d35e <tcp_process+0x24a>
 800d350:	4b1b      	ldr	r3, [pc, #108]	; (800d3c0 <tcp_process+0x2ac>)
 800d352:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d356:	4924      	ldr	r1, [pc, #144]	; (800d3e8 <tcp_process+0x2d4>)
 800d358:	481b      	ldr	r0, [pc, #108]	; (800d3c8 <tcp_process+0x2b4>)
 800d35a:	f006 fecf 	bl	80140fc <iprintf>
        --pcb->snd_queuelen;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d364:	3b01      	subs	r3, #1
 800d366:	b29a      	uxth	r2, r3
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d111      	bne.n	800d39e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d37e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <tcp_process+0x280>
 800d386:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <tcp_process+0x2ac>)
 800d388:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d38c:	4917      	ldr	r1, [pc, #92]	; (800d3ec <tcp_process+0x2d8>)
 800d38e:	480e      	ldr	r0, [pc, #56]	; (800d3c8 <tcp_process+0x2b4>)
 800d390:	f006 feb4 	bl	80140fc <iprintf>
          pcb->unsent = rseg->next;
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	66da      	str	r2, [r3, #108]	; 0x6c
 800d39c:	e003      	b.n	800d3a6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d3a6:	69f8      	ldr	r0, [r7, #28]
 800d3a8:	f7fe fd3d 	bl	800be26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d11d      	bne.n	800d3f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ba:	861a      	strh	r2, [r3, #48]	; 0x30
 800d3bc:	e01f      	b.n	800d3fe <tcp_process+0x2ea>
 800d3be:	bf00      	nop
 800d3c0:	08016240 	.word	0x08016240
 800d3c4:	08016478 	.word	0x08016478
 800d3c8:	0801628c 	.word	0x0801628c
 800d3cc:	200003d8 	.word	0x200003d8
 800d3d0:	200003d0 	.word	0x200003d0
 800d3d4:	200003cc 	.word	0x200003cc
 800d3d8:	08016494 	.word	0x08016494
 800d3dc:	200003d9 	.word	0x200003d9
 800d3e0:	20006ce4 	.word	0x20006ce4
 800d3e4:	200003bc 	.word	0x200003bc
 800d3e8:	080164b4 	.word	0x080164b4
 800d3ec:	080164cc 	.word	0x080164cc
        } else {
          pcb->rtime = 0;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d404:	2b00      	cmp	r3, #0
 800d406:	d00a      	beq.n	800d41e <tcp_process+0x30a>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	6910      	ldr	r0, [r2, #16]
 800d412:	2200      	movs	r2, #0
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	4798      	blx	r3
 800d418:	4603      	mov	r3, r0
 800d41a:	76bb      	strb	r3, [r7, #26]
 800d41c:	e001      	b.n	800d422 <tcp_process+0x30e>
 800d41e:	2300      	movs	r3, #0
 800d420:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d422:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d426:	f113 0f0d 	cmn.w	r3, #13
 800d42a:	d102      	bne.n	800d432 <tcp_process+0x31e>
          return ERR_ABRT;
 800d42c:	f06f 030c 	mvn.w	r3, #12
 800d430:	e250      	b.n	800d8d4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	8b5b      	ldrh	r3, [r3, #26]
 800d436:	f043 0302 	orr.w	r3, r3, #2
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d440:	e23a      	b.n	800d8b8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d442:	4b9d      	ldr	r3, [pc, #628]	; (800d6b8 <tcp_process+0x5a4>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	f003 0310 	and.w	r3, r3, #16
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f000 8234 	beq.w	800d8b8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d450:	4b9a      	ldr	r3, [pc, #616]	; (800d6bc <tcp_process+0x5a8>)
 800d452:	6819      	ldr	r1, [r3, #0]
 800d454:	4b9a      	ldr	r3, [pc, #616]	; (800d6c0 <tcp_process+0x5ac>)
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	461a      	mov	r2, r3
 800d45a:	4b9a      	ldr	r3, [pc, #616]	; (800d6c4 <tcp_process+0x5b0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d460:	4b99      	ldr	r3, [pc, #612]	; (800d6c8 <tcp_process+0x5b4>)
 800d462:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d464:	885b      	ldrh	r3, [r3, #2]
 800d466:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d468:	4a97      	ldr	r2, [pc, #604]	; (800d6c8 <tcp_process+0x5b4>)
 800d46a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d46c:	8812      	ldrh	r2, [r2, #0]
 800d46e:	b292      	uxth	r2, r2
 800d470:	9202      	str	r2, [sp, #8]
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	4b95      	ldr	r3, [pc, #596]	; (800d6cc <tcp_process+0x5b8>)
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	4b95      	ldr	r3, [pc, #596]	; (800d6d0 <tcp_process+0x5bc>)
 800d47a:	4602      	mov	r2, r0
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f002 fc83 	bl	800fd88 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d488:	2b05      	cmp	r3, #5
 800d48a:	f200 8215 	bhi.w	800d8b8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f002 fa4d 	bl	800f934 <tcp_rexmit_rto>
      break;
 800d49a:	e20d      	b.n	800d8b8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d49c:	4b86      	ldr	r3, [pc, #536]	; (800d6b8 <tcp_process+0x5a4>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f000 80a1 	beq.w	800d5ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d4aa:	4b84      	ldr	r3, [pc, #528]	; (800d6bc <tcp_process+0x5a8>)
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	db7e      	blt.n	800d5b8 <tcp_process+0x4a4>
 800d4ba:	4b80      	ldr	r3, [pc, #512]	; (800d6bc <tcp_process+0x5a8>)
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dc77      	bgt.n	800d5b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2204      	movs	r2, #4
 800d4cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d102      	bne.n	800d4dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d4d6:	23fa      	movs	r3, #250	; 0xfa
 800d4d8:	76bb      	strb	r3, [r7, #26]
 800d4da:	e01d      	b.n	800d518 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <tcp_process+0x3e0>
 800d4e6:	4b7b      	ldr	r3, [pc, #492]	; (800d6d4 <tcp_process+0x5c0>)
 800d4e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d4ec:	497a      	ldr	r1, [pc, #488]	; (800d6d8 <tcp_process+0x5c4>)
 800d4ee:	487b      	ldr	r0, [pc, #492]	; (800d6dc <tcp_process+0x5c8>)
 800d4f0:	f006 fe04 	bl	80140fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4f8:	699b      	ldr	r3, [r3, #24]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00a      	beq.n	800d514 <tcp_process+0x400>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d502:	699b      	ldr	r3, [r3, #24]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	6910      	ldr	r0, [r2, #16]
 800d508:	2200      	movs	r2, #0
 800d50a:	6879      	ldr	r1, [r7, #4]
 800d50c:	4798      	blx	r3
 800d50e:	4603      	mov	r3, r0
 800d510:	76bb      	strb	r3, [r7, #26]
 800d512:	e001      	b.n	800d518 <tcp_process+0x404>
 800d514:	23f0      	movs	r3, #240	; 0xf0
 800d516:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d518:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00a      	beq.n	800d536 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d520:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d524:	f113 0f0d 	cmn.w	r3, #13
 800d528:	d002      	beq.n	800d530 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7fd ff90 	bl	800b450 <tcp_abort>
            }
            return ERR_ABRT;
 800d530:	f06f 030c 	mvn.w	r3, #12
 800d534:	e1ce      	b.n	800d8d4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fae0 	bl	800dafc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d53c:	4b68      	ldr	r3, [pc, #416]	; (800d6e0 <tcp_process+0x5cc>)
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d005      	beq.n	800d550 <tcp_process+0x43c>
            recv_acked--;
 800d544:	4b66      	ldr	r3, [pc, #408]	; (800d6e0 <tcp_process+0x5cc>)
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	3b01      	subs	r3, #1
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	4b64      	ldr	r3, [pc, #400]	; (800d6e0 <tcp_process+0x5cc>)
 800d54e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d554:	009a      	lsls	r2, r3, #2
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d55a:	005b      	lsls	r3, r3, #1
 800d55c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d560:	428b      	cmp	r3, r1
 800d562:	bf38      	it	cc
 800d564:	460b      	movcc	r3, r1
 800d566:	429a      	cmp	r2, r3
 800d568:	d204      	bcs.n	800d574 <tcp_process+0x460>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	b29b      	uxth	r3, r3
 800d572:	e00d      	b.n	800d590 <tcp_process+0x47c>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d57e:	4293      	cmp	r3, r2
 800d580:	d904      	bls.n	800d58c <tcp_process+0x478>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d586:	005b      	lsls	r3, r3, #1
 800d588:	b29b      	uxth	r3, r3
 800d58a:	e001      	b.n	800d590 <tcp_process+0x47c>
 800d58c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d596:	4b53      	ldr	r3, [pc, #332]	; (800d6e4 <tcp_process+0x5d0>)
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	f003 0320 	and.w	r3, r3, #32
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d037      	beq.n	800d612 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	8b5b      	ldrh	r3, [r3, #26]
 800d5a6:	f043 0302 	orr.w	r3, r3, #2
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2207      	movs	r2, #7
 800d5b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d5b6:	e02c      	b.n	800d612 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5b8:	4b40      	ldr	r3, [pc, #256]	; (800d6bc <tcp_process+0x5a8>)
 800d5ba:	6819      	ldr	r1, [r3, #0]
 800d5bc:	4b40      	ldr	r3, [pc, #256]	; (800d6c0 <tcp_process+0x5ac>)
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4b40      	ldr	r3, [pc, #256]	; (800d6c4 <tcp_process+0x5b0>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5c8:	4b3f      	ldr	r3, [pc, #252]	; (800d6c8 <tcp_process+0x5b4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5cc:	885b      	ldrh	r3, [r3, #2]
 800d5ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5d0:	4a3d      	ldr	r2, [pc, #244]	; (800d6c8 <tcp_process+0x5b4>)
 800d5d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5d4:	8812      	ldrh	r2, [r2, #0]
 800d5d6:	b292      	uxth	r2, r2
 800d5d8:	9202      	str	r2, [sp, #8]
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	4b3b      	ldr	r3, [pc, #236]	; (800d6cc <tcp_process+0x5b8>)
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4b3b      	ldr	r3, [pc, #236]	; (800d6d0 <tcp_process+0x5bc>)
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f002 fbcf 	bl	800fd88 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d5ea:	e167      	b.n	800d8bc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d5ec:	4b32      	ldr	r3, [pc, #200]	; (800d6b8 <tcp_process+0x5a4>)
 800d5ee:	781b      	ldrb	r3, [r3, #0]
 800d5f0:	f003 0302 	and.w	r3, r3, #2
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f000 8161 	beq.w	800d8bc <tcp_process+0x7a8>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fe:	1e5a      	subs	r2, r3, #1
 800d600:	4b30      	ldr	r3, [pc, #192]	; (800d6c4 <tcp_process+0x5b0>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	f040 8159 	bne.w	800d8bc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f002 f9b4 	bl	800f978 <tcp_rexmit>
      break;
 800d610:	e154      	b.n	800d8bc <tcp_process+0x7a8>
 800d612:	e153      	b.n	800d8bc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fa71 	bl	800dafc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d61a:	4b32      	ldr	r3, [pc, #200]	; (800d6e4 <tcp_process+0x5d0>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 0320 	and.w	r3, r3, #32
 800d622:	2b00      	cmp	r3, #0
 800d624:	f000 814c 	beq.w	800d8c0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	8b5b      	ldrh	r3, [r3, #26]
 800d62c:	f043 0302 	orr.w	r3, r3, #2
 800d630:	b29a      	uxth	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2207      	movs	r2, #7
 800d63a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d63c:	e140      	b.n	800d8c0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fa5c 	bl	800dafc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d644:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <tcp_process+0x5d0>)
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f003 0320 	and.w	r3, r3, #32
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d071      	beq.n	800d734 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d650:	4b19      	ldr	r3, [pc, #100]	; (800d6b8 <tcp_process+0x5a4>)
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 0310 	and.w	r3, r3, #16
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d060      	beq.n	800d71e <tcp_process+0x60a>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d660:	4b16      	ldr	r3, [pc, #88]	; (800d6bc <tcp_process+0x5a8>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	429a      	cmp	r2, r3
 800d666:	d15a      	bne.n	800d71e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d156      	bne.n	800d71e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	8b5b      	ldrh	r3, [r3, #26]
 800d674:	f043 0302 	orr.w	r3, r3, #2
 800d678:	b29a      	uxth	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7fe fdbe 	bl	800c200 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d684:	4b18      	ldr	r3, [pc, #96]	; (800d6e8 <tcp_process+0x5d4>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d105      	bne.n	800d69a <tcp_process+0x586>
 800d68e:	4b16      	ldr	r3, [pc, #88]	; (800d6e8 <tcp_process+0x5d4>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	4a14      	ldr	r2, [pc, #80]	; (800d6e8 <tcp_process+0x5d4>)
 800d696:	6013      	str	r3, [r2, #0]
 800d698:	e02e      	b.n	800d6f8 <tcp_process+0x5e4>
 800d69a:	4b13      	ldr	r3, [pc, #76]	; (800d6e8 <tcp_process+0x5d4>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	617b      	str	r3, [r7, #20]
 800d6a0:	e027      	b.n	800d6f2 <tcp_process+0x5de>
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d11f      	bne.n	800d6ec <tcp_process+0x5d8>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68da      	ldr	r2, [r3, #12]
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	60da      	str	r2, [r3, #12]
 800d6b4:	e020      	b.n	800d6f8 <tcp_process+0x5e4>
 800d6b6:	bf00      	nop
 800d6b8:	200003d8 	.word	0x200003d8
 800d6bc:	200003d0 	.word	0x200003d0
 800d6c0:	200003d6 	.word	0x200003d6
 800d6c4:	200003cc 	.word	0x200003cc
 800d6c8:	200003bc 	.word	0x200003bc
 800d6cc:	200037ac 	.word	0x200037ac
 800d6d0:	200037b0 	.word	0x200037b0
 800d6d4:	08016240 	.word	0x08016240
 800d6d8:	080164e0 	.word	0x080164e0
 800d6dc:	0801628c 	.word	0x0801628c
 800d6e0:	200003d4 	.word	0x200003d4
 800d6e4:	200003d9 	.word	0x200003d9
 800d6e8:	20006ce0 	.word	0x20006ce0
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1d4      	bne.n	800d6a2 <tcp_process+0x58e>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	60da      	str	r2, [r3, #12]
 800d6fe:	4b77      	ldr	r3, [pc, #476]	; (800d8dc <tcp_process+0x7c8>)
 800d700:	2201      	movs	r2, #1
 800d702:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	220a      	movs	r2, #10
 800d708:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d70a:	4b75      	ldr	r3, [pc, #468]	; (800d8e0 <tcp_process+0x7cc>)
 800d70c:	681a      	ldr	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	60da      	str	r2, [r3, #12]
 800d712:	4a73      	ldr	r2, [pc, #460]	; (800d8e0 <tcp_process+0x7cc>)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6013      	str	r3, [r2, #0]
 800d718:	f002 fcf8 	bl	801010c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d71c:	e0d2      	b.n	800d8c4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	8b5b      	ldrh	r3, [r3, #26]
 800d722:	f043 0302 	orr.w	r3, r3, #2
 800d726:	b29a      	uxth	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2208      	movs	r2, #8
 800d730:	751a      	strb	r2, [r3, #20]
      break;
 800d732:	e0c7      	b.n	800d8c4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d734:	4b6b      	ldr	r3, [pc, #428]	; (800d8e4 <tcp_process+0x7d0>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	f003 0310 	and.w	r3, r3, #16
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f000 80c1 	beq.w	800d8c4 <tcp_process+0x7b0>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d746:	4b68      	ldr	r3, [pc, #416]	; (800d8e8 <tcp_process+0x7d4>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	f040 80ba 	bne.w	800d8c4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d754:	2b00      	cmp	r3, #0
 800d756:	f040 80b5 	bne.w	800d8c4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2206      	movs	r2, #6
 800d75e:	751a      	strb	r2, [r3, #20]
      break;
 800d760:	e0b0      	b.n	800d8c4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f9ca 	bl	800dafc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d768:	4b60      	ldr	r3, [pc, #384]	; (800d8ec <tcp_process+0x7d8>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	f003 0320 	and.w	r3, r3, #32
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 80a9 	beq.w	800d8c8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	8b5b      	ldrh	r3, [r3, #26]
 800d77a:	f043 0302 	orr.w	r3, r3, #2
 800d77e:	b29a      	uxth	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7fe fd3b 	bl	800c200 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d78a:	4b59      	ldr	r3, [pc, #356]	; (800d8f0 <tcp_process+0x7dc>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	429a      	cmp	r2, r3
 800d792:	d105      	bne.n	800d7a0 <tcp_process+0x68c>
 800d794:	4b56      	ldr	r3, [pc, #344]	; (800d8f0 <tcp_process+0x7dc>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	4a55      	ldr	r2, [pc, #340]	; (800d8f0 <tcp_process+0x7dc>)
 800d79c:	6013      	str	r3, [r2, #0]
 800d79e:	e013      	b.n	800d7c8 <tcp_process+0x6b4>
 800d7a0:	4b53      	ldr	r3, [pc, #332]	; (800d8f0 <tcp_process+0x7dc>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	613b      	str	r3, [r7, #16]
 800d7a6:	e00c      	b.n	800d7c2 <tcp_process+0x6ae>
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d104      	bne.n	800d7bc <tcp_process+0x6a8>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68da      	ldr	r2, [r3, #12]
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	60da      	str	r2, [r3, #12]
 800d7ba:	e005      	b.n	800d7c8 <tcp_process+0x6b4>
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	613b      	str	r3, [r7, #16]
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1ef      	bne.n	800d7a8 <tcp_process+0x694>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	60da      	str	r2, [r3, #12]
 800d7ce:	4b43      	ldr	r3, [pc, #268]	; (800d8dc <tcp_process+0x7c8>)
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	220a      	movs	r2, #10
 800d7d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d7da:	4b41      	ldr	r3, [pc, #260]	; (800d8e0 <tcp_process+0x7cc>)
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	60da      	str	r2, [r3, #12]
 800d7e2:	4a3f      	ldr	r2, [pc, #252]	; (800d8e0 <tcp_process+0x7cc>)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	f002 fc90 	bl	801010c <tcp_timer_needed>
      }
      break;
 800d7ec:	e06c      	b.n	800d8c8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f984 	bl	800dafc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d7f4:	4b3b      	ldr	r3, [pc, #236]	; (800d8e4 <tcp_process+0x7d0>)
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f003 0310 	and.w	r3, r3, #16
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d065      	beq.n	800d8cc <tcp_process+0x7b8>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d804:	4b38      	ldr	r3, [pc, #224]	; (800d8e8 <tcp_process+0x7d4>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d15f      	bne.n	800d8cc <tcp_process+0x7b8>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d15b      	bne.n	800d8cc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7fe fcf3 	bl	800c200 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d81a:	4b35      	ldr	r3, [pc, #212]	; (800d8f0 <tcp_process+0x7dc>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d105      	bne.n	800d830 <tcp_process+0x71c>
 800d824:	4b32      	ldr	r3, [pc, #200]	; (800d8f0 <tcp_process+0x7dc>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	4a31      	ldr	r2, [pc, #196]	; (800d8f0 <tcp_process+0x7dc>)
 800d82c:	6013      	str	r3, [r2, #0]
 800d82e:	e013      	b.n	800d858 <tcp_process+0x744>
 800d830:	4b2f      	ldr	r3, [pc, #188]	; (800d8f0 <tcp_process+0x7dc>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e00c      	b.n	800d852 <tcp_process+0x73e>
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d104      	bne.n	800d84c <tcp_process+0x738>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	68da      	ldr	r2, [r3, #12]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	60da      	str	r2, [r3, #12]
 800d84a:	e005      	b.n	800d858 <tcp_process+0x744>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	60fb      	str	r3, [r7, #12]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1ef      	bne.n	800d838 <tcp_process+0x724>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	60da      	str	r2, [r3, #12]
 800d85e:	4b1f      	ldr	r3, [pc, #124]	; (800d8dc <tcp_process+0x7c8>)
 800d860:	2201      	movs	r2, #1
 800d862:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	220a      	movs	r2, #10
 800d868:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d86a:	4b1d      	ldr	r3, [pc, #116]	; (800d8e0 <tcp_process+0x7cc>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	60da      	str	r2, [r3, #12]
 800d872:	4a1b      	ldr	r2, [pc, #108]	; (800d8e0 <tcp_process+0x7cc>)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6013      	str	r3, [r2, #0]
 800d878:	f002 fc48 	bl	801010c <tcp_timer_needed>
      }
      break;
 800d87c:	e026      	b.n	800d8cc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f93c 	bl	800dafc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d884:	4b17      	ldr	r3, [pc, #92]	; (800d8e4 <tcp_process+0x7d0>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f003 0310 	and.w	r3, r3, #16
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01f      	beq.n	800d8d0 <tcp_process+0x7bc>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d894:	4b14      	ldr	r3, [pc, #80]	; (800d8e8 <tcp_process+0x7d4>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d119      	bne.n	800d8d0 <tcp_process+0x7bc>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d115      	bne.n	800d8d0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d8a4:	4b11      	ldr	r3, [pc, #68]	; (800d8ec <tcp_process+0x7d8>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	f043 0310 	orr.w	r3, r3, #16
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	4b0f      	ldr	r3, [pc, #60]	; (800d8ec <tcp_process+0x7d8>)
 800d8b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d8b2:	e00d      	b.n	800d8d0 <tcp_process+0x7bc>
    default:
      break;
 800d8b4:	bf00      	nop
 800d8b6:	e00c      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8b8:	bf00      	nop
 800d8ba:	e00a      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8bc:	bf00      	nop
 800d8be:	e008      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8c0:	bf00      	nop
 800d8c2:	e006      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8c4:	bf00      	nop
 800d8c6:	e004      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8c8:	bf00      	nop
 800d8ca:	e002      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8cc:	bf00      	nop
 800d8ce:	e000      	b.n	800d8d2 <tcp_process+0x7be>
      break;
 800d8d0:	bf00      	nop
  }
  return ERR_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3724      	adds	r7, #36	; 0x24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd90      	pop	{r4, r7, pc}
 800d8dc:	20006cdc 	.word	0x20006cdc
 800d8e0:	20006cf0 	.word	0x20006cf0
 800d8e4:	200003d8 	.word	0x200003d8
 800d8e8:	200003d0 	.word	0x200003d0
 800d8ec:	200003d9 	.word	0x200003d9
 800d8f0:	20006ce0 	.word	0x20006ce0

0800d8f4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d8f4:	b590      	push	{r4, r7, lr}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d106      	bne.n	800d912 <tcp_oos_insert_segment+0x1e>
 800d904:	4b3b      	ldr	r3, [pc, #236]	; (800d9f4 <tcp_oos_insert_segment+0x100>)
 800d906:	f240 421f 	movw	r2, #1055	; 0x41f
 800d90a:	493b      	ldr	r1, [pc, #236]	; (800d9f8 <tcp_oos_insert_segment+0x104>)
 800d90c:	483b      	ldr	r0, [pc, #236]	; (800d9fc <tcp_oos_insert_segment+0x108>)
 800d90e:	f006 fbf5 	bl	80140fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	899b      	ldrh	r3, [r3, #12]
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fb fd4c 	bl	80093b8 <lwip_htons>
 800d920:	4603      	mov	r3, r0
 800d922:	b2db      	uxtb	r3, r3
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d028      	beq.n	800d97e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d92c:	6838      	ldr	r0, [r7, #0]
 800d92e:	f7fe fa65 	bl	800bdfc <tcp_segs_free>
    next = NULL;
 800d932:	2300      	movs	r3, #0
 800d934:	603b      	str	r3, [r7, #0]
 800d936:	e056      	b.n	800d9e6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	899b      	ldrh	r3, [r3, #12]
 800d93e:	b29b      	uxth	r3, r3
 800d940:	4618      	mov	r0, r3
 800d942:	f7fb fd39 	bl	80093b8 <lwip_htons>
 800d946:	4603      	mov	r3, r0
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 0301 	and.w	r3, r3, #1
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00d      	beq.n	800d96e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	899b      	ldrh	r3, [r3, #12]
 800d958:	b29c      	uxth	r4, r3
 800d95a:	2001      	movs	r0, #1
 800d95c:	f7fb fd2c 	bl	80093b8 <lwip_htons>
 800d960:	4603      	mov	r3, r0
 800d962:	461a      	mov	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	4322      	orrs	r2, r4
 800d96a:	b292      	uxth	r2, r2
 800d96c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7fe fa54 	bl	800be26 <tcp_seg_free>
    while (next &&
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d00e      	beq.n	800d9a2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	891b      	ldrh	r3, [r3, #8]
 800d988:	461a      	mov	r2, r3
 800d98a:	4b1d      	ldr	r3, [pc, #116]	; (800da00 <tcp_oos_insert_segment+0x10c>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	441a      	add	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	8909      	ldrh	r1, [r1, #8]
 800d99a:	440b      	add	r3, r1
 800d99c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	daca      	bge.n	800d938 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d01e      	beq.n	800d9e6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	891b      	ldrh	r3, [r3, #8]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4b14      	ldr	r3, [pc, #80]	; (800da00 <tcp_oos_insert_segment+0x10c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	441a      	add	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dd12      	ble.n	800d9e6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	4b0d      	ldr	r3, [pc, #52]	; (800da00 <tcp_oos_insert_segment+0x10c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	891b      	ldrh	r3, [r3, #8]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f7fc fe17 	bl	800a614 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	601a      	str	r2, [r3, #0]
}
 800d9ec:	bf00      	nop
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd90      	pop	{r4, r7, pc}
 800d9f4:	08016240 	.word	0x08016240
 800d9f8:	08016500 	.word	0x08016500
 800d9fc:	0801628c 	.word	0x0801628c
 800da00:	200003cc 	.word	0x200003cc

0800da04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800da04:	b5b0      	push	{r4, r5, r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800da12:	e03e      	b.n	800da92 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	4618      	mov	r0, r3
 800da24:	f7fd f804 	bl	800aa30 <pbuf_clen>
 800da28:	4603      	mov	r3, r0
 800da2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da32:	8a7a      	ldrh	r2, [r7, #18]
 800da34:	429a      	cmp	r2, r3
 800da36:	d906      	bls.n	800da46 <tcp_free_acked_segments+0x42>
 800da38:	4b2a      	ldr	r3, [pc, #168]	; (800dae4 <tcp_free_acked_segments+0xe0>)
 800da3a:	f240 4257 	movw	r2, #1111	; 0x457
 800da3e:	492a      	ldr	r1, [pc, #168]	; (800dae8 <tcp_free_acked_segments+0xe4>)
 800da40:	482a      	ldr	r0, [pc, #168]	; (800daec <tcp_free_acked_segments+0xe8>)
 800da42:	f006 fb5b 	bl	80140fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800da4c:	8a7b      	ldrh	r3, [r7, #18]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	b29a      	uxth	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	891a      	ldrh	r2, [r3, #8]
 800da5c:	4b24      	ldr	r3, [pc, #144]	; (800daf0 <tcp_free_acked_segments+0xec>)
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	4413      	add	r3, r2
 800da62:	b29a      	uxth	r2, r3
 800da64:	4b22      	ldr	r3, [pc, #136]	; (800daf0 <tcp_free_acked_segments+0xec>)
 800da66:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800da68:	6978      	ldr	r0, [r7, #20]
 800da6a:	f7fe f9dc 	bl	800be26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00c      	beq.n	800da92 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d109      	bne.n	800da92 <tcp_free_acked_segments+0x8e>
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d106      	bne.n	800da92 <tcp_free_acked_segments+0x8e>
 800da84:	4b17      	ldr	r3, [pc, #92]	; (800dae4 <tcp_free_acked_segments+0xe0>)
 800da86:	f240 4261 	movw	r2, #1121	; 0x461
 800da8a:	491a      	ldr	r1, [pc, #104]	; (800daf4 <tcp_free_acked_segments+0xf0>)
 800da8c:	4817      	ldr	r0, [pc, #92]	; (800daec <tcp_free_acked_segments+0xe8>)
 800da8e:	f006 fb35 	bl	80140fc <iprintf>
  while (seg_list != NULL &&
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d020      	beq.n	800dada <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fb fc9f 	bl	80093e2 <lwip_htonl>
 800daa4:	4604      	mov	r4, r0
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	891b      	ldrh	r3, [r3, #8]
 800daaa:	461d      	mov	r5, r3
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	899b      	ldrh	r3, [r3, #12]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fb fc7f 	bl	80093b8 <lwip_htons>
 800daba:	4603      	mov	r3, r0
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	f003 0303 	and.w	r3, r3, #3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <tcp_free_acked_segments+0xc6>
 800dac6:	2301      	movs	r3, #1
 800dac8:	e000      	b.n	800dacc <tcp_free_acked_segments+0xc8>
 800daca:	2300      	movs	r3, #0
 800dacc:	442b      	add	r3, r5
 800dace:	18e2      	adds	r2, r4, r3
 800dad0:	4b09      	ldr	r3, [pc, #36]	; (800daf8 <tcp_free_acked_segments+0xf4>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	dd9c      	ble.n	800da14 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dada:	68bb      	ldr	r3, [r7, #8]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bdb0      	pop	{r4, r5, r7, pc}
 800dae4:	08016240 	.word	0x08016240
 800dae8:	08016528 	.word	0x08016528
 800daec:	0801628c 	.word	0x0801628c
 800daf0:	200003d4 	.word	0x200003d4
 800daf4:	08016550 	.word	0x08016550
 800daf8:	200003d0 	.word	0x200003d0

0800dafc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dafc:	b5b0      	push	{r4, r5, r7, lr}
 800dafe:	b094      	sub	sp, #80	; 0x50
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <tcp_receive+0x20>
 800db0e:	4ba6      	ldr	r3, [pc, #664]	; (800dda8 <tcp_receive+0x2ac>)
 800db10:	f240 427b 	movw	r2, #1147	; 0x47b
 800db14:	49a5      	ldr	r1, [pc, #660]	; (800ddac <tcp_receive+0x2b0>)
 800db16:	48a6      	ldr	r0, [pc, #664]	; (800ddb0 <tcp_receive+0x2b4>)
 800db18:	f006 faf0 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	7d1b      	ldrb	r3, [r3, #20]
 800db20:	2b03      	cmp	r3, #3
 800db22:	d806      	bhi.n	800db32 <tcp_receive+0x36>
 800db24:	4ba0      	ldr	r3, [pc, #640]	; (800dda8 <tcp_receive+0x2ac>)
 800db26:	f240 427c 	movw	r2, #1148	; 0x47c
 800db2a:	49a2      	ldr	r1, [pc, #648]	; (800ddb4 <tcp_receive+0x2b8>)
 800db2c:	48a0      	ldr	r0, [pc, #640]	; (800ddb0 <tcp_receive+0x2b4>)
 800db2e:	f006 fae5 	bl	80140fc <iprintf>

  if (flags & TCP_ACK) {
 800db32:	4ba1      	ldr	r3, [pc, #644]	; (800ddb8 <tcp_receive+0x2bc>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	f003 0310 	and.w	r3, r3, #16
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 8263 	beq.w	800e006 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db46:	461a      	mov	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db4c:	4413      	add	r3, r2
 800db4e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db54:	4b99      	ldr	r3, [pc, #612]	; (800ddbc <tcp_receive+0x2c0>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db1b      	blt.n	800db96 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db62:	4b96      	ldr	r3, [pc, #600]	; (800ddbc <tcp_receive+0x2c0>)
 800db64:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800db66:	429a      	cmp	r2, r3
 800db68:	d106      	bne.n	800db78 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db6e:	4b94      	ldr	r3, [pc, #592]	; (800ddc0 <tcp_receive+0x2c4>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	2b00      	cmp	r3, #0
 800db76:	db0e      	blt.n	800db96 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db7c:	4b90      	ldr	r3, [pc, #576]	; (800ddc0 <tcp_receive+0x2c4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800db80:	429a      	cmp	r2, r3
 800db82:	d125      	bne.n	800dbd0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800db84:	4b8f      	ldr	r3, [pc, #572]	; (800ddc4 <tcp_receive+0x2c8>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	89db      	ldrh	r3, [r3, #14]
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db92:	429a      	cmp	r2, r3
 800db94:	d91c      	bls.n	800dbd0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800db96:	4b8b      	ldr	r3, [pc, #556]	; (800ddc4 <tcp_receive+0x2c8>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	89db      	ldrh	r3, [r3, #14]
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d205      	bcs.n	800dbc0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dbc0:	4b7e      	ldr	r3, [pc, #504]	; (800ddbc <tcp_receive+0x2c0>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dbc8:	4b7d      	ldr	r3, [pc, #500]	; (800ddc0 <tcp_receive+0x2c4>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dbd0:	4b7b      	ldr	r3, [pc, #492]	; (800ddc0 <tcp_receive+0x2c4>)
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd8:	1ad3      	subs	r3, r2, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	dc58      	bgt.n	800dc90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dbde:	4b7a      	ldr	r3, [pc, #488]	; (800ddc8 <tcp_receive+0x2cc>)
 800dbe0:	881b      	ldrh	r3, [r3, #0]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d14b      	bne.n	800dc7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800dbf0:	4413      	add	r3, r2
 800dbf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d142      	bne.n	800dc7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	db3d      	blt.n	800dc7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc06:	4b6e      	ldr	r3, [pc, #440]	; (800ddc0 <tcp_receive+0x2c4>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d137      	bne.n	800dc7e <tcp_receive+0x182>
              found_dupack = 1;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc18:	2bff      	cmp	r3, #255	; 0xff
 800dc1a:	d007      	beq.n	800dc2c <tcp_receive+0x130>
                ++pcb->dupacks;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc22:	3301      	adds	r3, #1
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc32:	2b03      	cmp	r3, #3
 800dc34:	d91b      	bls.n	800dc6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc40:	4413      	add	r3, r2
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d30a      	bcc.n	800dc64 <tcp_receive+0x168>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc58:	4413      	add	r3, r2
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dc62:	e004      	b.n	800dc6e <tcp_receive+0x172>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d902      	bls.n	800dc7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f001 fee9 	bl	800fa50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f040 8160 	bne.w	800df46 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc8e:	e15a      	b.n	800df46 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dc90:	4b4b      	ldr	r3, [pc, #300]	; (800ddc0 <tcp_receive+0x2c4>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f2c0 814d 	blt.w	800df3c <tcp_receive+0x440>
 800dca2:	4b47      	ldr	r3, [pc, #284]	; (800ddc0 <tcp_receive+0x2c4>)
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f300 8145 	bgt.w	800df3c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	8b5b      	ldrh	r3, [r3, #26]
 800dcb6:	f003 0304 	and.w	r3, r3, #4
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d010      	beq.n	800dce0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8b5b      	ldrh	r3, [r3, #26]
 800dcc2:	f023 0304 	bic.w	r3, r3, #4
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dcee:	10db      	asrs	r3, r3, #3
 800dcf0:	b21b      	sxth	r3, r3
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	4413      	add	r3, r2
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	b21a      	sxth	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dd08:	4b2d      	ldr	r3, [pc, #180]	; (800ddc0 <tcp_receive+0x2c4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dd20:	4b27      	ldr	r3, [pc, #156]	; (800ddc0 <tcp_receive+0x2c4>)
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	7d1b      	ldrb	r3, [r3, #20]
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	f240 8096 	bls.w	800de5e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d244      	bcs.n	800ddcc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	8b5b      	ldrh	r3, [r3, #26]
 800dd46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d001      	beq.n	800dd52 <tcp_receive+0x256>
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e000      	b.n	800dd54 <tcp_receive+0x258>
 800dd52:	2302      	movs	r3, #2
 800dd54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dd58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd62:	fb12 f303 	smulbb	r3, r2, r3
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	bf28      	it	cs
 800dd6e:	4613      	movcs	r3, r2
 800dd70:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dd7a:	4413      	add	r3, r2
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d309      	bcc.n	800dd9c <tcp_receive+0x2a0>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dd8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dd90:	4413      	add	r3, r2
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dd9a:	e060      	b.n	800de5e <tcp_receive+0x362>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dda2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dda6:	e05a      	b.n	800de5e <tcp_receive+0x362>
 800dda8:	08016240 	.word	0x08016240
 800ddac:	08016570 	.word	0x08016570
 800ddb0:	0801628c 	.word	0x0801628c
 800ddb4:	0801658c 	.word	0x0801658c
 800ddb8:	200003d8 	.word	0x200003d8
 800ddbc:	200003cc 	.word	0x200003cc
 800ddc0:	200003d0 	.word	0x200003d0
 800ddc4:	200003bc 	.word	0x200003bc
 800ddc8:	200003d6 	.word	0x200003d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ddd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddd4:	4413      	add	r3, r2
 800ddd6:	b29a      	uxth	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d309      	bcc.n	800ddf6 <tcp_receive+0x2fa>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dde8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddea:	4413      	add	r3, r2
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddf4:	e004      	b.n	800de00 <tcp_receive+0x304>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d326      	bcc.n	800de5e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	b29a      	uxth	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de30:	4413      	add	r3, r2
 800de32:	b29a      	uxth	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d30a      	bcc.n	800de54 <tcp_receive+0x358>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de48:	4413      	add	r3, r2
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de52:	e004      	b.n	800de5e <tcp_receive+0x362>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de66:	4a98      	ldr	r2, [pc, #608]	; (800e0c8 <tcp_receive+0x5cc>)
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fdcb 	bl	800da04 <tcp_free_acked_segments>
 800de6e:	4602      	mov	r2, r0
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7c:	4a93      	ldr	r2, [pc, #588]	; (800e0cc <tcp_receive+0x5d0>)
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7ff fdc0 	bl	800da04 <tcp_free_acked_segments>
 800de84:	4602      	mov	r2, r0
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d104      	bne.n	800de9c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de98:	861a      	strh	r2, [r3, #48]	; 0x30
 800de9a:	e002      	b.n	800dea2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deac:	2b00      	cmp	r3, #0
 800deae:	d103      	bne.n	800deb8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800debe:	4b84      	ldr	r3, [pc, #528]	; (800e0d0 <tcp_receive+0x5d4>)
 800dec0:	881b      	ldrh	r3, [r3, #0]
 800dec2:	4413      	add	r3, r2
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	8b5b      	ldrh	r3, [r3, #26]
 800ded0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d035      	beq.n	800df44 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d118      	bne.n	800df12 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00c      	beq.n	800df02 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	4618      	mov	r0, r3
 800def6:	f7fb fa74 	bl	80093e2 <lwip_htonl>
 800defa:	4603      	mov	r3, r0
 800defc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800defe:	2b00      	cmp	r3, #0
 800df00:	dc20      	bgt.n	800df44 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	8b5b      	ldrh	r3, [r3, #26]
 800df06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df10:	e018      	b.n	800df44 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fb fa5f 	bl	80093e2 <lwip_htonl>
 800df24:	4603      	mov	r3, r0
 800df26:	1ae3      	subs	r3, r4, r3
 800df28:	2b00      	cmp	r3, #0
 800df2a:	dc0b      	bgt.n	800df44 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	8b5b      	ldrh	r3, [r3, #26]
 800df30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df34:	b29a      	uxth	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df3a:	e003      	b.n	800df44 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f001 ff75 	bl	800fe2c <tcp_send_empty_ack>
 800df42:	e000      	b.n	800df46 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df44:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d05b      	beq.n	800e006 <tcp_receive+0x50a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df52:	4b60      	ldr	r3, [pc, #384]	; (800e0d4 <tcp_receive+0x5d8>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	da54      	bge.n	800e006 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800df5c:	4b5e      	ldr	r3, [pc, #376]	; (800e0d8 <tcp_receive+0x5dc>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df66:	b29b      	uxth	r3, r3
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800df70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df7a:	10db      	asrs	r3, r3, #3
 800df7c:	b21b      	sxth	r3, r3
 800df7e:	b29b      	uxth	r3, r3
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	b29b      	uxth	r3, r3
 800df84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df8e:	b29a      	uxth	r2, r3
 800df90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800df94:	4413      	add	r3, r2
 800df96:	b29b      	uxth	r3, r3
 800df98:	b21a      	sxth	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800df9e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	da05      	bge.n	800dfb2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800dfa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dfaa:	425b      	negs	r3, r3
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dfb2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dfbc:	109b      	asrs	r3, r3, #2
 800dfbe:	b21b      	sxth	r3, r3
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dfd6:	4413      	add	r3, r2
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	b21a      	sxth	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dfe6:	10db      	asrs	r3, r3, #3
 800dfe8:	b21b      	sxth	r3, r3
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	4413      	add	r3, r2
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	b21a      	sxth	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e006:	4b35      	ldr	r3, [pc, #212]	; (800e0dc <tcp_receive+0x5e0>)
 800e008:	881b      	ldrh	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f000 84e1 	beq.w	800e9d2 <tcp_receive+0xed6>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7d1b      	ldrb	r3, [r3, #20]
 800e014:	2b06      	cmp	r3, #6
 800e016:	f200 84dc 	bhi.w	800e9d2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e01e:	4b30      	ldr	r3, [pc, #192]	; (800e0e0 <tcp_receive+0x5e4>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	3b01      	subs	r3, #1
 800e026:	2b00      	cmp	r3, #0
 800e028:	f2c0 808e 	blt.w	800e148 <tcp_receive+0x64c>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e030:	4b2a      	ldr	r3, [pc, #168]	; (800e0dc <tcp_receive+0x5e0>)
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	4619      	mov	r1, r3
 800e036:	4b2a      	ldr	r3, [pc, #168]	; (800e0e0 <tcp_receive+0x5e4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	440b      	add	r3, r1
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	3301      	adds	r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	f300 8081 	bgt.w	800e148 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e046:	4b27      	ldr	r3, [pc, #156]	; (800e0e4 <tcp_receive+0x5e8>)
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e050:	4b23      	ldr	r3, [pc, #140]	; (800e0e0 <tcp_receive+0x5e4>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e058:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <tcp_receive+0x5e8>)
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d106      	bne.n	800e06e <tcp_receive+0x572>
 800e060:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <tcp_receive+0x5ec>)
 800e062:	f240 5294 	movw	r2, #1428	; 0x594
 800e066:	4921      	ldr	r1, [pc, #132]	; (800e0ec <tcp_receive+0x5f0>)
 800e068:	4821      	ldr	r0, [pc, #132]	; (800e0f0 <tcp_receive+0x5f4>)
 800e06a:	f006 f847 	bl	80140fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e074:	4293      	cmp	r3, r2
 800e076:	d906      	bls.n	800e086 <tcp_receive+0x58a>
 800e078:	4b1b      	ldr	r3, [pc, #108]	; (800e0e8 <tcp_receive+0x5ec>)
 800e07a:	f240 5295 	movw	r2, #1429	; 0x595
 800e07e:	491d      	ldr	r1, [pc, #116]	; (800e0f4 <tcp_receive+0x5f8>)
 800e080:	481b      	ldr	r0, [pc, #108]	; (800e0f0 <tcp_receive+0x5f4>)
 800e082:	f006 f83b 	bl	80140fc <iprintf>
      off = (u16_t)off32;
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e08c:	4b15      	ldr	r3, [pc, #84]	; (800e0e4 <tcp_receive+0x5e8>)
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	891b      	ldrh	r3, [r3, #8]
 800e092:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e096:	429a      	cmp	r2, r3
 800e098:	d906      	bls.n	800e0a8 <tcp_receive+0x5ac>
 800e09a:	4b13      	ldr	r3, [pc, #76]	; (800e0e8 <tcp_receive+0x5ec>)
 800e09c:	f240 5297 	movw	r2, #1431	; 0x597
 800e0a0:	4915      	ldr	r1, [pc, #84]	; (800e0f8 <tcp_receive+0x5fc>)
 800e0a2:	4813      	ldr	r0, [pc, #76]	; (800e0f0 <tcp_receive+0x5f4>)
 800e0a4:	f006 f82a 	bl	80140fc <iprintf>
      inseg.len -= off;
 800e0a8:	4b0e      	ldr	r3, [pc, #56]	; (800e0e4 <tcp_receive+0x5e8>)
 800e0aa:	891a      	ldrh	r2, [r3, #8]
 800e0ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	4b0b      	ldr	r3, [pc, #44]	; (800e0e4 <tcp_receive+0x5e8>)
 800e0b6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e0b8:	4b0a      	ldr	r3, [pc, #40]	; (800e0e4 <tcp_receive+0x5e8>)
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	891a      	ldrh	r2, [r3, #8]
 800e0be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e0c6:	e029      	b.n	800e11c <tcp_receive+0x620>
 800e0c8:	080165a8 	.word	0x080165a8
 800e0cc:	080165b0 	.word	0x080165b0
 800e0d0:	200003d4 	.word	0x200003d4
 800e0d4:	200003d0 	.word	0x200003d0
 800e0d8:	20006ce4 	.word	0x20006ce4
 800e0dc:	200003d6 	.word	0x200003d6
 800e0e0:	200003cc 	.word	0x200003cc
 800e0e4:	200003ac 	.word	0x200003ac
 800e0e8:	08016240 	.word	0x08016240
 800e0ec:	080165b8 	.word	0x080165b8
 800e0f0:	0801628c 	.word	0x0801628c
 800e0f4:	080165c8 	.word	0x080165c8
 800e0f8:	080165d8 	.word	0x080165d8
        off -= p->len;
 800e0fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0fe:	895b      	ldrh	r3, [r3, #10]
 800e100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e10c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e10e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e112:	2200      	movs	r2, #0
 800e114:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e11c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e11e:	895b      	ldrh	r3, [r3, #10]
 800e120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e124:	429a      	cmp	r2, r3
 800e126:	d8e9      	bhi.n	800e0fc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e12c:	4619      	mov	r1, r3
 800e12e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e130:	f7fc fb70 	bl	800a814 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e138:	4a91      	ldr	r2, [pc, #580]	; (800e380 <tcp_receive+0x884>)
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	4b91      	ldr	r3, [pc, #580]	; (800e384 <tcp_receive+0x888>)
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	4a8f      	ldr	r2, [pc, #572]	; (800e380 <tcp_receive+0x884>)
 800e142:	6812      	ldr	r2, [r2, #0]
 800e144:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e146:	e00d      	b.n	800e164 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e148:	4b8d      	ldr	r3, [pc, #564]	; (800e380 <tcp_receive+0x884>)
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	2b00      	cmp	r3, #0
 800e154:	da06      	bge.n	800e164 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	8b5b      	ldrh	r3, [r3, #26]
 800e15a:	f043 0302 	orr.w	r3, r3, #2
 800e15e:	b29a      	uxth	r2, r3
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e164:	4b86      	ldr	r3, [pc, #536]	; (800e380 <tcp_receive+0x884>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f2c0 842a 	blt.w	800e9c8 <tcp_receive+0xecc>
 800e174:	4b82      	ldr	r3, [pc, #520]	; (800e380 <tcp_receive+0x884>)
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	6879      	ldr	r1, [r7, #4]
 800e17e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e180:	440b      	add	r3, r1
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	3301      	adds	r3, #1
 800e186:	2b00      	cmp	r3, #0
 800e188:	f300 841e 	bgt.w	800e9c8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e190:	4b7b      	ldr	r3, [pc, #492]	; (800e380 <tcp_receive+0x884>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	429a      	cmp	r2, r3
 800e196:	f040 829a 	bne.w	800e6ce <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e19a:	4b7a      	ldr	r3, [pc, #488]	; (800e384 <tcp_receive+0x888>)
 800e19c:	891c      	ldrh	r4, [r3, #8]
 800e19e:	4b79      	ldr	r3, [pc, #484]	; (800e384 <tcp_receive+0x888>)
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	899b      	ldrh	r3, [r3, #12]
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fb f906 	bl	80093b8 <lwip_htons>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0303 	and.w	r3, r3, #3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d001      	beq.n	800e1bc <tcp_receive+0x6c0>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e000      	b.n	800e1be <tcp_receive+0x6c2>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	4423      	add	r3, r4
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	4b71      	ldr	r3, [pc, #452]	; (800e388 <tcp_receive+0x88c>)
 800e1c4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1ca:	4b6f      	ldr	r3, [pc, #444]	; (800e388 <tcp_receive+0x88c>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d275      	bcs.n	800e2be <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e1d2:	4b6c      	ldr	r3, [pc, #432]	; (800e384 <tcp_receive+0x888>)
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	899b      	ldrh	r3, [r3, #12]
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fb f8ec 	bl	80093b8 <lwip_htons>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d01f      	beq.n	800e22c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e1ec:	4b65      	ldr	r3, [pc, #404]	; (800e384 <tcp_receive+0x888>)
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	899b      	ldrh	r3, [r3, #12]
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	b21b      	sxth	r3, r3
 800e1f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e1fa:	b21c      	sxth	r4, r3
 800e1fc:	4b61      	ldr	r3, [pc, #388]	; (800e384 <tcp_receive+0x888>)
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	899b      	ldrh	r3, [r3, #12]
 800e202:	b29b      	uxth	r3, r3
 800e204:	4618      	mov	r0, r3
 800e206:	f7fb f8d7 	bl	80093b8 <lwip_htons>
 800e20a:	4603      	mov	r3, r0
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	b29b      	uxth	r3, r3
 800e210:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e214:	b29b      	uxth	r3, r3
 800e216:	4618      	mov	r0, r3
 800e218:	f7fb f8ce 	bl	80093b8 <lwip_htons>
 800e21c:	4603      	mov	r3, r0
 800e21e:	b21b      	sxth	r3, r3
 800e220:	4323      	orrs	r3, r4
 800e222:	b21a      	sxth	r2, r3
 800e224:	4b57      	ldr	r3, [pc, #348]	; (800e384 <tcp_receive+0x888>)
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	b292      	uxth	r2, r2
 800e22a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e230:	4b54      	ldr	r3, [pc, #336]	; (800e384 <tcp_receive+0x888>)
 800e232:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e234:	4b53      	ldr	r3, [pc, #332]	; (800e384 <tcp_receive+0x888>)
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	899b      	ldrh	r3, [r3, #12]
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fb f8bb 	bl	80093b8 <lwip_htons>
 800e242:	4603      	mov	r3, r0
 800e244:	b2db      	uxtb	r3, r3
 800e246:	f003 0302 	and.w	r3, r3, #2
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d005      	beq.n	800e25a <tcp_receive+0x75e>
            inseg.len -= 1;
 800e24e:	4b4d      	ldr	r3, [pc, #308]	; (800e384 <tcp_receive+0x888>)
 800e250:	891b      	ldrh	r3, [r3, #8]
 800e252:	3b01      	subs	r3, #1
 800e254:	b29a      	uxth	r2, r3
 800e256:	4b4b      	ldr	r3, [pc, #300]	; (800e384 <tcp_receive+0x888>)
 800e258:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e25a:	4b4a      	ldr	r3, [pc, #296]	; (800e384 <tcp_receive+0x888>)
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4a49      	ldr	r2, [pc, #292]	; (800e384 <tcp_receive+0x888>)
 800e260:	8912      	ldrh	r2, [r2, #8]
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f7fc f9d5 	bl	800a614 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e26a:	4b46      	ldr	r3, [pc, #280]	; (800e384 <tcp_receive+0x888>)
 800e26c:	891c      	ldrh	r4, [r3, #8]
 800e26e:	4b45      	ldr	r3, [pc, #276]	; (800e384 <tcp_receive+0x888>)
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	899b      	ldrh	r3, [r3, #12]
 800e274:	b29b      	uxth	r3, r3
 800e276:	4618      	mov	r0, r3
 800e278:	f7fb f89e 	bl	80093b8 <lwip_htons>
 800e27c:	4603      	mov	r3, r0
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	f003 0303 	and.w	r3, r3, #3
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <tcp_receive+0x790>
 800e288:	2301      	movs	r3, #1
 800e28a:	e000      	b.n	800e28e <tcp_receive+0x792>
 800e28c:	2300      	movs	r3, #0
 800e28e:	4423      	add	r3, r4
 800e290:	b29a      	uxth	r2, r3
 800e292:	4b3d      	ldr	r3, [pc, #244]	; (800e388 <tcp_receive+0x88c>)
 800e294:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e296:	4b3c      	ldr	r3, [pc, #240]	; (800e388 <tcp_receive+0x88c>)
 800e298:	881b      	ldrh	r3, [r3, #0]
 800e29a:	461a      	mov	r2, r3
 800e29c:	4b38      	ldr	r3, [pc, #224]	; (800e380 <tcp_receive+0x884>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	441a      	add	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a6:	6879      	ldr	r1, [r7, #4]
 800e2a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e2aa:	440b      	add	r3, r1
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d006      	beq.n	800e2be <tcp_receive+0x7c2>
 800e2b0:	4b36      	ldr	r3, [pc, #216]	; (800e38c <tcp_receive+0x890>)
 800e2b2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e2b6:	4936      	ldr	r1, [pc, #216]	; (800e390 <tcp_receive+0x894>)
 800e2b8:	4836      	ldr	r0, [pc, #216]	; (800e394 <tcp_receive+0x898>)
 800e2ba:	f005 ff1f 	bl	80140fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 80e7 	beq.w	800e496 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e2c8:	4b2e      	ldr	r3, [pc, #184]	; (800e384 <tcp_receive+0x888>)
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	899b      	ldrh	r3, [r3, #12]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fb f871 	bl	80093b8 <lwip_htons>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d010      	beq.n	800e304 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e2e2:	e00a      	b.n	800e2fa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2e8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7fd fd96 	bl	800be26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1f0      	bne.n	800e2e4 <tcp_receive+0x7e8>
 800e302:	e0c8      	b.n	800e496 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e308:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e30a:	e052      	b.n	800e3b2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	899b      	ldrh	r3, [r3, #12]
 800e312:	b29b      	uxth	r3, r3
 800e314:	4618      	mov	r0, r3
 800e316:	f7fb f84f 	bl	80093b8 <lwip_htons>
 800e31a:	4603      	mov	r3, r0
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	f003 0301 	and.w	r3, r3, #1
 800e322:	2b00      	cmp	r3, #0
 800e324:	d03d      	beq.n	800e3a2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e326:	4b17      	ldr	r3, [pc, #92]	; (800e384 <tcp_receive+0x888>)
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	899b      	ldrh	r3, [r3, #12]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fb f842 	bl	80093b8 <lwip_htons>
 800e334:	4603      	mov	r3, r0
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d130      	bne.n	800e3a2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e340:	4b10      	ldr	r3, [pc, #64]	; (800e384 <tcp_receive+0x888>)
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	899b      	ldrh	r3, [r3, #12]
 800e346:	b29c      	uxth	r4, r3
 800e348:	2001      	movs	r0, #1
 800e34a:	f7fb f835 	bl	80093b8 <lwip_htons>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	4b0c      	ldr	r3, [pc, #48]	; (800e384 <tcp_receive+0x888>)
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	4322      	orrs	r2, r4
 800e358:	b292      	uxth	r2, r2
 800e35a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e35c:	4b09      	ldr	r3, [pc, #36]	; (800e384 <tcp_receive+0x888>)
 800e35e:	891c      	ldrh	r4, [r3, #8]
 800e360:	4b08      	ldr	r3, [pc, #32]	; (800e384 <tcp_receive+0x888>)
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	899b      	ldrh	r3, [r3, #12]
 800e366:	b29b      	uxth	r3, r3
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fb f825 	bl	80093b8 <lwip_htons>
 800e36e:	4603      	mov	r3, r0
 800e370:	b2db      	uxtb	r3, r3
 800e372:	f003 0303 	and.w	r3, r3, #3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00e      	beq.n	800e398 <tcp_receive+0x89c>
 800e37a:	2301      	movs	r3, #1
 800e37c:	e00d      	b.n	800e39a <tcp_receive+0x89e>
 800e37e:	bf00      	nop
 800e380:	200003cc 	.word	0x200003cc
 800e384:	200003ac 	.word	0x200003ac
 800e388:	200003d6 	.word	0x200003d6
 800e38c:	08016240 	.word	0x08016240
 800e390:	080165e8 	.word	0x080165e8
 800e394:	0801628c 	.word	0x0801628c
 800e398:	2300      	movs	r3, #0
 800e39a:	4423      	add	r3, r4
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	4b98      	ldr	r3, [pc, #608]	; (800e600 <tcp_receive+0xb04>)
 800e3a0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e3ac:	6938      	ldr	r0, [r7, #16]
 800e3ae:	f7fd fd3a 	bl	800be26 <tcp_seg_free>
            while (next &&
 800e3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00e      	beq.n	800e3d6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e3b8:	4b91      	ldr	r3, [pc, #580]	; (800e600 <tcp_receive+0xb04>)
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4b91      	ldr	r3, [pc, #580]	; (800e604 <tcp_receive+0xb08>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	441a      	add	r2, r3
 800e3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e3cc:	8909      	ldrh	r1, [r1, #8]
 800e3ce:	440b      	add	r3, r1
 800e3d0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	da9a      	bge.n	800e30c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d059      	beq.n	800e490 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e3dc:	4b88      	ldr	r3, [pc, #544]	; (800e600 <tcp_receive+0xb04>)
 800e3de:	881b      	ldrh	r3, [r3, #0]
 800e3e0:	461a      	mov	r2, r3
 800e3e2:	4b88      	ldr	r3, [pc, #544]	; (800e604 <tcp_receive+0xb08>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	441a      	add	r2, r3
 800e3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	dd4d      	ble.n	800e490 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	b29a      	uxth	r2, r3
 800e3fc:	4b81      	ldr	r3, [pc, #516]	; (800e604 <tcp_receive+0xb08>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	b29b      	uxth	r3, r3
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	b29a      	uxth	r2, r3
 800e406:	4b80      	ldr	r3, [pc, #512]	; (800e608 <tcp_receive+0xb0c>)
 800e408:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e40a:	4b7f      	ldr	r3, [pc, #508]	; (800e608 <tcp_receive+0xb0c>)
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	899b      	ldrh	r3, [r3, #12]
 800e410:	b29b      	uxth	r3, r3
 800e412:	4618      	mov	r0, r3
 800e414:	f7fa ffd0 	bl	80093b8 <lwip_htons>
 800e418:	4603      	mov	r3, r0
 800e41a:	b2db      	uxtb	r3, r3
 800e41c:	f003 0302 	and.w	r3, r3, #2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d005      	beq.n	800e430 <tcp_receive+0x934>
                inseg.len -= 1;
 800e424:	4b78      	ldr	r3, [pc, #480]	; (800e608 <tcp_receive+0xb0c>)
 800e426:	891b      	ldrh	r3, [r3, #8]
 800e428:	3b01      	subs	r3, #1
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	4b76      	ldr	r3, [pc, #472]	; (800e608 <tcp_receive+0xb0c>)
 800e42e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e430:	4b75      	ldr	r3, [pc, #468]	; (800e608 <tcp_receive+0xb0c>)
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	4a74      	ldr	r2, [pc, #464]	; (800e608 <tcp_receive+0xb0c>)
 800e436:	8912      	ldrh	r2, [r2, #8]
 800e438:	4611      	mov	r1, r2
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fc f8ea 	bl	800a614 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e440:	4b71      	ldr	r3, [pc, #452]	; (800e608 <tcp_receive+0xb0c>)
 800e442:	891c      	ldrh	r4, [r3, #8]
 800e444:	4b70      	ldr	r3, [pc, #448]	; (800e608 <tcp_receive+0xb0c>)
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	899b      	ldrh	r3, [r3, #12]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fa ffb3 	bl	80093b8 <lwip_htons>
 800e452:	4603      	mov	r3, r0
 800e454:	b2db      	uxtb	r3, r3
 800e456:	f003 0303 	and.w	r3, r3, #3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <tcp_receive+0x966>
 800e45e:	2301      	movs	r3, #1
 800e460:	e000      	b.n	800e464 <tcp_receive+0x968>
 800e462:	2300      	movs	r3, #0
 800e464:	4423      	add	r3, r4
 800e466:	b29a      	uxth	r2, r3
 800e468:	4b65      	ldr	r3, [pc, #404]	; (800e600 <tcp_receive+0xb04>)
 800e46a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e46c:	4b64      	ldr	r3, [pc, #400]	; (800e600 <tcp_receive+0xb04>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	461a      	mov	r2, r3
 800e472:	4b64      	ldr	r3, [pc, #400]	; (800e604 <tcp_receive+0xb08>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	441a      	add	r2, r3
 800e478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d006      	beq.n	800e490 <tcp_receive+0x994>
 800e482:	4b62      	ldr	r3, [pc, #392]	; (800e60c <tcp_receive+0xb10>)
 800e484:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e488:	4961      	ldr	r1, [pc, #388]	; (800e610 <tcp_receive+0xb14>)
 800e48a:	4862      	ldr	r0, [pc, #392]	; (800e614 <tcp_receive+0xb18>)
 800e48c:	f005 fe36 	bl	80140fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e494:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e496:	4b5a      	ldr	r3, [pc, #360]	; (800e600 <tcp_receive+0xb04>)
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	4b59      	ldr	r3, [pc, #356]	; (800e604 <tcp_receive+0xb08>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	441a      	add	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4aa:	4b55      	ldr	r3, [pc, #340]	; (800e600 <tcp_receive+0xb04>)
 800e4ac:	881b      	ldrh	r3, [r3, #0]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d206      	bcs.n	800e4c0 <tcp_receive+0x9c4>
 800e4b2:	4b56      	ldr	r3, [pc, #344]	; (800e60c <tcp_receive+0xb10>)
 800e4b4:	f240 6207 	movw	r2, #1543	; 0x607
 800e4b8:	4957      	ldr	r1, [pc, #348]	; (800e618 <tcp_receive+0xb1c>)
 800e4ba:	4856      	ldr	r0, [pc, #344]	; (800e614 <tcp_receive+0xb18>)
 800e4bc:	f005 fe1e 	bl	80140fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4c4:	4b4e      	ldr	r3, [pc, #312]	; (800e600 <tcp_receive+0xb04>)
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fc ffc9 	bl	800b468 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e4d6:	4b4c      	ldr	r3, [pc, #304]	; (800e608 <tcp_receive+0xb0c>)
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	891b      	ldrh	r3, [r3, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d006      	beq.n	800e4ee <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e4e0:	4b49      	ldr	r3, [pc, #292]	; (800e608 <tcp_receive+0xb0c>)
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	4a4d      	ldr	r2, [pc, #308]	; (800e61c <tcp_receive+0xb20>)
 800e4e6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e4e8:	4b47      	ldr	r3, [pc, #284]	; (800e608 <tcp_receive+0xb0c>)
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e4ee:	4b46      	ldr	r3, [pc, #280]	; (800e608 <tcp_receive+0xb0c>)
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	899b      	ldrh	r3, [r3, #12]
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fa ff5e 	bl	80093b8 <lwip_htons>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 80b8 	beq.w	800e67a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e50a:	4b45      	ldr	r3, [pc, #276]	; (800e620 <tcp_receive+0xb24>)
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	f043 0320 	orr.w	r3, r3, #32
 800e512:	b2da      	uxtb	r2, r3
 800e514:	4b42      	ldr	r3, [pc, #264]	; (800e620 <tcp_receive+0xb24>)
 800e516:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e518:	e0af      	b.n	800e67a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e51e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	4a36      	ldr	r2, [pc, #216]	; (800e604 <tcp_receive+0xb08>)
 800e52a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	891b      	ldrh	r3, [r3, #8]
 800e530:	461c      	mov	r4, r3
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	899b      	ldrh	r3, [r3, #12]
 800e538:	b29b      	uxth	r3, r3
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fa ff3c 	bl	80093b8 <lwip_htons>
 800e540:	4603      	mov	r3, r0
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f003 0303 	and.w	r3, r3, #3
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <tcp_receive+0xa54>
 800e54c:	2301      	movs	r3, #1
 800e54e:	e000      	b.n	800e552 <tcp_receive+0xa56>
 800e550:	2300      	movs	r3, #0
 800e552:	191a      	adds	r2, r3, r4
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	441a      	add	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e562:	461c      	mov	r4, r3
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	891b      	ldrh	r3, [r3, #8]
 800e568:	461d      	mov	r5, r3
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	899b      	ldrh	r3, [r3, #12]
 800e570:	b29b      	uxth	r3, r3
 800e572:	4618      	mov	r0, r3
 800e574:	f7fa ff20 	bl	80093b8 <lwip_htons>
 800e578:	4603      	mov	r3, r0
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	f003 0303 	and.w	r3, r3, #3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d001      	beq.n	800e588 <tcp_receive+0xa8c>
 800e584:	2301      	movs	r3, #1
 800e586:	e000      	b.n	800e58a <tcp_receive+0xa8e>
 800e588:	2300      	movs	r3, #0
 800e58a:	442b      	add	r3, r5
 800e58c:	429c      	cmp	r4, r3
 800e58e:	d206      	bcs.n	800e59e <tcp_receive+0xaa2>
 800e590:	4b1e      	ldr	r3, [pc, #120]	; (800e60c <tcp_receive+0xb10>)
 800e592:	f240 622b 	movw	r2, #1579	; 0x62b
 800e596:	4923      	ldr	r1, [pc, #140]	; (800e624 <tcp_receive+0xb28>)
 800e598:	481e      	ldr	r0, [pc, #120]	; (800e614 <tcp_receive+0xb18>)
 800e59a:	f005 fdaf 	bl	80140fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	891b      	ldrh	r3, [r3, #8]
 800e5a2:	461c      	mov	r4, r3
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	899b      	ldrh	r3, [r3, #12]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fa ff03 	bl	80093b8 <lwip_htons>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	f003 0303 	and.w	r3, r3, #3
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d001      	beq.n	800e5c2 <tcp_receive+0xac6>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e000      	b.n	800e5c4 <tcp_receive+0xac8>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	1919      	adds	r1, r3, r4
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e5ca:	b28b      	uxth	r3, r1
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fc ff47 	bl	800b468 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	891b      	ldrh	r3, [r3, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d028      	beq.n	800e636 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e5e4:	4b0d      	ldr	r3, [pc, #52]	; (800e61c <tcp_receive+0xb20>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d01d      	beq.n	800e628 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e5ec:	4b0b      	ldr	r3, [pc, #44]	; (800e61c <tcp_receive+0xb20>)
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	f7fc fa54 	bl	800aaa4 <pbuf_cat>
 800e5fc:	e018      	b.n	800e630 <tcp_receive+0xb34>
 800e5fe:	bf00      	nop
 800e600:	200003d6 	.word	0x200003d6
 800e604:	200003cc 	.word	0x200003cc
 800e608:	200003ac 	.word	0x200003ac
 800e60c:	08016240 	.word	0x08016240
 800e610:	08016620 	.word	0x08016620
 800e614:	0801628c 	.word	0x0801628c
 800e618:	0801665c 	.word	0x0801665c
 800e61c:	200003dc 	.word	0x200003dc
 800e620:	200003d9 	.word	0x200003d9
 800e624:	0801667c 	.word	0x0801667c
            } else {
              recv_data = cseg->p;
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	4a70      	ldr	r2, [pc, #448]	; (800e7f0 <tcp_receive+0xcf4>)
 800e62e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2200      	movs	r2, #0
 800e634:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	899b      	ldrh	r3, [r3, #12]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fa feba 	bl	80093b8 <lwip_htons>
 800e644:	4603      	mov	r3, r0
 800e646:	b2db      	uxtb	r3, r3
 800e648:	f003 0301 	and.w	r3, r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00d      	beq.n	800e66c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e650:	4b68      	ldr	r3, [pc, #416]	; (800e7f4 <tcp_receive+0xcf8>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	f043 0320 	orr.w	r3, r3, #32
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	4b66      	ldr	r3, [pc, #408]	; (800e7f4 <tcp_receive+0xcf8>)
 800e65c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	7d1b      	ldrb	r3, [r3, #20]
 800e662:	2b04      	cmp	r3, #4
 800e664:	d102      	bne.n	800e66c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2207      	movs	r2, #7
 800e66a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e674:	68b8      	ldr	r0, [r7, #8]
 800e676:	f7fd fbd6 	bl	800be26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d008      	beq.n	800e694 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	685a      	ldr	r2, [r3, #4]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e68e:	429a      	cmp	r2, r3
 800e690:	f43f af43 	beq.w	800e51a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	8b5b      	ldrh	r3, [r3, #26]
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00e      	beq.n	800e6be <tcp_receive+0xbc2>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	8b5b      	ldrh	r3, [r3, #26]
 800e6a4:	f023 0301 	bic.w	r3, r3, #1
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	835a      	strh	r2, [r3, #26]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	8b5b      	ldrh	r3, [r3, #26]
 800e6b2:	f043 0302 	orr.w	r3, r3, #2
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e6bc:	e188      	b.n	800e9d0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	8b5b      	ldrh	r3, [r3, #26]
 800e6c2:	f043 0301 	orr.w	r3, r3, #1
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e6cc:	e180      	b.n	800e9d0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e6d6:	4848      	ldr	r0, [pc, #288]	; (800e7f8 <tcp_receive+0xcfc>)
 800e6d8:	f7fd fbbe 	bl	800be58 <tcp_seg_copy>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	675a      	str	r2, [r3, #116]	; 0x74
 800e6e2:	e16d      	b.n	800e9c0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6ee:	e157      	b.n	800e9a0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	4b41      	ldr	r3, [pc, #260]	; (800e7fc <tcp_receive+0xd00>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d11d      	bne.n	800e73a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e6fe:	4b3e      	ldr	r3, [pc, #248]	; (800e7f8 <tcp_receive+0xcfc>)
 800e700:	891a      	ldrh	r2, [r3, #8]
 800e702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e704:	891b      	ldrh	r3, [r3, #8]
 800e706:	429a      	cmp	r2, r3
 800e708:	f240 814f 	bls.w	800e9aa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e70c:	483a      	ldr	r0, [pc, #232]	; (800e7f8 <tcp_receive+0xcfc>)
 800e70e:	f7fd fba3 	bl	800be58 <tcp_seg_copy>
 800e712:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	f000 8149 	beq.w	800e9ae <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d003      	beq.n	800e72a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	e002      	b.n	800e730 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	697a      	ldr	r2, [r7, #20]
 800e72e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e732:	6978      	ldr	r0, [r7, #20]
 800e734:	f7ff f8de 	bl	800d8f4 <tcp_oos_insert_segment>
                }
                break;
 800e738:	e139      	b.n	800e9ae <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d117      	bne.n	800e770 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e740:	4b2e      	ldr	r3, [pc, #184]	; (800e7fc <tcp_receive+0xd00>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	da57      	bge.n	800e800 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e750:	4829      	ldr	r0, [pc, #164]	; (800e7f8 <tcp_receive+0xcfc>)
 800e752:	f7fd fb81 	bl	800be58 <tcp_seg_copy>
 800e756:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 8129 	beq.w	800e9b2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	69ba      	ldr	r2, [r7, #24]
 800e764:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e766:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e768:	69b8      	ldr	r0, [r7, #24]
 800e76a:	f7ff f8c3 	bl	800d8f4 <tcp_oos_insert_segment>
                  }
                  break;
 800e76e:	e120      	b.n	800e9b2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e770:	4b22      	ldr	r3, [pc, #136]	; (800e7fc <tcp_receive+0xd00>)
 800e772:	681a      	ldr	r2, [r3, #0]
 800e774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	1ad3      	subs	r3, r2, r3
 800e77c:	3b01      	subs	r3, #1
 800e77e:	2b00      	cmp	r3, #0
 800e780:	db3e      	blt.n	800e800 <tcp_receive+0xd04>
 800e782:	4b1e      	ldr	r3, [pc, #120]	; (800e7fc <tcp_receive+0xd00>)
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	3301      	adds	r3, #1
 800e790:	2b00      	cmp	r3, #0
 800e792:	dc35      	bgt.n	800e800 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e794:	4818      	ldr	r0, [pc, #96]	; (800e7f8 <tcp_receive+0xcfc>)
 800e796:	f7fd fb5f 	bl	800be58 <tcp_seg_copy>
 800e79a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	f000 8109 	beq.w	800e9b6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e7a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7ac:	8912      	ldrh	r2, [r2, #8]
 800e7ae:	441a      	add	r2, r3
 800e7b0:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <tcp_receive+0xd00>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	dd12      	ble.n	800e7e0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e7ba:	4b10      	ldr	r3, [pc, #64]	; (800e7fc <tcp_receive+0xd00>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ce:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d6:	891b      	ldrh	r3, [r3, #8]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	4610      	mov	r0, r2
 800e7dc:	f7fb ff1a 	bl	800a614 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e2:	69fa      	ldr	r2, [r7, #28]
 800e7e4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e7e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e7e8:	69f8      	ldr	r0, [r7, #28]
 800e7ea:	f7ff f883 	bl	800d8f4 <tcp_oos_insert_segment>
                  }
                  break;
 800e7ee:	e0e2      	b.n	800e9b6 <tcp_receive+0xeba>
 800e7f0:	200003dc 	.word	0x200003dc
 800e7f4:	200003d9 	.word	0x200003d9
 800e7f8:	200003ac 	.word	0x200003ac
 800e7fc:	200003cc 	.word	0x200003cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	f040 80c6 	bne.w	800e99a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e80e:	4b80      	ldr	r3, [pc, #512]	; (800ea10 <tcp_receive+0xf14>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f340 80bd 	ble.w	800e99a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	899b      	ldrh	r3, [r3, #12]
 800e826:	b29b      	uxth	r3, r3
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fa fdc5 	bl	80093b8 <lwip_htons>
 800e82e:	4603      	mov	r3, r0
 800e830:	b2db      	uxtb	r3, r3
 800e832:	f003 0301 	and.w	r3, r3, #1
 800e836:	2b00      	cmp	r3, #0
 800e838:	f040 80bf 	bne.w	800e9ba <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e83c:	4875      	ldr	r0, [pc, #468]	; (800ea14 <tcp_receive+0xf18>)
 800e83e:	f7fd fb0b 	bl	800be58 <tcp_seg_copy>
 800e842:	4602      	mov	r2, r0
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f000 80b6 	beq.w	800e9be <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e85a:	8912      	ldrh	r2, [r2, #8]
 800e85c:	441a      	add	r2, r3
 800e85e:	4b6c      	ldr	r3, [pc, #432]	; (800ea10 <tcp_receive+0xf14>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	dd12      	ble.n	800e88e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e868:	4b69      	ldr	r3, [pc, #420]	; (800ea10 <tcp_receive+0xf14>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	b29b      	uxth	r3, r3
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	b29a      	uxth	r2, r3
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e880:	685a      	ldr	r2, [r3, #4]
 800e882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e884:	891b      	ldrh	r3, [r3, #8]
 800e886:	4619      	mov	r1, r3
 800e888:	4610      	mov	r0, r2
 800e88a:	f7fb fec3 	bl	800a614 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e88e:	4b62      	ldr	r3, [pc, #392]	; (800ea18 <tcp_receive+0xf1c>)
 800e890:	881b      	ldrh	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	4b5e      	ldr	r3, [pc, #376]	; (800ea10 <tcp_receive+0xf14>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	441a      	add	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89e:	6879      	ldr	r1, [r7, #4]
 800e8a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8a2:	440b      	add	r3, r1
 800e8a4:	1ad3      	subs	r3, r2, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f340 8089 	ble.w	800e9be <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	899b      	ldrh	r3, [r3, #12]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fa fd7e 	bl	80093b8 <lwip_htons>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	f003 0301 	and.w	r3, r3, #1
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d022      	beq.n	800e90e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	899b      	ldrh	r3, [r3, #12]
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	b21b      	sxth	r3, r3
 800e8d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e8d8:	b21c      	sxth	r4, r3
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	899b      	ldrh	r3, [r3, #12]
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fa fd67 	bl	80093b8 <lwip_htons>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fa fd5e 	bl	80093b8 <lwip_htons>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	b21b      	sxth	r3, r3
 800e900:	4323      	orrs	r3, r4
 800e902:	b21a      	sxth	r2, r3
 800e904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	b292      	uxth	r2, r2
 800e90c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e918:	4413      	add	r3, r2
 800e91a:	b299      	uxth	r1, r3
 800e91c:	4b3c      	ldr	r3, [pc, #240]	; (800ea10 <tcp_receive+0xf14>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	b29a      	uxth	r2, r3
 800e922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	1a8a      	subs	r2, r1, r2
 800e928:	b292      	uxth	r2, r2
 800e92a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	891b      	ldrh	r3, [r3, #8]
 800e938:	4619      	mov	r1, r3
 800e93a:	4610      	mov	r0, r2
 800e93c:	f7fb fe6a 	bl	800a614 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	891c      	ldrh	r4, [r3, #8]
 800e946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	899b      	ldrh	r3, [r3, #12]
 800e94e:	b29b      	uxth	r3, r3
 800e950:	4618      	mov	r0, r3
 800e952:	f7fa fd31 	bl	80093b8 <lwip_htons>
 800e956:	4603      	mov	r3, r0
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	f003 0303 	and.w	r3, r3, #3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <tcp_receive+0xe6a>
 800e962:	2301      	movs	r3, #1
 800e964:	e000      	b.n	800e968 <tcp_receive+0xe6c>
 800e966:	2300      	movs	r3, #0
 800e968:	4423      	add	r3, r4
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b2a      	ldr	r3, [pc, #168]	; (800ea18 <tcp_receive+0xf1c>)
 800e96e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e970:	4b29      	ldr	r3, [pc, #164]	; (800ea18 <tcp_receive+0xf1c>)
 800e972:	881b      	ldrh	r3, [r3, #0]
 800e974:	461a      	mov	r2, r3
 800e976:	4b26      	ldr	r3, [pc, #152]	; (800ea10 <tcp_receive+0xf14>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	441a      	add	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e980:	6879      	ldr	r1, [r7, #4]
 800e982:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e984:	440b      	add	r3, r1
 800e986:	429a      	cmp	r2, r3
 800e988:	d019      	beq.n	800e9be <tcp_receive+0xec2>
 800e98a:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <tcp_receive+0xf20>)
 800e98c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e990:	4923      	ldr	r1, [pc, #140]	; (800ea20 <tcp_receive+0xf24>)
 800e992:	4824      	ldr	r0, [pc, #144]	; (800ea24 <tcp_receive+0xf28>)
 800e994:	f005 fbb2 	bl	80140fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e998:	e011      	b.n	800e9be <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f47f aea4 	bne.w	800e6f0 <tcp_receive+0xbf4>
 800e9a8:	e00a      	b.n	800e9c0 <tcp_receive+0xec4>
                break;
 800e9aa:	bf00      	nop
 800e9ac:	e008      	b.n	800e9c0 <tcp_receive+0xec4>
                break;
 800e9ae:	bf00      	nop
 800e9b0:	e006      	b.n	800e9c0 <tcp_receive+0xec4>
                  break;
 800e9b2:	bf00      	nop
 800e9b4:	e004      	b.n	800e9c0 <tcp_receive+0xec4>
                  break;
 800e9b6:	bf00      	nop
 800e9b8:	e002      	b.n	800e9c0 <tcp_receive+0xec4>
                  break;
 800e9ba:	bf00      	nop
 800e9bc:	e000      	b.n	800e9c0 <tcp_receive+0xec4>
                break;
 800e9be:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f001 fa33 	bl	800fe2c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e9c6:	e003      	b.n	800e9d0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f001 fa2f 	bl	800fe2c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e9ce:	e01a      	b.n	800ea06 <tcp_receive+0xf0a>
 800e9d0:	e019      	b.n	800ea06 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e9d2:	4b0f      	ldr	r3, [pc, #60]	; (800ea10 <tcp_receive+0xf14>)
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	db0a      	blt.n	800e9f6 <tcp_receive+0xefa>
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <tcp_receive+0xf14>)
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e9ec:	440b      	add	r3, r1
 800e9ee:	1ad3      	subs	r3, r2, r3
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	dd07      	ble.n	800ea06 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	8b5b      	ldrh	r3, [r3, #26]
 800e9fa:	f043 0302 	orr.w	r3, r3, #2
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ea04:	e7ff      	b.n	800ea06 <tcp_receive+0xf0a>
 800ea06:	bf00      	nop
 800ea08:	3750      	adds	r7, #80	; 0x50
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	200003cc 	.word	0x200003cc
 800ea14:	200003ac 	.word	0x200003ac
 800ea18:	200003d6 	.word	0x200003d6
 800ea1c:	08016240 	.word	0x08016240
 800ea20:	080165e8 	.word	0x080165e8
 800ea24:	0801628c 	.word	0x0801628c

0800ea28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ea2e:	4b15      	ldr	r3, [pc, #84]	; (800ea84 <tcp_get_next_optbyte+0x5c>)
 800ea30:	881b      	ldrh	r3, [r3, #0]
 800ea32:	1c5a      	adds	r2, r3, #1
 800ea34:	b291      	uxth	r1, r2
 800ea36:	4a13      	ldr	r2, [pc, #76]	; (800ea84 <tcp_get_next_optbyte+0x5c>)
 800ea38:	8011      	strh	r1, [r2, #0]
 800ea3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ea3c:	4b12      	ldr	r3, [pc, #72]	; (800ea88 <tcp_get_next_optbyte+0x60>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d004      	beq.n	800ea4e <tcp_get_next_optbyte+0x26>
 800ea44:	4b11      	ldr	r3, [pc, #68]	; (800ea8c <tcp_get_next_optbyte+0x64>)
 800ea46:	881b      	ldrh	r3, [r3, #0]
 800ea48:	88fa      	ldrh	r2, [r7, #6]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d208      	bcs.n	800ea60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ea4e:	4b10      	ldr	r3, [pc, #64]	; (800ea90 <tcp_get_next_optbyte+0x68>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	3314      	adds	r3, #20
 800ea54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ea56:	88fb      	ldrh	r3, [r7, #6]
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	e00b      	b.n	800ea78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ea60:	88fb      	ldrh	r3, [r7, #6]
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <tcp_get_next_optbyte+0x64>)
 800ea66:	881b      	ldrh	r3, [r3, #0]
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ea6e:	4b06      	ldr	r3, [pc, #24]	; (800ea88 <tcp_get_next_optbyte+0x60>)
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	797b      	ldrb	r3, [r7, #5]
 800ea74:	4413      	add	r3, r2
 800ea76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	370c      	adds	r7, #12
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	200003c8 	.word	0x200003c8
 800ea88:	200003c4 	.word	0x200003c4
 800ea8c:	200003c2 	.word	0x200003c2
 800ea90:	200003bc 	.word	0x200003bc

0800ea94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d106      	bne.n	800eab0 <tcp_parseopt+0x1c>
 800eaa2:	4b32      	ldr	r3, [pc, #200]	; (800eb6c <tcp_parseopt+0xd8>)
 800eaa4:	f240 727d 	movw	r2, #1917	; 0x77d
 800eaa8:	4931      	ldr	r1, [pc, #196]	; (800eb70 <tcp_parseopt+0xdc>)
 800eaaa:	4832      	ldr	r0, [pc, #200]	; (800eb74 <tcp_parseopt+0xe0>)
 800eaac:	f005 fb26 	bl	80140fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800eab0:	4b31      	ldr	r3, [pc, #196]	; (800eb78 <tcp_parseopt+0xe4>)
 800eab2:	881b      	ldrh	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d055      	beq.n	800eb64 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eab8:	4b30      	ldr	r3, [pc, #192]	; (800eb7c <tcp_parseopt+0xe8>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	801a      	strh	r2, [r3, #0]
 800eabe:	e045      	b.n	800eb4c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800eac0:	f7ff ffb2 	bl	800ea28 <tcp_get_next_optbyte>
 800eac4:	4603      	mov	r3, r0
 800eac6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	d006      	beq.n	800eadc <tcp_parseopt+0x48>
 800eace:	2b02      	cmp	r3, #2
 800ead0:	dc2b      	bgt.n	800eb2a <tcp_parseopt+0x96>
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d041      	beq.n	800eb5a <tcp_parseopt+0xc6>
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d127      	bne.n	800eb2a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800eada:	e037      	b.n	800eb4c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800eadc:	f7ff ffa4 	bl	800ea28 <tcp_get_next_optbyte>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d13b      	bne.n	800eb5e <tcp_parseopt+0xca>
 800eae6:	4b25      	ldr	r3, [pc, #148]	; (800eb7c <tcp_parseopt+0xe8>)
 800eae8:	881b      	ldrh	r3, [r3, #0]
 800eaea:	3301      	adds	r3, #1
 800eaec:	4a22      	ldr	r2, [pc, #136]	; (800eb78 <tcp_parseopt+0xe4>)
 800eaee:	8812      	ldrh	r2, [r2, #0]
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	da34      	bge.n	800eb5e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800eaf4:	f7ff ff98 	bl	800ea28 <tcp_get_next_optbyte>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	021b      	lsls	r3, r3, #8
 800eafe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800eb00:	f7ff ff92 	bl	800ea28 <tcp_get_next_optbyte>
 800eb04:	4603      	mov	r3, r0
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	89bb      	ldrh	r3, [r7, #12]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800eb0e:	89bb      	ldrh	r3, [r7, #12]
 800eb10:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eb14:	d804      	bhi.n	800eb20 <tcp_parseopt+0x8c>
 800eb16:	89bb      	ldrh	r3, [r7, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d001      	beq.n	800eb20 <tcp_parseopt+0x8c>
 800eb1c:	89ba      	ldrh	r2, [r7, #12]
 800eb1e:	e001      	b.n	800eb24 <tcp_parseopt+0x90>
 800eb20:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800eb28:	e010      	b.n	800eb4c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800eb2a:	f7ff ff7d 	bl	800ea28 <tcp_get_next_optbyte>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800eb32:	7afb      	ldrb	r3, [r7, #11]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d914      	bls.n	800eb62 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800eb38:	7afb      	ldrb	r3, [r7, #11]
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	4b0f      	ldr	r3, [pc, #60]	; (800eb7c <tcp_parseopt+0xe8>)
 800eb3e:	881b      	ldrh	r3, [r3, #0]
 800eb40:	4413      	add	r3, r2
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	3b02      	subs	r3, #2
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	4b0c      	ldr	r3, [pc, #48]	; (800eb7c <tcp_parseopt+0xe8>)
 800eb4a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800eb4c:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <tcp_parseopt+0xe8>)
 800eb4e:	881a      	ldrh	r2, [r3, #0]
 800eb50:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <tcp_parseopt+0xe4>)
 800eb52:	881b      	ldrh	r3, [r3, #0]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d3b3      	bcc.n	800eac0 <tcp_parseopt+0x2c>
 800eb58:	e004      	b.n	800eb64 <tcp_parseopt+0xd0>
          return;
 800eb5a:	bf00      	nop
 800eb5c:	e002      	b.n	800eb64 <tcp_parseopt+0xd0>
            return;
 800eb5e:	bf00      	nop
 800eb60:	e000      	b.n	800eb64 <tcp_parseopt+0xd0>
            return;
 800eb62:	bf00      	nop
      }
    }
  }
}
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	08016240 	.word	0x08016240
 800eb70:	080166a4 	.word	0x080166a4
 800eb74:	0801628c 	.word	0x0801628c
 800eb78:	200003c0 	.word	0x200003c0
 800eb7c:	200003c8 	.word	0x200003c8

0800eb80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800eb80:	b480      	push	{r7}
 800eb82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800eb84:	4b05      	ldr	r3, [pc, #20]	; (800eb9c <tcp_trigger_input_pcb_close+0x1c>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f043 0310 	orr.w	r3, r3, #16
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	4b03      	ldr	r3, [pc, #12]	; (800eb9c <tcp_trigger_input_pcb_close+0x1c>)
 800eb90:	701a      	strb	r2, [r3, #0]
}
 800eb92:	bf00      	nop
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr
 800eb9c:	200003d9 	.word	0x200003d9

0800eba0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00a      	beq.n	800ebc8 <tcp_route+0x28>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	7a1b      	ldrb	r3, [r3, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d006      	beq.n	800ebc8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	7a1b      	ldrb	r3, [r3, #8]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fb fb4e 	bl	800a260 <netif_get_by_index>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	e003      	b.n	800ebd0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f003 fa37 	bl	801203c <ip4_route>
 800ebce:	4603      	mov	r3, r0
  }
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ebd8:	b590      	push	{r4, r7, lr}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	60b9      	str	r1, [r7, #8]
 800ebe2:	603b      	str	r3, [r7, #0]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d105      	bne.n	800ebfa <tcp_create_segment+0x22>
 800ebee:	4b44      	ldr	r3, [pc, #272]	; (800ed00 <tcp_create_segment+0x128>)
 800ebf0:	22a3      	movs	r2, #163	; 0xa3
 800ebf2:	4944      	ldr	r1, [pc, #272]	; (800ed04 <tcp_create_segment+0x12c>)
 800ebf4:	4844      	ldr	r0, [pc, #272]	; (800ed08 <tcp_create_segment+0x130>)
 800ebf6:	f005 fa81 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <tcp_create_segment+0x34>
 800ec00:	4b3f      	ldr	r3, [pc, #252]	; (800ed00 <tcp_create_segment+0x128>)
 800ec02:	22a4      	movs	r2, #164	; 0xa4
 800ec04:	4941      	ldr	r1, [pc, #260]	; (800ed0c <tcp_create_segment+0x134>)
 800ec06:	4840      	ldr	r0, [pc, #256]	; (800ed08 <tcp_create_segment+0x130>)
 800ec08:	f005 fa78 	bl	80140fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ec0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	f003 0304 	and.w	r3, r3, #4
 800ec18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ec1a:	2003      	movs	r0, #3
 800ec1c:	f7fb f822 	bl	8009c64 <memp_malloc>
 800ec20:	6138      	str	r0, [r7, #16]
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d104      	bne.n	800ec32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ec28:	68b8      	ldr	r0, [r7, #8]
 800ec2a:	f7fb fe79 	bl	800a920 <pbuf_free>
    return NULL;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e061      	b.n	800ecf6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ec38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	68ba      	ldr	r2, [r7, #8]
 800ec44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	891a      	ldrh	r2, [r3, #8]
 800ec4a:	7dfb      	ldrb	r3, [r7, #23]
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d205      	bcs.n	800ec5e <tcp_create_segment+0x86>
 800ec52:	4b2b      	ldr	r3, [pc, #172]	; (800ed00 <tcp_create_segment+0x128>)
 800ec54:	22b0      	movs	r2, #176	; 0xb0
 800ec56:	492e      	ldr	r1, [pc, #184]	; (800ed10 <tcp_create_segment+0x138>)
 800ec58:	482b      	ldr	r0, [pc, #172]	; (800ed08 <tcp_create_segment+0x130>)
 800ec5a:	f005 fa4f 	bl	80140fc <iprintf>
  seg->len = p->tot_len - optlen;
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	891a      	ldrh	r2, [r3, #8]
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ec6e:	2114      	movs	r1, #20
 800ec70:	68b8      	ldr	r0, [r7, #8]
 800ec72:	f7fb fdbf 	bl	800a7f4 <pbuf_add_header>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ec7c:	6938      	ldr	r0, [r7, #16]
 800ec7e:	f7fd f8d2 	bl	800be26 <tcp_seg_free>
    return NULL;
 800ec82:	2300      	movs	r3, #0
 800ec84:	e037      	b.n	800ecf6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	8ada      	ldrh	r2, [r3, #22]
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	68dc      	ldr	r4, [r3, #12]
 800ec98:	4610      	mov	r0, r2
 800ec9a:	f7fa fb8d 	bl	80093b8 <lwip_htons>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8b1a      	ldrh	r2, [r3, #24]
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	68dc      	ldr	r4, [r3, #12]
 800ecaa:	4610      	mov	r0, r2
 800ecac:	f7fa fb84 	bl	80093b8 <lwip_htons>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	68dc      	ldr	r4, [r3, #12]
 800ecb8:	6838      	ldr	r0, [r7, #0]
 800ecba:	f7fa fb92 	bl	80093e2 <lwip_htonl>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
 800ecc4:	089b      	lsrs	r3, r3, #2
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	b29b      	uxth	r3, r3
 800ecca:	3305      	adds	r3, #5
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	031b      	lsls	r3, r3, #12
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	68dc      	ldr	r4, [r3, #12]
 800ecde:	4610      	mov	r0, r2
 800ece0:	f7fa fb6a 	bl	80093b8 <lwip_htons>
 800ece4:	4603      	mov	r3, r0
 800ece6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	2200      	movs	r2, #0
 800ecee:	749a      	strb	r2, [r3, #18]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	74da      	strb	r2, [r3, #19]
  return seg;
 800ecf4:	693b      	ldr	r3, [r7, #16]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	371c      	adds	r7, #28
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd90      	pop	{r4, r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	080166c0 	.word	0x080166c0
 800ed04:	080166f4 	.word	0x080166f4
 800ed08:	08016714 	.word	0x08016714
 800ed0c:	0801673c 	.word	0x0801673c
 800ed10:	08016760 	.word	0x08016760

0800ed14 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ed14:	b590      	push	{r4, r7, lr}
 800ed16:	b08b      	sub	sp, #44	; 0x2c
 800ed18:	af02      	add	r7, sp, #8
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ed20:	2300      	movs	r3, #0
 800ed22:	61fb      	str	r3, [r7, #28]
 800ed24:	2300      	movs	r3, #0
 800ed26:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d106      	bne.n	800ed40 <tcp_split_unsent_seg+0x2c>
 800ed32:	4b95      	ldr	r3, [pc, #596]	; (800ef88 <tcp_split_unsent_seg+0x274>)
 800ed34:	f240 324b 	movw	r2, #843	; 0x34b
 800ed38:	4994      	ldr	r1, [pc, #592]	; (800ef8c <tcp_split_unsent_seg+0x278>)
 800ed3a:	4895      	ldr	r0, [pc, #596]	; (800ef90 <tcp_split_unsent_seg+0x27c>)
 800ed3c:	f005 f9de 	bl	80140fc <iprintf>

  useg = pcb->unsent;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed44:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d102      	bne.n	800ed52 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ed4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed50:	e116      	b.n	800ef80 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ed52:	887b      	ldrh	r3, [r7, #2]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d109      	bne.n	800ed6c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ed58:	4b8b      	ldr	r3, [pc, #556]	; (800ef88 <tcp_split_unsent_seg+0x274>)
 800ed5a:	f240 3253 	movw	r2, #851	; 0x353
 800ed5e:	498d      	ldr	r1, [pc, #564]	; (800ef94 <tcp_split_unsent_seg+0x280>)
 800ed60:	488b      	ldr	r0, [pc, #556]	; (800ef90 <tcp_split_unsent_seg+0x27c>)
 800ed62:	f005 f9cb 	bl	80140fc <iprintf>
    return ERR_VAL;
 800ed66:	f06f 0305 	mvn.w	r3, #5
 800ed6a:	e109      	b.n	800ef80 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	891b      	ldrh	r3, [r3, #8]
 800ed70:	887a      	ldrh	r2, [r7, #2]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d301      	bcc.n	800ed7a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	e102      	b.n	800ef80 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed7e:	887a      	ldrh	r2, [r7, #2]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d906      	bls.n	800ed92 <tcp_split_unsent_seg+0x7e>
 800ed84:	4b80      	ldr	r3, [pc, #512]	; (800ef88 <tcp_split_unsent_seg+0x274>)
 800ed86:	f240 325b 	movw	r2, #859	; 0x35b
 800ed8a:	4983      	ldr	r1, [pc, #524]	; (800ef98 <tcp_split_unsent_seg+0x284>)
 800ed8c:	4880      	ldr	r0, [pc, #512]	; (800ef90 <tcp_split_unsent_seg+0x27c>)
 800ed8e:	f005 f9b5 	bl	80140fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	891b      	ldrh	r3, [r3, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d106      	bne.n	800eda8 <tcp_split_unsent_seg+0x94>
 800ed9a:	4b7b      	ldr	r3, [pc, #492]	; (800ef88 <tcp_split_unsent_seg+0x274>)
 800ed9c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800eda0:	497e      	ldr	r1, [pc, #504]	; (800ef9c <tcp_split_unsent_seg+0x288>)
 800eda2:	487b      	ldr	r0, [pc, #492]	; (800ef90 <tcp_split_unsent_seg+0x27c>)
 800eda4:	f005 f9aa 	bl	80140fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	7a9b      	ldrb	r3, [r3, #10]
 800edac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800edae:	7bfb      	ldrb	r3, [r7, #15]
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	f003 0304 	and.w	r3, r3, #4
 800edb8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	891a      	ldrh	r2, [r3, #8]
 800edbe:	887b      	ldrh	r3, [r7, #2]
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800edc4:	7bbb      	ldrb	r3, [r7, #14]
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	89bb      	ldrh	r3, [r7, #12]
 800edca:	4413      	add	r3, r2
 800edcc:	b29b      	uxth	r3, r3
 800edce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edd2:	4619      	mov	r1, r3
 800edd4:	2036      	movs	r0, #54	; 0x36
 800edd6:	f7fb fabf 	bl	800a358 <pbuf_alloc>
 800edda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f000 80b7 	beq.w	800ef52 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	891a      	ldrh	r2, [r3, #8]
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	891b      	ldrh	r3, [r3, #8]
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	887b      	ldrh	r3, [r7, #2]
 800edf4:	4413      	add	r3, r2
 800edf6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	6858      	ldr	r0, [r3, #4]
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	685a      	ldr	r2, [r3, #4]
 800ee00:	7bbb      	ldrb	r3, [r7, #14]
 800ee02:	18d1      	adds	r1, r2, r3
 800ee04:	897b      	ldrh	r3, [r7, #10]
 800ee06:	89ba      	ldrh	r2, [r7, #12]
 800ee08:	f7fb ff84 	bl	800ad14 <pbuf_copy_partial>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461a      	mov	r2, r3
 800ee10:	89bb      	ldrh	r3, [r7, #12]
 800ee12:	4293      	cmp	r3, r2
 800ee14:	f040 809f 	bne.w	800ef56 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	899b      	ldrh	r3, [r3, #12]
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fa fac9 	bl	80093b8 <lwip_htons>
 800ee26:	4603      	mov	r3, r0
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee2e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ee30:	2300      	movs	r3, #0
 800ee32:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ee34:	7efb      	ldrb	r3, [r7, #27]
 800ee36:	f003 0308 	and.w	r3, r3, #8
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d007      	beq.n	800ee4e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ee3e:	7efb      	ldrb	r3, [r7, #27]
 800ee40:	f023 0308 	bic.w	r3, r3, #8
 800ee44:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ee46:	7ebb      	ldrb	r3, [r7, #26]
 800ee48:	f043 0308 	orr.w	r3, r3, #8
 800ee4c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ee4e:	7efb      	ldrb	r3, [r7, #27]
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ee58:	7efb      	ldrb	r3, [r7, #27]
 800ee5a:	f023 0301 	bic.w	r3, r3, #1
 800ee5e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ee60:	7ebb      	ldrb	r3, [r7, #26]
 800ee62:	f043 0301 	orr.w	r3, r3, #1
 800ee66:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fa fab7 	bl	80093e2 <lwip_htonl>
 800ee74:	4602      	mov	r2, r0
 800ee76:	887b      	ldrh	r3, [r7, #2]
 800ee78:	18d1      	adds	r1, r2, r3
 800ee7a:	7eba      	ldrb	r2, [r7, #26]
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	460b      	mov	r3, r1
 800ee82:	6939      	ldr	r1, [r7, #16]
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff fea7 	bl	800ebd8 <tcp_create_segment>
 800ee8a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d063      	beq.n	800ef5a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fb fdca 	bl	800aa30 <pbuf_clen>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	461a      	mov	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eea6:	1a9b      	subs	r3, r3, r2
 800eea8:	b29a      	uxth	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	6858      	ldr	r0, [r3, #4]
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	891a      	ldrh	r2, [r3, #8]
 800eeba:	89bb      	ldrh	r3, [r7, #12]
 800eebc:	1ad3      	subs	r3, r2, r3
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	4619      	mov	r1, r3
 800eec2:	f7fb fba7 	bl	800a614 <pbuf_realloc>
  useg->len -= remainder;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	891a      	ldrh	r2, [r3, #8]
 800eeca:	89bb      	ldrh	r3, [r7, #12]
 800eecc:	1ad3      	subs	r3, r2, r3
 800eece:	b29a      	uxth	r2, r3
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	899b      	ldrh	r3, [r3, #12]
 800eeda:	b29c      	uxth	r4, r3
 800eedc:	7efb      	ldrb	r3, [r7, #27]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fa fa69 	bl	80093b8 <lwip_htons>
 800eee6:	4603      	mov	r3, r0
 800eee8:	461a      	mov	r2, r3
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	4322      	orrs	r2, r4
 800eef0:	b292      	uxth	r2, r2
 800eef2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f7fb fd99 	bl	800aa30 <pbuf_clen>
 800eefe:	4603      	mov	r3, r0
 800ef00:	461a      	mov	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef08:	4413      	add	r3, r2
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fb fd8a 	bl	800aa30 <pbuf_clen>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	461a      	mov	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef26:	4413      	add	r3, r2
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	69fa      	ldr	r2, [r7, #28]
 800ef3c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d103      	bne.n	800ef4e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e016      	b.n	800ef80 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ef52:	bf00      	nop
 800ef54:	e002      	b.n	800ef5c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ef56:	bf00      	nop
 800ef58:	e000      	b.n	800ef5c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ef5a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d006      	beq.n	800ef70 <tcp_split_unsent_seg+0x25c>
 800ef62:	4b09      	ldr	r3, [pc, #36]	; (800ef88 <tcp_split_unsent_seg+0x274>)
 800ef64:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ef68:	490d      	ldr	r1, [pc, #52]	; (800efa0 <tcp_split_unsent_seg+0x28c>)
 800ef6a:	4809      	ldr	r0, [pc, #36]	; (800ef90 <tcp_split_unsent_seg+0x27c>)
 800ef6c:	f005 f8c6 	bl	80140fc <iprintf>
  if (p != NULL) {
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ef76:	6938      	ldr	r0, [r7, #16]
 800ef78:	f7fb fcd2 	bl	800a920 <pbuf_free>
  }

  return ERR_MEM;
 800ef7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3724      	adds	r7, #36	; 0x24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd90      	pop	{r4, r7, pc}
 800ef88:	080166c0 	.word	0x080166c0
 800ef8c:	08016a54 	.word	0x08016a54
 800ef90:	08016714 	.word	0x08016714
 800ef94:	08016a78 	.word	0x08016a78
 800ef98:	08016a9c 	.word	0x08016a9c
 800ef9c:	08016aac 	.word	0x08016aac
 800efa0:	08016abc 	.word	0x08016abc

0800efa4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800efa4:	b590      	push	{r4, r7, lr}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d106      	bne.n	800efc0 <tcp_send_fin+0x1c>
 800efb2:	4b21      	ldr	r3, [pc, #132]	; (800f038 <tcp_send_fin+0x94>)
 800efb4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800efb8:	4920      	ldr	r1, [pc, #128]	; (800f03c <tcp_send_fin+0x98>)
 800efba:	4821      	ldr	r0, [pc, #132]	; (800f040 <tcp_send_fin+0x9c>)
 800efbc:	f005 f89e 	bl	80140fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d02e      	beq.n	800f026 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efcc:	60fb      	str	r3, [r7, #12]
 800efce:	e002      	b.n	800efd6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1f8      	bne.n	800efd0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	899b      	ldrh	r3, [r3, #12]
 800efe4:	b29b      	uxth	r3, r3
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fa f9e6 	bl	80093b8 <lwip_htons>
 800efec:	4603      	mov	r3, r0
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	f003 0307 	and.w	r3, r3, #7
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d116      	bne.n	800f026 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	899b      	ldrh	r3, [r3, #12]
 800effe:	b29c      	uxth	r4, r3
 800f000:	2001      	movs	r0, #1
 800f002:	f7fa f9d9 	bl	80093b8 <lwip_htons>
 800f006:	4603      	mov	r3, r0
 800f008:	461a      	mov	r2, r3
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	4322      	orrs	r2, r4
 800f010:	b292      	uxth	r2, r2
 800f012:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	8b5b      	ldrh	r3, [r3, #26]
 800f018:	f043 0320 	orr.w	r3, r3, #32
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	e004      	b.n	800f030 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f026:	2101      	movs	r1, #1
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 f80b 	bl	800f044 <tcp_enqueue_flags>
 800f02e:	4603      	mov	r3, r0
}
 800f030:	4618      	mov	r0, r3
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	bd90      	pop	{r4, r7, pc}
 800f038:	080166c0 	.word	0x080166c0
 800f03c:	08016ac8 	.word	0x08016ac8
 800f040:	08016714 	.word	0x08016714

0800f044 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08a      	sub	sp, #40	; 0x28
 800f048:	af02      	add	r7, sp, #8
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f050:	2300      	movs	r3, #0
 800f052:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f054:	2300      	movs	r3, #0
 800f056:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f058:	78fb      	ldrb	r3, [r7, #3]
 800f05a:	f003 0303 	and.w	r3, r3, #3
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d106      	bne.n	800f070 <tcp_enqueue_flags+0x2c>
 800f062:	4b67      	ldr	r3, [pc, #412]	; (800f200 <tcp_enqueue_flags+0x1bc>)
 800f064:	f240 4211 	movw	r2, #1041	; 0x411
 800f068:	4966      	ldr	r1, [pc, #408]	; (800f204 <tcp_enqueue_flags+0x1c0>)
 800f06a:	4867      	ldr	r0, [pc, #412]	; (800f208 <tcp_enqueue_flags+0x1c4>)
 800f06c:	f005 f846 	bl	80140fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d106      	bne.n	800f084 <tcp_enqueue_flags+0x40>
 800f076:	4b62      	ldr	r3, [pc, #392]	; (800f200 <tcp_enqueue_flags+0x1bc>)
 800f078:	f240 4213 	movw	r2, #1043	; 0x413
 800f07c:	4963      	ldr	r1, [pc, #396]	; (800f20c <tcp_enqueue_flags+0x1c8>)
 800f07e:	4862      	ldr	r0, [pc, #392]	; (800f208 <tcp_enqueue_flags+0x1c4>)
 800f080:	f005 f83c 	bl	80140fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f084:	78fb      	ldrb	r3, [r7, #3]
 800f086:	f003 0302 	and.w	r3, r3, #2
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f08e:	2301      	movs	r3, #1
 800f090:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f092:	7ffb      	ldrb	r3, [r7, #31]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	b2db      	uxtb	r3, r3
 800f098:	f003 0304 	and.w	r3, r3, #4
 800f09c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f09e:	7dfb      	ldrb	r3, [r7, #23]
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	2036      	movs	r0, #54	; 0x36
 800f0aa:	f7fb f955 	bl	800a358 <pbuf_alloc>
 800f0ae:	6138      	str	r0, [r7, #16]
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d109      	bne.n	800f0ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0c8:	e095      	b.n	800f1f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	895a      	ldrh	r2, [r3, #10]
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d206      	bcs.n	800f0e4 <tcp_enqueue_flags+0xa0>
 800f0d6:	4b4a      	ldr	r3, [pc, #296]	; (800f200 <tcp_enqueue_flags+0x1bc>)
 800f0d8:	f240 4239 	movw	r2, #1081	; 0x439
 800f0dc:	494c      	ldr	r1, [pc, #304]	; (800f210 <tcp_enqueue_flags+0x1cc>)
 800f0de:	484a      	ldr	r0, [pc, #296]	; (800f208 <tcp_enqueue_flags+0x1c4>)
 800f0e0:	f005 f80c 	bl	80140fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f0e8:	78fa      	ldrb	r2, [r7, #3]
 800f0ea:	7ffb      	ldrb	r3, [r7, #31]
 800f0ec:	9300      	str	r3, [sp, #0]
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	6939      	ldr	r1, [r7, #16]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff fd70 	bl	800ebd8 <tcp_create_segment>
 800f0f8:	60f8      	str	r0, [r7, #12]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d109      	bne.n	800f114 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	8b5b      	ldrh	r3, [r3, #26]
 800f104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f108:	b29a      	uxth	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f10e:	f04f 33ff 	mov.w	r3, #4294967295
 800f112:	e070      	b.n	800f1f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	f003 0303 	and.w	r3, r3, #3
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d006      	beq.n	800f12e <tcp_enqueue_flags+0xea>
 800f120:	4b37      	ldr	r3, [pc, #220]	; (800f200 <tcp_enqueue_flags+0x1bc>)
 800f122:	f240 4242 	movw	r2, #1090	; 0x442
 800f126:	493b      	ldr	r1, [pc, #236]	; (800f214 <tcp_enqueue_flags+0x1d0>)
 800f128:	4837      	ldr	r0, [pc, #220]	; (800f208 <tcp_enqueue_flags+0x1c4>)
 800f12a:	f004 ffe7 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	891b      	ldrh	r3, [r3, #8]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d006      	beq.n	800f144 <tcp_enqueue_flags+0x100>
 800f136:	4b32      	ldr	r3, [pc, #200]	; (800f200 <tcp_enqueue_flags+0x1bc>)
 800f138:	f240 4243 	movw	r2, #1091	; 0x443
 800f13c:	4936      	ldr	r1, [pc, #216]	; (800f218 <tcp_enqueue_flags+0x1d4>)
 800f13e:	4832      	ldr	r0, [pc, #200]	; (800f208 <tcp_enqueue_flags+0x1c4>)
 800f140:	f004 ffdc 	bl	80140fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d103      	bne.n	800f154 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	66da      	str	r2, [r3, #108]	; 0x6c
 800f152:	e00d      	b.n	800f170 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f158:	61bb      	str	r3, [r7, #24]
 800f15a:	e002      	b.n	800f162 <tcp_enqueue_flags+0x11e>
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	61bb      	str	r3, [r7, #24]
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1f8      	bne.n	800f15c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f178:	78fb      	ldrb	r3, [r7, #3]
 800f17a:	f003 0302 	and.w	r3, r3, #2
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d104      	bne.n	800f18c <tcp_enqueue_flags+0x148>
 800f182:	78fb      	ldrb	r3, [r7, #3]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d004      	beq.n	800f196 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f196:	78fb      	ldrb	r3, [r7, #3]
 800f198:	f003 0301 	and.w	r3, r3, #1
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d006      	beq.n	800f1ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	8b5b      	ldrh	r3, [r3, #26]
 800f1a4:	f043 0320 	orr.w	r3, r3, #32
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fb fc3c 	bl	800aa30 <pbuf_clen>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1c2:	4413      	add	r3, r2
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d00e      	beq.n	800f1f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10a      	bne.n	800f1f4 <tcp_enqueue_flags+0x1b0>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d106      	bne.n	800f1f4 <tcp_enqueue_flags+0x1b0>
 800f1e6:	4b06      	ldr	r3, [pc, #24]	; (800f200 <tcp_enqueue_flags+0x1bc>)
 800f1e8:	f240 4265 	movw	r2, #1125	; 0x465
 800f1ec:	490b      	ldr	r1, [pc, #44]	; (800f21c <tcp_enqueue_flags+0x1d8>)
 800f1ee:	4806      	ldr	r0, [pc, #24]	; (800f208 <tcp_enqueue_flags+0x1c4>)
 800f1f0:	f004 ff84 	bl	80140fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3720      	adds	r7, #32
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	080166c0 	.word	0x080166c0
 800f204:	08016ae4 	.word	0x08016ae4
 800f208:	08016714 	.word	0x08016714
 800f20c:	08016b3c 	.word	0x08016b3c
 800f210:	08016b5c 	.word	0x08016b5c
 800f214:	08016b98 	.word	0x08016b98
 800f218:	08016bb0 	.word	0x08016bb0
 800f21c:	08016bdc 	.word	0x08016bdc

0800f220 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f220:	b5b0      	push	{r4, r5, r7, lr}
 800f222:	b08a      	sub	sp, #40	; 0x28
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <tcp_output+0x1c>
 800f22e:	4b9e      	ldr	r3, [pc, #632]	; (800f4a8 <tcp_output+0x288>)
 800f230:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f234:	499d      	ldr	r1, [pc, #628]	; (800f4ac <tcp_output+0x28c>)
 800f236:	489e      	ldr	r0, [pc, #632]	; (800f4b0 <tcp_output+0x290>)
 800f238:	f004 ff60 	bl	80140fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b01      	cmp	r3, #1
 800f242:	d106      	bne.n	800f252 <tcp_output+0x32>
 800f244:	4b98      	ldr	r3, [pc, #608]	; (800f4a8 <tcp_output+0x288>)
 800f246:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f24a:	499a      	ldr	r1, [pc, #616]	; (800f4b4 <tcp_output+0x294>)
 800f24c:	4898      	ldr	r0, [pc, #608]	; (800f4b0 <tcp_output+0x290>)
 800f24e:	f004 ff55 	bl	80140fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f252:	4b99      	ldr	r3, [pc, #612]	; (800f4b8 <tcp_output+0x298>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	687a      	ldr	r2, [r7, #4]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d101      	bne.n	800f260 <tcp_output+0x40>
    return ERR_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	e1ce      	b.n	800f5fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f26c:	4293      	cmp	r3, r2
 800f26e:	bf28      	it	cs
 800f270:	4613      	movcs	r3, r2
 800f272:	b29b      	uxth	r3, r3
 800f274:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f27a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10b      	bne.n	800f29a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	8b5b      	ldrh	r3, [r3, #26]
 800f286:	f003 0302 	and.w	r3, r3, #2
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 81aa 	beq.w	800f5e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 fdcb 	bl	800fe2c <tcp_send_empty_ack>
 800f296:	4603      	mov	r3, r0
 800f298:	e1b1      	b.n	800f5fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f29a:	6879      	ldr	r1, [r7, #4]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f7ff fc7c 	bl	800eba0 <tcp_route>
 800f2a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d102      	bne.n	800f2b6 <tcp_output+0x96>
    return ERR_RTE;
 800f2b0:	f06f 0303 	mvn.w	r3, #3
 800f2b4:	e1a3      	b.n	800f5fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d003      	beq.n	800f2c4 <tcp_output+0xa4>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d111      	bne.n	800f2e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <tcp_output+0xb0>
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	e000      	b.n	800f2d2 <tcp_output+0xb2>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d102      	bne.n	800f2e0 <tcp_output+0xc0>
      return ERR_RTE;
 800f2da:	f06f 0303 	mvn.w	r3, #3
 800f2de:	e18e      	b.n	800f5fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	681a      	ldr	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ea:	68db      	ldr	r3, [r3, #12]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fa f877 	bl	80093e2 <lwip_htonl>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2fe:	8912      	ldrh	r2, [r2, #8]
 800f300:	4413      	add	r3, r2
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	429a      	cmp	r2, r3
 800f306:	d227      	bcs.n	800f358 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f30e:	461a      	mov	r2, r3
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	4293      	cmp	r3, r2
 800f314:	d114      	bne.n	800f340 <tcp_output+0x120>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d110      	bne.n	800f340 <tcp_output+0x120>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10b      	bne.n	800f340 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	8b5b      	ldrh	r3, [r3, #26]
 800f344:	f003 0302 	and.w	r3, r3, #2
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f000 814d 	beq.w	800f5e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fd6c 	bl	800fe2c <tcp_send_empty_ack>
 800f354:	4603      	mov	r3, r0
 800f356:	e152      	b.n	800f5fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f364:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 811c 	beq.w	800f5a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f36e:	e002      	b.n	800f376 <tcp_output+0x156>
 800f370:	6a3b      	ldr	r3, [r7, #32]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	623b      	str	r3, [r7, #32]
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1f8      	bne.n	800f370 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f37e:	e112      	b.n	800f5a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	899b      	ldrh	r3, [r3, #12]
 800f386:	b29b      	uxth	r3, r3
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fa f815 	bl	80093b8 <lwip_htons>
 800f38e:	4603      	mov	r3, r0
 800f390:	b2db      	uxtb	r3, r3
 800f392:	f003 0304 	and.w	r3, r3, #4
 800f396:	2b00      	cmp	r3, #0
 800f398:	d006      	beq.n	800f3a8 <tcp_output+0x188>
 800f39a:	4b43      	ldr	r3, [pc, #268]	; (800f4a8 <tcp_output+0x288>)
 800f39c:	f240 5236 	movw	r2, #1334	; 0x536
 800f3a0:	4946      	ldr	r1, [pc, #280]	; (800f4bc <tcp_output+0x29c>)
 800f3a2:	4843      	ldr	r0, [pc, #268]	; (800f4b0 <tcp_output+0x290>)
 800f3a4:	f004 feaa 	bl	80140fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01f      	beq.n	800f3f0 <tcp_output+0x1d0>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	8b5b      	ldrh	r3, [r3, #26]
 800f3b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d119      	bne.n	800f3f0 <tcp_output+0x1d0>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <tcp_output+0x1bc>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d110      	bne.n	800f3f0 <tcp_output+0x1d0>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3d2:	891a      	ldrh	r2, [r3, #8]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d209      	bcs.n	800f3f0 <tcp_output+0x1d0>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d004      	beq.n	800f3f0 <tcp_output+0x1d0>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3ec:	2b08      	cmp	r3, #8
 800f3ee:	d901      	bls.n	800f3f4 <tcp_output+0x1d4>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e000      	b.n	800f3f6 <tcp_output+0x1d6>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d106      	bne.n	800f408 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8b5b      	ldrh	r3, [r3, #26]
 800f3fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 80e4 	beq.w	800f5d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	7d1b      	ldrb	r3, [r3, #20]
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	d00d      	beq.n	800f42c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	899b      	ldrh	r3, [r3, #12]
 800f416:	b29c      	uxth	r4, r3
 800f418:	2010      	movs	r0, #16
 800f41a:	f7f9 ffcd 	bl	80093b8 <lwip_htons>
 800f41e:	4603      	mov	r3, r0
 800f420:	461a      	mov	r2, r3
 800f422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	4322      	orrs	r2, r4
 800f428:	b292      	uxth	r2, r2
 800f42a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f42c:	697a      	ldr	r2, [r7, #20]
 800f42e:	6879      	ldr	r1, [r7, #4]
 800f430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f432:	f000 f909 	bl	800f648 <tcp_output_segment>
 800f436:	4603      	mov	r3, r0
 800f438:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d009      	beq.n	800f456 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	8b5b      	ldrh	r3, [r3, #26]
 800f446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	835a      	strh	r2, [r3, #26]
      return err;
 800f450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f454:	e0d3      	b.n	800f5fe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7d1b      	ldrb	r3, [r3, #20]
 800f462:	2b02      	cmp	r3, #2
 800f464:	d006      	beq.n	800f474 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	8b5b      	ldrh	r3, [r3, #26]
 800f46a:	f023 0303 	bic.w	r3, r3, #3
 800f46e:	b29a      	uxth	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7f9 ffb1 	bl	80093e2 <lwip_htonl>
 800f480:	4604      	mov	r4, r0
 800f482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f484:	891b      	ldrh	r3, [r3, #8]
 800f486:	461d      	mov	r5, r3
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	899b      	ldrh	r3, [r3, #12]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	4618      	mov	r0, r3
 800f492:	f7f9 ff91 	bl	80093b8 <lwip_htons>
 800f496:	4603      	mov	r3, r0
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	f003 0303 	and.w	r3, r3, #3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00e      	beq.n	800f4c0 <tcp_output+0x2a0>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e00d      	b.n	800f4c2 <tcp_output+0x2a2>
 800f4a6:	bf00      	nop
 800f4a8:	080166c0 	.word	0x080166c0
 800f4ac:	08016c04 	.word	0x08016c04
 800f4b0:	08016714 	.word	0x08016714
 800f4b4:	08016c1c 	.word	0x08016c1c
 800f4b8:	20006cf4 	.word	0x20006cf4
 800f4bc:	08016c44 	.word	0x08016c44
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	442b      	add	r3, r5
 800f4c4:	4423      	add	r3, r4
 800f4c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	da02      	bge.n	800f4da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	891b      	ldrh	r3, [r3, #8]
 800f4de:	461c      	mov	r4, r3
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	899b      	ldrh	r3, [r3, #12]
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7f9 ff65 	bl	80093b8 <lwip_htons>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	f003 0303 	and.w	r3, r3, #3
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <tcp_output+0x2de>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e000      	b.n	800f500 <tcp_output+0x2e0>
 800f4fe:	2300      	movs	r3, #0
 800f500:	4423      	add	r3, r4
 800f502:	2b00      	cmp	r3, #0
 800f504:	d049      	beq.n	800f59a <tcp_output+0x37a>
      seg->next = NULL;
 800f506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f510:	2b00      	cmp	r3, #0
 800f512:	d105      	bne.n	800f520 <tcp_output+0x300>
        pcb->unacked = seg;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f518:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51c:	623b      	str	r3, [r7, #32]
 800f51e:	e03f      	b.n	800f5a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	4618      	mov	r0, r3
 800f528:	f7f9 ff5b 	bl	80093e2 <lwip_htonl>
 800f52c:	4604      	mov	r4, r0
 800f52e:	6a3b      	ldr	r3, [r7, #32]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	4618      	mov	r0, r3
 800f536:	f7f9 ff54 	bl	80093e2 <lwip_htonl>
 800f53a:	4603      	mov	r3, r0
 800f53c:	1ae3      	subs	r3, r4, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	da24      	bge.n	800f58c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3370      	adds	r3, #112	; 0x70
 800f546:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f548:	e002      	b.n	800f550 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d011      	beq.n	800f57c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	4618      	mov	r0, r3
 800f562:	f7f9 ff3e 	bl	80093e2 <lwip_htonl>
 800f566:	4604      	mov	r4, r0
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	4618      	mov	r0, r3
 800f570:	f7f9 ff37 	bl	80093e2 <lwip_htonl>
 800f574:	4603      	mov	r3, r0
 800f576:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f578:	2b00      	cmp	r3, #0
 800f57a:	dbe6      	blt.n	800f54a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f582:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	e009      	b.n	800f5a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f590:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f592:	6a3b      	ldr	r3, [r7, #32]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	623b      	str	r3, [r7, #32]
 800f598:	e002      	b.n	800f5a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f59a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f59c:	f7fc fc43 	bl	800be26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d012      	beq.n	800f5d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7f9 ff15 	bl	80093e2 <lwip_htonl>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5be:	1ad3      	subs	r3, r2, r3
 800f5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c2:	8912      	ldrh	r2, [r2, #8]
 800f5c4:	4413      	add	r3, r2
  while (seg != NULL &&
 800f5c6:	69ba      	ldr	r2, [r7, #24]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	f4bf aed9 	bcs.w	800f380 <tcp_output+0x160>
 800f5ce:	e000      	b.n	800f5d2 <tcp_output+0x3b2>
      break;
 800f5d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d108      	bne.n	800f5ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f5e2:	e004      	b.n	800f5ee <tcp_output+0x3ce>
    goto output_done;
 800f5e4:	bf00      	nop
 800f5e6:	e002      	b.n	800f5ee <tcp_output+0x3ce>
    goto output_done;
 800f5e8:	bf00      	nop
 800f5ea:	e000      	b.n	800f5ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f5ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	8b5b      	ldrh	r3, [r3, #26]
 800f5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3728      	adds	r7, #40	; 0x28
 800f602:	46bd      	mov	sp, r7
 800f604:	bdb0      	pop	{r4, r5, r7, pc}
 800f606:	bf00      	nop

0800f608 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d106      	bne.n	800f624 <tcp_output_segment_busy+0x1c>
 800f616:	4b09      	ldr	r3, [pc, #36]	; (800f63c <tcp_output_segment_busy+0x34>)
 800f618:	f240 529a 	movw	r2, #1434	; 0x59a
 800f61c:	4908      	ldr	r1, [pc, #32]	; (800f640 <tcp_output_segment_busy+0x38>)
 800f61e:	4809      	ldr	r0, [pc, #36]	; (800f644 <tcp_output_segment_busy+0x3c>)
 800f620:	f004 fd6c 	bl	80140fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	7b9b      	ldrb	r3, [r3, #14]
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d001      	beq.n	800f632 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f62e:	2301      	movs	r3, #1
 800f630:	e000      	b.n	800f634 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	080166c0 	.word	0x080166c0
 800f640:	08016c5c 	.word	0x08016c5c
 800f644:	08016714 	.word	0x08016714

0800f648 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f648:	b5b0      	push	{r4, r5, r7, lr}
 800f64a:	b08c      	sub	sp, #48	; 0x30
 800f64c:	af04      	add	r7, sp, #16
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d106      	bne.n	800f668 <tcp_output_segment+0x20>
 800f65a:	4b63      	ldr	r3, [pc, #396]	; (800f7e8 <tcp_output_segment+0x1a0>)
 800f65c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f660:	4962      	ldr	r1, [pc, #392]	; (800f7ec <tcp_output_segment+0x1a4>)
 800f662:	4863      	ldr	r0, [pc, #396]	; (800f7f0 <tcp_output_segment+0x1a8>)
 800f664:	f004 fd4a 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d106      	bne.n	800f67c <tcp_output_segment+0x34>
 800f66e:	4b5e      	ldr	r3, [pc, #376]	; (800f7e8 <tcp_output_segment+0x1a0>)
 800f670:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f674:	495f      	ldr	r1, [pc, #380]	; (800f7f4 <tcp_output_segment+0x1ac>)
 800f676:	485e      	ldr	r0, [pc, #376]	; (800f7f0 <tcp_output_segment+0x1a8>)
 800f678:	f004 fd40 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <tcp_output_segment+0x48>
 800f682:	4b59      	ldr	r3, [pc, #356]	; (800f7e8 <tcp_output_segment+0x1a0>)
 800f684:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f688:	495b      	ldr	r1, [pc, #364]	; (800f7f8 <tcp_output_segment+0x1b0>)
 800f68a:	4859      	ldr	r0, [pc, #356]	; (800f7f0 <tcp_output_segment+0x1a8>)
 800f68c:	f004 fd36 	bl	80140fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f7ff ffb9 	bl	800f608 <tcp_output_segment_busy>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f69c:	2300      	movs	r3, #0
 800f69e:	e09f      	b.n	800f7e0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	68dc      	ldr	r4, [r3, #12]
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	f7f9 fe9a 	bl	80093e2 <lwip_htonl>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	68dc      	ldr	r4, [r3, #12]
 800f6ba:	4610      	mov	r0, r2
 800f6bc:	f7f9 fe7c 	bl	80093b8 <lwip_htons>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c8:	68ba      	ldr	r2, [r7, #8]
 800f6ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f6cc:	441a      	add	r2, r3
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	3314      	adds	r3, #20
 800f6d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	7a9b      	ldrb	r3, [r3, #10]
 800f6de:	f003 0301 	and.w	r3, r3, #1
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d015      	beq.n	800f712 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	6879      	ldr	r1, [r7, #4]
 800f6ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f6f2:	f7fc fe8f 	bl	800c414 <tcp_eff_send_mss_netif>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f6fa:	8b7b      	ldrh	r3, [r7, #26]
 800f6fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f700:	4618      	mov	r0, r3
 800f702:	f7f9 fe6e 	bl	80093e2 <lwip_htonl>
 800f706:	4602      	mov	r2, r0
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	3304      	adds	r3, #4
 800f710:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f718:	2b00      	cmp	r3, #0
 800f71a:	da02      	bge.n	800f722 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	2200      	movs	r2, #0
 800f720:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f726:	2b00      	cmp	r3, #0
 800f728:	d10c      	bne.n	800f744 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f72a:	4b34      	ldr	r3, [pc, #208]	; (800f7fc <tcp_output_segment+0x1b4>)
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	f7f9 fe52 	bl	80093e2 <lwip_htonl>
 800f73e:	4602      	mov	r2, r0
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	68da      	ldr	r2, [r3, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	8959      	ldrh	r1, [r3, #10]
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	8b3a      	ldrh	r2, [r7, #24]
 800f75e:	1a8a      	subs	r2, r1, r2
 800f760:	b292      	uxth	r2, r2
 800f762:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	8919      	ldrh	r1, [r3, #8]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	8b3a      	ldrh	r2, [r7, #24]
 800f770:	1a8a      	subs	r2, r1, r2
 800f772:	b292      	uxth	r2, r2
 800f774:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	68d2      	ldr	r2, [r2, #12]
 800f77e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	2200      	movs	r2, #0
 800f786:	741a      	strb	r2, [r3, #16]
 800f788:	2200      	movs	r2, #0
 800f78a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	f103 0214 	add.w	r2, r3, #20
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	7a9b      	ldrb	r3, [r3, #10]
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	f003 0304 	and.w	r3, r3, #4
 800f79e:	4413      	add	r3, r2
 800f7a0:	69fa      	ldr	r2, [r7, #28]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d006      	beq.n	800f7b4 <tcp_output_segment+0x16c>
 800f7a6:	4b10      	ldr	r3, [pc, #64]	; (800f7e8 <tcp_output_segment+0x1a0>)
 800f7a8:	f240 621c 	movw	r2, #1564	; 0x61c
 800f7ac:	4914      	ldr	r1, [pc, #80]	; (800f800 <tcp_output_segment+0x1b8>)
 800f7ae:	4810      	ldr	r0, [pc, #64]	; (800f7f0 <tcp_output_segment+0x1a8>)
 800f7b0:	f004 fca4 	bl	80140fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6858      	ldr	r0, [r3, #4]
 800f7b8:	68b9      	ldr	r1, [r7, #8]
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	1d1c      	adds	r4, r3, #4
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	7add      	ldrb	r5, [r3, #11]
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	7a9b      	ldrb	r3, [r3, #10]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	9202      	str	r2, [sp, #8]
 800f7ca:	2206      	movs	r2, #6
 800f7cc:	9201      	str	r2, [sp, #4]
 800f7ce:	9300      	str	r3, [sp, #0]
 800f7d0:	462b      	mov	r3, r5
 800f7d2:	4622      	mov	r2, r4
 800f7d4:	f002 fdf0 	bl	80123b8 <ip4_output_if>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f7dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3720      	adds	r7, #32
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bdb0      	pop	{r4, r5, r7, pc}
 800f7e8:	080166c0 	.word	0x080166c0
 800f7ec:	08016c84 	.word	0x08016c84
 800f7f0:	08016714 	.word	0x08016714
 800f7f4:	08016ca4 	.word	0x08016ca4
 800f7f8:	08016cc4 	.word	0x08016cc4
 800f7fc:	20006ce4 	.word	0x20006ce4
 800f800:	08016ce8 	.word	0x08016ce8

0800f804 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f804:	b5b0      	push	{r4, r5, r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d106      	bne.n	800f820 <tcp_rexmit_rto_prepare+0x1c>
 800f812:	4b31      	ldr	r3, [pc, #196]	; (800f8d8 <tcp_rexmit_rto_prepare+0xd4>)
 800f814:	f240 6263 	movw	r2, #1635	; 0x663
 800f818:	4930      	ldr	r1, [pc, #192]	; (800f8dc <tcp_rexmit_rto_prepare+0xd8>)
 800f81a:	4831      	ldr	r0, [pc, #196]	; (800f8e0 <tcp_rexmit_rto_prepare+0xdc>)
 800f81c:	f004 fc6e 	bl	80140fc <iprintf>

  if (pcb->unacked == NULL) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f824:	2b00      	cmp	r3, #0
 800f826:	d102      	bne.n	800f82e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f828:	f06f 0305 	mvn.w	r3, #5
 800f82c:	e050      	b.n	800f8d0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f832:	60fb      	str	r3, [r7, #12]
 800f834:	e00b      	b.n	800f84e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f7ff fee6 	bl	800f608 <tcp_output_segment_busy>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d002      	beq.n	800f848 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f842:	f06f 0305 	mvn.w	r3, #5
 800f846:	e043      	b.n	800f8d0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	60fb      	str	r3, [r7, #12]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1ef      	bne.n	800f836 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f7ff fed6 	bl	800f608 <tcp_output_segment_busy>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d002      	beq.n	800f868 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f862:	f06f 0305 	mvn.w	r3, #5
 800f866:	e033      	b.n	800f8d0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	8b5b      	ldrh	r3, [r3, #26]
 800f882:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f886:	b29a      	uxth	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	4618      	mov	r0, r3
 800f894:	f7f9 fda5 	bl	80093e2 <lwip_htonl>
 800f898:	4604      	mov	r4, r0
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	891b      	ldrh	r3, [r3, #8]
 800f89e:	461d      	mov	r5, r3
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	899b      	ldrh	r3, [r3, #12]
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7f9 fd85 	bl	80093b8 <lwip_htons>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	f003 0303 	and.w	r3, r3, #3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <tcp_rexmit_rto_prepare+0xba>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <tcp_rexmit_rto_prepare+0xbc>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	442b      	add	r3, r5
 800f8c2:	18e2      	adds	r2, r4, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3710      	adds	r7, #16
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8d8:	080166c0 	.word	0x080166c0
 800f8dc:	08016cfc 	.word	0x08016cfc
 800f8e0:	08016714 	.word	0x08016714

0800f8e4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d106      	bne.n	800f900 <tcp_rexmit_rto_commit+0x1c>
 800f8f2:	4b0d      	ldr	r3, [pc, #52]	; (800f928 <tcp_rexmit_rto_commit+0x44>)
 800f8f4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f8f8:	490c      	ldr	r1, [pc, #48]	; (800f92c <tcp_rexmit_rto_commit+0x48>)
 800f8fa:	480d      	ldr	r0, [pc, #52]	; (800f930 <tcp_rexmit_rto_commit+0x4c>)
 800f8fc:	f004 fbfe 	bl	80140fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f906:	2bff      	cmp	r3, #255	; 0xff
 800f908:	d007      	beq.n	800f91a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f910:	3301      	adds	r3, #1
 800f912:	b2da      	uxtb	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7ff fc80 	bl	800f220 <tcp_output>
}
 800f920:	bf00      	nop
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	080166c0 	.word	0x080166c0
 800f92c:	08016d20 	.word	0x08016d20
 800f930:	08016714 	.word	0x08016714

0800f934 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d106      	bne.n	800f950 <tcp_rexmit_rto+0x1c>
 800f942:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <tcp_rexmit_rto+0x38>)
 800f944:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f948:	4909      	ldr	r1, [pc, #36]	; (800f970 <tcp_rexmit_rto+0x3c>)
 800f94a:	480a      	ldr	r0, [pc, #40]	; (800f974 <tcp_rexmit_rto+0x40>)
 800f94c:	f004 fbd6 	bl	80140fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff57 	bl	800f804 <tcp_rexmit_rto_prepare>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d102      	bne.n	800f962 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7ff ffc1 	bl	800f8e4 <tcp_rexmit_rto_commit>
  }
}
 800f962:	bf00      	nop
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	080166c0 	.word	0x080166c0
 800f970:	08016d44 	.word	0x08016d44
 800f974:	08016714 	.word	0x08016714

0800f978 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f978:	b590      	push	{r4, r7, lr}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d106      	bne.n	800f994 <tcp_rexmit+0x1c>
 800f986:	4b2f      	ldr	r3, [pc, #188]	; (800fa44 <tcp_rexmit+0xcc>)
 800f988:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f98c:	492e      	ldr	r1, [pc, #184]	; (800fa48 <tcp_rexmit+0xd0>)
 800f98e:	482f      	ldr	r0, [pc, #188]	; (800fa4c <tcp_rexmit+0xd4>)
 800f990:	f004 fbb4 	bl	80140fc <iprintf>

  if (pcb->unacked == NULL) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d102      	bne.n	800f9a2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f99c:	f06f 0305 	mvn.w	r3, #5
 800f9a0:	e04c      	b.n	800fa3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9a6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f9a8:	68b8      	ldr	r0, [r7, #8]
 800f9aa:	f7ff fe2d 	bl	800f608 <tcp_output_segment_busy>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f9b4:	f06f 0305 	mvn.w	r3, #5
 800f9b8:	e040      	b.n	800fa3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	336c      	adds	r3, #108	; 0x6c
 800f9c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f9c8:	e002      	b.n	800f9d0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d011      	beq.n	800f9fc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7f9 fcfe 	bl	80093e2 <lwip_htonl>
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7f9 fcf7 	bl	80093e2 <lwip_htonl>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	dbe6      	blt.n	800f9ca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	68ba      	ldr	r2, [r7, #8]
 800fa08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d103      	bne.n	800fa1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2200      	movs	r2, #0
 800fa16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa20:	2bff      	cmp	r3, #255	; 0xff
 800fa22:	d007      	beq.n	800fa34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fa3a:	2300      	movs	r3, #0
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3714      	adds	r7, #20
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd90      	pop	{r4, r7, pc}
 800fa44:	080166c0 	.word	0x080166c0
 800fa48:	08016d60 	.word	0x08016d60
 800fa4c:	08016714 	.word	0x08016714

0800fa50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d106      	bne.n	800fa6c <tcp_rexmit_fast+0x1c>
 800fa5e:	4b2a      	ldr	r3, [pc, #168]	; (800fb08 <tcp_rexmit_fast+0xb8>)
 800fa60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fa64:	4929      	ldr	r1, [pc, #164]	; (800fb0c <tcp_rexmit_fast+0xbc>)
 800fa66:	482a      	ldr	r0, [pc, #168]	; (800fb10 <tcp_rexmit_fast+0xc0>)
 800fa68:	f004 fb48 	bl	80140fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d045      	beq.n	800fb00 <tcp_rexmit_fast+0xb0>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	8b5b      	ldrh	r3, [r3, #26]
 800fa78:	f003 0304 	and.w	r3, r3, #4
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d13f      	bne.n	800fb00 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7ff ff79 	bl	800f978 <tcp_rexmit>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d139      	bne.n	800fb00 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	bf28      	it	cs
 800fa9c:	4613      	movcs	r3, r2
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	da00      	bge.n	800faa6 <tcp_rexmit_fast+0x56>
 800faa4:	3301      	adds	r3, #1
 800faa6:	105b      	asrs	r3, r3, #1
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fab6:	461a      	mov	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d206      	bcs.n	800fad0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fada:	4619      	mov	r1, r3
 800fadc:	0049      	lsls	r1, r1, #1
 800fade:	440b      	add	r3, r1
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4413      	add	r3, r2
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	8b5b      	ldrh	r3, [r3, #26]
 800faf0:	f043 0304 	orr.w	r3, r3, #4
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fb00:	bf00      	nop
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	080166c0 	.word	0x080166c0
 800fb0c:	08016d78 	.word	0x08016d78
 800fb10:	08016714 	.word	0x08016714

0800fb14 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b086      	sub	sp, #24
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	607b      	str	r3, [r7, #4]
 800fb1e:	460b      	mov	r3, r1
 800fb20:	817b      	strh	r3, [r7, #10]
 800fb22:	4613      	mov	r3, r2
 800fb24:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fb26:	897a      	ldrh	r2, [r7, #10]
 800fb28:	893b      	ldrh	r3, [r7, #8]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	3314      	adds	r3, #20
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb36:	4619      	mov	r1, r3
 800fb38:	2022      	movs	r0, #34	; 0x22
 800fb3a:	f7fa fc0d 	bl	800a358 <pbuf_alloc>
 800fb3e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d04d      	beq.n	800fbe2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fb46:	897b      	ldrh	r3, [r7, #10]
 800fb48:	3313      	adds	r3, #19
 800fb4a:	697a      	ldr	r2, [r7, #20]
 800fb4c:	8952      	ldrh	r2, [r2, #10]
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	db06      	blt.n	800fb60 <tcp_output_alloc_header_common+0x4c>
 800fb52:	4b26      	ldr	r3, [pc, #152]	; (800fbec <tcp_output_alloc_header_common+0xd8>)
 800fb54:	f240 7223 	movw	r2, #1827	; 0x723
 800fb58:	4925      	ldr	r1, [pc, #148]	; (800fbf0 <tcp_output_alloc_header_common+0xdc>)
 800fb5a:	4826      	ldr	r0, [pc, #152]	; (800fbf4 <tcp_output_alloc_header_common+0xe0>)
 800fb5c:	f004 face 	bl	80140fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fb66:	8c3b      	ldrh	r3, [r7, #32]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7f9 fc25 	bl	80093b8 <lwip_htons>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	461a      	mov	r2, r3
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fb76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f9 fc1d 	bl	80093b8 <lwip_htons>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	461a      	mov	r2, r3
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	687a      	ldr	r2, [r7, #4]
 800fb8a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fb8c:	68f8      	ldr	r0, [r7, #12]
 800fb8e:	f7f9 fc28 	bl	80093e2 <lwip_htonl>
 800fb92:	4602      	mov	r2, r0
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fb98:	897b      	ldrh	r3, [r7, #10]
 800fb9a:	089b      	lsrs	r3, r3, #2
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	3305      	adds	r3, #5
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	031b      	lsls	r3, r3, #12
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	4313      	orrs	r3, r2
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7f9 fc01 	bl	80093b8 <lwip_htons>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	461a      	mov	r2, r3
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fbbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f9 fbf9 	bl	80093b8 <lwip_htons>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	461a      	mov	r2, r3
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	741a      	strb	r2, [r3, #16]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	749a      	strb	r2, [r3, #18]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fbe2:	697b      	ldr	r3, [r7, #20]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	080166c0 	.word	0x080166c0
 800fbf0:	08016d98 	.word	0x08016d98
 800fbf4:	08016714 	.word	0x08016714

0800fbf8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fbf8:	b5b0      	push	{r4, r5, r7, lr}
 800fbfa:	b08a      	sub	sp, #40	; 0x28
 800fbfc:	af04      	add	r7, sp, #16
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	607b      	str	r3, [r7, #4]
 800fc02:	460b      	mov	r3, r1
 800fc04:	817b      	strh	r3, [r7, #10]
 800fc06:	4613      	mov	r3, r2
 800fc08:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d106      	bne.n	800fc1e <tcp_output_alloc_header+0x26>
 800fc10:	4b15      	ldr	r3, [pc, #84]	; (800fc68 <tcp_output_alloc_header+0x70>)
 800fc12:	f240 7242 	movw	r2, #1858	; 0x742
 800fc16:	4915      	ldr	r1, [pc, #84]	; (800fc6c <tcp_output_alloc_header+0x74>)
 800fc18:	4815      	ldr	r0, [pc, #84]	; (800fc70 <tcp_output_alloc_header+0x78>)
 800fc1a:	f004 fa6f 	bl	80140fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	8adb      	ldrh	r3, [r3, #22]
 800fc26:	68fa      	ldr	r2, [r7, #12]
 800fc28:	8b12      	ldrh	r2, [r2, #24]
 800fc2a:	68f9      	ldr	r1, [r7, #12]
 800fc2c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fc2e:	893d      	ldrh	r5, [r7, #8]
 800fc30:	897c      	ldrh	r4, [r7, #10]
 800fc32:	9103      	str	r1, [sp, #12]
 800fc34:	2110      	movs	r1, #16
 800fc36:	9102      	str	r1, [sp, #8]
 800fc38:	9201      	str	r2, [sp, #4]
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	462a      	mov	r2, r5
 800fc40:	4621      	mov	r1, r4
 800fc42:	f7ff ff67 	bl	800fb14 <tcp_output_alloc_header_common>
 800fc46:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d006      	beq.n	800fc5c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fc56:	441a      	add	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fc5c:	697b      	ldr	r3, [r7, #20]
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bdb0      	pop	{r4, r5, r7, pc}
 800fc66:	bf00      	nop
 800fc68:	080166c0 	.word	0x080166c0
 800fc6c:	08016dc8 	.word	0x08016dc8
 800fc70:	08016714 	.word	0x08016714

0800fc74 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b088      	sub	sp, #32
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	4611      	mov	r1, r2
 800fc80:	461a      	mov	r2, r3
 800fc82:	460b      	mov	r3, r1
 800fc84:	71fb      	strb	r3, [r7, #7]
 800fc86:	4613      	mov	r3, r2
 800fc88:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d106      	bne.n	800fca2 <tcp_output_fill_options+0x2e>
 800fc94:	4b13      	ldr	r3, [pc, #76]	; (800fce4 <tcp_output_fill_options+0x70>)
 800fc96:	f240 7256 	movw	r2, #1878	; 0x756
 800fc9a:	4913      	ldr	r1, [pc, #76]	; (800fce8 <tcp_output_fill_options+0x74>)
 800fc9c:	4813      	ldr	r0, [pc, #76]	; (800fcec <tcp_output_fill_options+0x78>)
 800fc9e:	f004 fa2d 	bl	80140fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	685b      	ldr	r3, [r3, #4]
 800fca6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	3314      	adds	r3, #20
 800fcac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	f103 0214 	add.w	r2, r3, #20
 800fcb4:	8bfb      	ldrh	r3, [r7, #30]
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4619      	mov	r1, r3
 800fcba:	79fb      	ldrb	r3, [r7, #7]
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	f003 0304 	and.w	r3, r3, #4
 800fcc2:	440b      	add	r3, r1
 800fcc4:	4413      	add	r3, r2
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d006      	beq.n	800fcda <tcp_output_fill_options+0x66>
 800fccc:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <tcp_output_fill_options+0x70>)
 800fcce:	f240 7275 	movw	r2, #1909	; 0x775
 800fcd2:	4907      	ldr	r1, [pc, #28]	; (800fcf0 <tcp_output_fill_options+0x7c>)
 800fcd4:	4805      	ldr	r0, [pc, #20]	; (800fcec <tcp_output_fill_options+0x78>)
 800fcd6:	f004 fa11 	bl	80140fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fcda:	bf00      	nop
 800fcdc:	3720      	adds	r7, #32
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	080166c0 	.word	0x080166c0
 800fce8:	08016df0 	.word	0x08016df0
 800fcec:	08016714 	.word	0x08016714
 800fcf0:	08016ce8 	.word	0x08016ce8

0800fcf4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b08a      	sub	sp, #40	; 0x28
 800fcf8:	af04      	add	r7, sp, #16
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d106      	bne.n	800fd16 <tcp_output_control_segment+0x22>
 800fd08:	4b1c      	ldr	r3, [pc, #112]	; (800fd7c <tcp_output_control_segment+0x88>)
 800fd0a:	f240 7287 	movw	r2, #1927	; 0x787
 800fd0e:	491c      	ldr	r1, [pc, #112]	; (800fd80 <tcp_output_control_segment+0x8c>)
 800fd10:	481c      	ldr	r0, [pc, #112]	; (800fd84 <tcp_output_control_segment+0x90>)
 800fd12:	f004 f9f3 	bl	80140fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fd16:	683a      	ldr	r2, [r7, #0]
 800fd18:	6879      	ldr	r1, [r7, #4]
 800fd1a:	68f8      	ldr	r0, [r7, #12]
 800fd1c:	f7fe ff40 	bl	800eba0 <tcp_route>
 800fd20:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fd22:	693b      	ldr	r3, [r7, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d102      	bne.n	800fd2e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fd28:	23fc      	movs	r3, #252	; 0xfc
 800fd2a:	75fb      	strb	r3, [r7, #23]
 800fd2c:	e01c      	b.n	800fd68 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d006      	beq.n	800fd42 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	7adb      	ldrb	r3, [r3, #11]
 800fd38:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	7a9b      	ldrb	r3, [r3, #10]
 800fd3e:	757b      	strb	r3, [r7, #21]
 800fd40:	e003      	b.n	800fd4a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fd42:	23ff      	movs	r3, #255	; 0xff
 800fd44:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fd4a:	7dba      	ldrb	r2, [r7, #22]
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	9302      	str	r3, [sp, #8]
 800fd50:	2306      	movs	r3, #6
 800fd52:	9301      	str	r3, [sp, #4]
 800fd54:	7d7b      	ldrb	r3, [r7, #21]
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	683a      	ldr	r2, [r7, #0]
 800fd5c:	6879      	ldr	r1, [r7, #4]
 800fd5e:	68b8      	ldr	r0, [r7, #8]
 800fd60:	f002 fb2a 	bl	80123b8 <ip4_output_if>
 800fd64:	4603      	mov	r3, r0
 800fd66:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fd68:	68b8      	ldr	r0, [r7, #8]
 800fd6a:	f7fa fdd9 	bl	800a920 <pbuf_free>
  return err;
 800fd6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3718      	adds	r7, #24
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	080166c0 	.word	0x080166c0
 800fd80:	08016e18 	.word	0x08016e18
 800fd84:	08016714 	.word	0x08016714

0800fd88 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fd88:	b590      	push	{r4, r7, lr}
 800fd8a:	b08b      	sub	sp, #44	; 0x2c
 800fd8c:	af04      	add	r7, sp, #16
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	607a      	str	r2, [r7, #4]
 800fd94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d106      	bne.n	800fdaa <tcp_rst+0x22>
 800fd9c:	4b1f      	ldr	r3, [pc, #124]	; (800fe1c <tcp_rst+0x94>)
 800fd9e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fda2:	491f      	ldr	r1, [pc, #124]	; (800fe20 <tcp_rst+0x98>)
 800fda4:	481f      	ldr	r0, [pc, #124]	; (800fe24 <tcp_rst+0x9c>)
 800fda6:	f004 f9a9 	bl	80140fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d106      	bne.n	800fdbe <tcp_rst+0x36>
 800fdb0:	4b1a      	ldr	r3, [pc, #104]	; (800fe1c <tcp_rst+0x94>)
 800fdb2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fdb6:	491c      	ldr	r1, [pc, #112]	; (800fe28 <tcp_rst+0xa0>)
 800fdb8:	481a      	ldr	r0, [pc, #104]	; (800fe24 <tcp_rst+0x9c>)
 800fdba:	f004 f99f 	bl	80140fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fdc2:	f246 0308 	movw	r3, #24584	; 0x6008
 800fdc6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fdc8:	7dfb      	ldrb	r3, [r7, #23]
 800fdca:	b29c      	uxth	r4, r3
 800fdcc:	68b8      	ldr	r0, [r7, #8]
 800fdce:	f7f9 fb08 	bl	80093e2 <lwip_htonl>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	8abb      	ldrh	r3, [r7, #20]
 800fdd6:	9303      	str	r3, [sp, #12]
 800fdd8:	2314      	movs	r3, #20
 800fdda:	9302      	str	r3, [sp, #8]
 800fddc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	4613      	mov	r3, r2
 800fde6:	2200      	movs	r2, #0
 800fde8:	4621      	mov	r1, r4
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7ff fe92 	bl	800fb14 <tcp_output_alloc_header_common>
 800fdf0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00c      	beq.n	800fe12 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	6939      	ldr	r1, [r7, #16]
 800fdfe:	68f8      	ldr	r0, [r7, #12]
 800fe00:	f7ff ff38 	bl	800fc74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	6939      	ldr	r1, [r7, #16]
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7ff ff72 	bl	800fcf4 <tcp_output_control_segment>
 800fe10:	e000      	b.n	800fe14 <tcp_rst+0x8c>
    return;
 800fe12:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fe14:	371c      	adds	r7, #28
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd90      	pop	{r4, r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	080166c0 	.word	0x080166c0
 800fe20:	08016e44 	.word	0x08016e44
 800fe24:	08016714 	.word	0x08016714
 800fe28:	08016e60 	.word	0x08016e60

0800fe2c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b087      	sub	sp, #28
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d106      	bne.n	800fe50 <tcp_send_empty_ack+0x24>
 800fe42:	4b28      	ldr	r3, [pc, #160]	; (800fee4 <tcp_send_empty_ack+0xb8>)
 800fe44:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fe48:	4927      	ldr	r1, [pc, #156]	; (800fee8 <tcp_send_empty_ack+0xbc>)
 800fe4a:	4828      	ldr	r0, [pc, #160]	; (800feec <tcp_send_empty_ack+0xc0>)
 800fe4c:	f004 f956 	bl	80140fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fe50:	7dfb      	ldrb	r3, [r7, #23]
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	f003 0304 	and.w	r3, r3, #4
 800fe5a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fe5c:	7d7b      	ldrb	r3, [r7, #21]
 800fe5e:	b29c      	uxth	r4, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7f9 fabc 	bl	80093e2 <lwip_htonl>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	4621      	mov	r1, r4
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7ff fec1 	bl	800fbf8 <tcp_output_alloc_header>
 800fe76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d109      	bne.n	800fe92 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	8b5b      	ldrh	r3, [r3, #26]
 800fe82:	f043 0303 	orr.w	r3, r3, #3
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fe8c:	f06f 0301 	mvn.w	r3, #1
 800fe90:	e023      	b.n	800feda <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fe92:	7dbb      	ldrb	r3, [r7, #22]
 800fe94:	7dfa      	ldrb	r2, [r7, #23]
 800fe96:	6939      	ldr	r1, [r7, #16]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f7ff feeb 	bl	800fc74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3304      	adds	r3, #4
 800fea4:	6939      	ldr	r1, [r7, #16]
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7ff ff24 	bl	800fcf4 <tcp_output_control_segment>
 800feac:	4603      	mov	r3, r0
 800feae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800feb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d007      	beq.n	800fec8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	8b5b      	ldrh	r3, [r3, #26]
 800febc:	f043 0303 	orr.w	r3, r3, #3
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	835a      	strh	r2, [r3, #26]
 800fec6:	e006      	b.n	800fed6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	8b5b      	ldrh	r3, [r3, #26]
 800fecc:	f023 0303 	bic.w	r3, r3, #3
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	080166c0 	.word	0x080166c0
 800fee8:	08016e7c 	.word	0x08016e7c
 800feec:	08016714 	.word	0x08016714

0800fef0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fef0:	b590      	push	{r4, r7, lr}
 800fef2:	b087      	sub	sp, #28
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fef8:	2300      	movs	r3, #0
 800fefa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <tcp_keepalive+0x20>
 800ff02:	4b18      	ldr	r3, [pc, #96]	; (800ff64 <tcp_keepalive+0x74>)
 800ff04:	f640 0224 	movw	r2, #2084	; 0x824
 800ff08:	4917      	ldr	r1, [pc, #92]	; (800ff68 <tcp_keepalive+0x78>)
 800ff0a:	4818      	ldr	r0, [pc, #96]	; (800ff6c <tcp_keepalive+0x7c>)
 800ff0c:	f004 f8f6 	bl	80140fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
 800ff12:	b29c      	uxth	r4, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7f9 fa61 	bl	80093e2 <lwip_htonl>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2200      	movs	r2, #0
 800ff24:	4621      	mov	r1, r4
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f7ff fe66 	bl	800fbf8 <tcp_output_alloc_header>
 800ff2c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ff34:	f04f 33ff 	mov.w	r3, #4294967295
 800ff38:	e010      	b.n	800ff5c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ff3a:	7dfb      	ldrb	r3, [r7, #23]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	6939      	ldr	r1, [r7, #16]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7ff fe97 	bl	800fc74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	6939      	ldr	r1, [r7, #16]
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff fed0 	bl	800fcf4 <tcp_output_control_segment>
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ff58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	371c      	adds	r7, #28
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd90      	pop	{r4, r7, pc}
 800ff64:	080166c0 	.word	0x080166c0
 800ff68:	08016e9c 	.word	0x08016e9c
 800ff6c:	08016714 	.word	0x08016714

0800ff70 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ff70:	b590      	push	{r4, r7, lr}
 800ff72:	b08b      	sub	sp, #44	; 0x2c
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff78:	2300      	movs	r3, #0
 800ff7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <tcp_zero_window_probe+0x22>
 800ff84:	4b4c      	ldr	r3, [pc, #304]	; (80100b8 <tcp_zero_window_probe+0x148>)
 800ff86:	f640 024f 	movw	r2, #2127	; 0x84f
 800ff8a:	494c      	ldr	r1, [pc, #304]	; (80100bc <tcp_zero_window_probe+0x14c>)
 800ff8c:	484c      	ldr	r0, [pc, #304]	; (80100c0 <tcp_zero_window_probe+0x150>)
 800ff8e:	f004 f8b5 	bl	80140fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff96:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d101      	bne.n	800ffa2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e086      	b.n	80100b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ffa8:	2bff      	cmp	r3, #255	; 0xff
 800ffaa:	d007      	beq.n	800ffbc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	899b      	ldrh	r3, [r3, #12]
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7f9 f9f7 	bl	80093b8 <lwip_htons>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	f003 0301 	and.w	r3, r3, #1
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d005      	beq.n	800ffe2 <tcp_zero_window_probe+0x72>
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	891b      	ldrh	r3, [r3, #8]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d101      	bne.n	800ffe2 <tcp_zero_window_probe+0x72>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e000      	b.n	800ffe4 <tcp_zero_window_probe+0x74>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ffe6:	7ffb      	ldrb	r3, [r7, #31]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bf0c      	ite	eq
 800ffec:	2301      	moveq	r3, #1
 800ffee:	2300      	movne	r3, #0
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fff8:	b299      	uxth	r1, r3
 800fffa:	6a3b      	ldr	r3, [r7, #32]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	8bba      	ldrh	r2, [r7, #28]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7ff fdf8 	bl	800fbf8 <tcp_output_alloc_header>
 8010008:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801000a:	69bb      	ldr	r3, [r7, #24]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d102      	bne.n	8010016 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010010:	f04f 33ff 	mov.w	r3, #4294967295
 8010014:	e04c      	b.n	80100b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801001c:	7ffb      	ldrb	r3, [r7, #31]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d011      	beq.n	8010046 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	899b      	ldrh	r3, [r3, #12]
 8010026:	b29b      	uxth	r3, r3
 8010028:	b21b      	sxth	r3, r3
 801002a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801002e:	b21c      	sxth	r4, r3
 8010030:	2011      	movs	r0, #17
 8010032:	f7f9 f9c1 	bl	80093b8 <lwip_htons>
 8010036:	4603      	mov	r3, r0
 8010038:	b21b      	sxth	r3, r3
 801003a:	4323      	orrs	r3, r4
 801003c:	b21b      	sxth	r3, r3
 801003e:	b29a      	uxth	r2, r3
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	819a      	strh	r2, [r3, #12]
 8010044:	e010      	b.n	8010068 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	3314      	adds	r3, #20
 801004c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801004e:	6a3b      	ldr	r3, [r7, #32]
 8010050:	6858      	ldr	r0, [r3, #4]
 8010052:	6a3b      	ldr	r3, [r7, #32]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	891a      	ldrh	r2, [r3, #8]
 8010058:	6a3b      	ldr	r3, [r7, #32]
 801005a:	891b      	ldrh	r3, [r3, #8]
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	b29b      	uxth	r3, r3
 8010060:	2201      	movs	r2, #1
 8010062:	6939      	ldr	r1, [r7, #16]
 8010064:	f7fa fe56 	bl	800ad14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	f7f9 f9b7 	bl	80093e2 <lwip_htonl>
 8010074:	4603      	mov	r3, r0
 8010076:	3301      	adds	r3, #1
 8010078:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	2b00      	cmp	r3, #0
 8010084:	da02      	bge.n	801008c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	68fa      	ldr	r2, [r7, #12]
 801008a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801008c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010090:	2200      	movs	r2, #0
 8010092:	69b9      	ldr	r1, [r7, #24]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7ff fded 	bl	800fc74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	3304      	adds	r3, #4
 80100a0:	69b9      	ldr	r1, [r7, #24]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7ff fe26 	bl	800fcf4 <tcp_output_control_segment>
 80100a8:	4603      	mov	r3, r0
 80100aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80100ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	372c      	adds	r7, #44	; 0x2c
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd90      	pop	{r4, r7, pc}
 80100b8:	080166c0 	.word	0x080166c0
 80100bc:	08016eb8 	.word	0x08016eb8
 80100c0:	08016714 	.word	0x08016714

080100c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80100cc:	f7fa ff10 	bl	800aef0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80100d0:	4b0a      	ldr	r3, [pc, #40]	; (80100fc <tcpip_tcp_timer+0x38>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d103      	bne.n	80100e0 <tcpip_tcp_timer+0x1c>
 80100d8:	4b09      	ldr	r3, [pc, #36]	; (8010100 <tcpip_tcp_timer+0x3c>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d005      	beq.n	80100ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80100e0:	2200      	movs	r2, #0
 80100e2:	4908      	ldr	r1, [pc, #32]	; (8010104 <tcpip_tcp_timer+0x40>)
 80100e4:	20fa      	movs	r0, #250	; 0xfa
 80100e6:	f000 f8f3 	bl	80102d0 <sys_timeout>
 80100ea:	e003      	b.n	80100f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80100ec:	4b06      	ldr	r3, [pc, #24]	; (8010108 <tcpip_tcp_timer+0x44>)
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
  }
}
 80100f2:	bf00      	nop
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	20006ce0 	.word	0x20006ce0
 8010100:	20006cf0 	.word	0x20006cf0
 8010104:	080100c5 	.word	0x080100c5
 8010108:	200003e8 	.word	0x200003e8

0801010c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010110:	4b0a      	ldr	r3, [pc, #40]	; (801013c <tcp_timer_needed+0x30>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d10f      	bne.n	8010138 <tcp_timer_needed+0x2c>
 8010118:	4b09      	ldr	r3, [pc, #36]	; (8010140 <tcp_timer_needed+0x34>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d103      	bne.n	8010128 <tcp_timer_needed+0x1c>
 8010120:	4b08      	ldr	r3, [pc, #32]	; (8010144 <tcp_timer_needed+0x38>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d007      	beq.n	8010138 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010128:	4b04      	ldr	r3, [pc, #16]	; (801013c <tcp_timer_needed+0x30>)
 801012a:	2201      	movs	r2, #1
 801012c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801012e:	2200      	movs	r2, #0
 8010130:	4905      	ldr	r1, [pc, #20]	; (8010148 <tcp_timer_needed+0x3c>)
 8010132:	20fa      	movs	r0, #250	; 0xfa
 8010134:	f000 f8cc 	bl	80102d0 <sys_timeout>
  }
}
 8010138:	bf00      	nop
 801013a:	bd80      	pop	{r7, pc}
 801013c:	200003e8 	.word	0x200003e8
 8010140:	20006ce0 	.word	0x20006ce0
 8010144:	20006cf0 	.word	0x20006cf0
 8010148:	080100c5 	.word	0x080100c5

0801014c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af00      	add	r7, sp, #0
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010158:	2006      	movs	r0, #6
 801015a:	f7f9 fd83 	bl	8009c64 <memp_malloc>
 801015e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d109      	bne.n	801017a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d151      	bne.n	8010210 <sys_timeout_abs+0xc4>
 801016c:	4b2a      	ldr	r3, [pc, #168]	; (8010218 <sys_timeout_abs+0xcc>)
 801016e:	22be      	movs	r2, #190	; 0xbe
 8010170:	492a      	ldr	r1, [pc, #168]	; (801021c <sys_timeout_abs+0xd0>)
 8010172:	482b      	ldr	r0, [pc, #172]	; (8010220 <sys_timeout_abs+0xd4>)
 8010174:	f003 ffc2 	bl	80140fc <iprintf>
    return;
 8010178:	e04a      	b.n	8010210 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	2200      	movs	r2, #0
 801017e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010192:	4b24      	ldr	r3, [pc, #144]	; (8010224 <sys_timeout_abs+0xd8>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d103      	bne.n	80101a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801019a:	4a22      	ldr	r2, [pc, #136]	; (8010224 <sys_timeout_abs+0xd8>)
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	6013      	str	r3, [r2, #0]
    return;
 80101a0:	e037      	b.n	8010212 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	685a      	ldr	r2, [r3, #4]
 80101a6:	4b1f      	ldr	r3, [pc, #124]	; (8010224 <sys_timeout_abs+0xd8>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	0fdb      	lsrs	r3, r3, #31
 80101b0:	f003 0301 	and.w	r3, r3, #1
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d007      	beq.n	80101ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80101ba:	4b1a      	ldr	r3, [pc, #104]	; (8010224 <sys_timeout_abs+0xd8>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80101c2:	4a18      	ldr	r2, [pc, #96]	; (8010224 <sys_timeout_abs+0xd8>)
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	6013      	str	r3, [r2, #0]
 80101c8:	e023      	b.n	8010212 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80101ca:	4b16      	ldr	r3, [pc, #88]	; (8010224 <sys_timeout_abs+0xd8>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	617b      	str	r3, [r7, #20]
 80101d0:	e01a      	b.n	8010208 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00b      	beq.n	80101f2 <sys_timeout_abs+0xa6>
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	0fdb      	lsrs	r3, r3, #31
 80101e8:	f003 0301 	and.w	r3, r3, #1
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d007      	beq.n	8010202 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	601a      	str	r2, [r3, #0]
        break;
 8010200:	e007      	b.n	8010212 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1e1      	bne.n	80101d2 <sys_timeout_abs+0x86>
 801020e:	e000      	b.n	8010212 <sys_timeout_abs+0xc6>
    return;
 8010210:	bf00      	nop
      }
    }
  }
}
 8010212:	3718      	adds	r7, #24
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	08016edc 	.word	0x08016edc
 801021c:	08016f10 	.word	0x08016f10
 8010220:	08016f50 	.word	0x08016f50
 8010224:	200003e0 	.word	0x200003e0

08010228 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	4798      	blx	r3

  now = sys_now();
 801023a:	f7f7 fbd9 	bl	80079f0 <sys_now>
 801023e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	4b0f      	ldr	r3, [pc, #60]	; (8010284 <lwip_cyclic_timer+0x5c>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4413      	add	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	0fdb      	lsrs	r3, r3, #31
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d009      	beq.n	8010272 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	4413      	add	r3, r2
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	4907      	ldr	r1, [pc, #28]	; (8010288 <lwip_cyclic_timer+0x60>)
 801026a:	4618      	mov	r0, r3
 801026c:	f7ff ff6e 	bl	801014c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010270:	e004      	b.n	801027c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	4904      	ldr	r1, [pc, #16]	; (8010288 <lwip_cyclic_timer+0x60>)
 8010276:	68f8      	ldr	r0, [r7, #12]
 8010278:	f7ff ff68 	bl	801014c <sys_timeout_abs>
}
 801027c:	bf00      	nop
 801027e:	3718      	adds	r7, #24
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	200003e4 	.word	0x200003e4
 8010288:	08010229 	.word	0x08010229

0801028c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010292:	2301      	movs	r3, #1
 8010294:	607b      	str	r3, [r7, #4]
 8010296:	e00e      	b.n	80102b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010298:	4a0b      	ldr	r2, [pc, #44]	; (80102c8 <sys_timeouts_init+0x3c>)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	00db      	lsls	r3, r3, #3
 80102a4:	4a08      	ldr	r2, [pc, #32]	; (80102c8 <sys_timeouts_init+0x3c>)
 80102a6:	4413      	add	r3, r2
 80102a8:	461a      	mov	r2, r3
 80102aa:	4908      	ldr	r1, [pc, #32]	; (80102cc <sys_timeouts_init+0x40>)
 80102ac:	f000 f810 	bl	80102d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	3301      	adds	r3, #1
 80102b4:	607b      	str	r3, [r7, #4]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	d9ed      	bls.n	8010298 <sys_timeouts_init+0xc>
  }
}
 80102bc:	bf00      	nop
 80102be:	bf00      	nop
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}
 80102c6:	bf00      	nop
 80102c8:	08017b04 	.word	0x08017b04
 80102cc:	08010229 	.word	0x08010229

080102d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b086      	sub	sp, #24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102e2:	d306      	bcc.n	80102f2 <sys_timeout+0x22>
 80102e4:	4b0a      	ldr	r3, [pc, #40]	; (8010310 <sys_timeout+0x40>)
 80102e6:	f240 1229 	movw	r2, #297	; 0x129
 80102ea:	490a      	ldr	r1, [pc, #40]	; (8010314 <sys_timeout+0x44>)
 80102ec:	480a      	ldr	r0, [pc, #40]	; (8010318 <sys_timeout+0x48>)
 80102ee:	f003 ff05 	bl	80140fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80102f2:	f7f7 fb7d 	bl	80079f0 <sys_now>
 80102f6:	4602      	mov	r2, r0
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	68b9      	ldr	r1, [r7, #8]
 8010302:	6978      	ldr	r0, [r7, #20]
 8010304:	f7ff ff22 	bl	801014c <sys_timeout_abs>
#endif
}
 8010308:	bf00      	nop
 801030a:	3718      	adds	r7, #24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	08016edc 	.word	0x08016edc
 8010314:	08016f78 	.word	0x08016f78
 8010318:	08016f50 	.word	0x08016f50

0801031c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010322:	f7f7 fb65 	bl	80079f0 <sys_now>
 8010326:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010328:	4b1a      	ldr	r3, [pc, #104]	; (8010394 <sys_check_timeouts+0x78>)
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	d001      	beq.n	8010336 <sys_check_timeouts+0x1a>
 8010332:	f7f9 ffbb 	bl	800a2ac <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010336:	4b18      	ldr	r3, [pc, #96]	; (8010398 <sys_check_timeouts+0x7c>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d022      	beq.n	8010388 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	0fdb      	lsrs	r3, r3, #31
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	b2db      	uxtb	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d11a      	bne.n	801038c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4a0f      	ldr	r2, [pc, #60]	; (8010398 <sys_check_timeouts+0x7c>)
 801035c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	4a0b      	ldr	r2, [pc, #44]	; (801039c <sys_check_timeouts+0x80>)
 8010370:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010372:	68b9      	ldr	r1, [r7, #8]
 8010374:	2006      	movs	r0, #6
 8010376:	f7f9 fcc1 	bl	8009cfc <memp_free>
    if (handler != NULL) {
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d0d3      	beq.n	8010328 <sys_check_timeouts+0xc>
      handler(arg);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6838      	ldr	r0, [r7, #0]
 8010384:	4798      	blx	r3
  do {
 8010386:	e7cf      	b.n	8010328 <sys_check_timeouts+0xc>
      return;
 8010388:	bf00      	nop
 801038a:	e000      	b.n	801038e <sys_check_timeouts+0x72>
      return;
 801038c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801038e:	3710      	adds	r7, #16
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}
 8010394:	20006cd8 	.word	0x20006cd8
 8010398:	200003e0 	.word	0x200003e0
 801039c:	200003e4 	.word	0x200003e4

080103a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80103a4:	f003 fec2 	bl	801412c <rand>
 80103a8:	4603      	mov	r3, r0
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	4b01      	ldr	r3, [pc, #4]	; (80103c0 <udp_init+0x20>)
 80103ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80103bc:	bf00      	nop
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	20000124 	.word	0x20000124

080103c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80103ce:	4b17      	ldr	r3, [pc, #92]	; (801042c <udp_new_port+0x68>)
 80103d0:	881b      	ldrh	r3, [r3, #0]
 80103d2:	1c5a      	adds	r2, r3, #1
 80103d4:	b291      	uxth	r1, r2
 80103d6:	4a15      	ldr	r2, [pc, #84]	; (801042c <udp_new_port+0x68>)
 80103d8:	8011      	strh	r1, [r2, #0]
 80103da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103de:	4293      	cmp	r3, r2
 80103e0:	d103      	bne.n	80103ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80103e2:	4b12      	ldr	r3, [pc, #72]	; (801042c <udp_new_port+0x68>)
 80103e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80103e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80103ea:	4b11      	ldr	r3, [pc, #68]	; (8010430 <udp_new_port+0x6c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	603b      	str	r3, [r7, #0]
 80103f0:	e011      	b.n	8010416 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	8a5a      	ldrh	r2, [r3, #18]
 80103f6:	4b0d      	ldr	r3, [pc, #52]	; (801042c <udp_new_port+0x68>)
 80103f8:	881b      	ldrh	r3, [r3, #0]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d108      	bne.n	8010410 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80103fe:	88fb      	ldrh	r3, [r7, #6]
 8010400:	3301      	adds	r3, #1
 8010402:	80fb      	strh	r3, [r7, #6]
 8010404:	88fb      	ldrh	r3, [r7, #6]
 8010406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801040a:	d3e0      	bcc.n	80103ce <udp_new_port+0xa>
        return 0;
 801040c:	2300      	movs	r3, #0
 801040e:	e007      	b.n	8010420 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	603b      	str	r3, [r7, #0]
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1ea      	bne.n	80103f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801041c:	4b03      	ldr	r3, [pc, #12]	; (801042c <udp_new_port+0x68>)
 801041e:	881b      	ldrh	r3, [r3, #0]
}
 8010420:	4618      	mov	r0, r3
 8010422:	370c      	adds	r7, #12
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	4770      	bx	lr
 801042c:	20000124 	.word	0x20000124
 8010430:	20006cf8 	.word	0x20006cf8

08010434 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	4613      	mov	r3, r2
 8010440:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d105      	bne.n	8010454 <udp_input_local_match+0x20>
 8010448:	4b27      	ldr	r3, [pc, #156]	; (80104e8 <udp_input_local_match+0xb4>)
 801044a:	2287      	movs	r2, #135	; 0x87
 801044c:	4927      	ldr	r1, [pc, #156]	; (80104ec <udp_input_local_match+0xb8>)
 801044e:	4828      	ldr	r0, [pc, #160]	; (80104f0 <udp_input_local_match+0xbc>)
 8010450:	f003 fe54 	bl	80140fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d105      	bne.n	8010466 <udp_input_local_match+0x32>
 801045a:	4b23      	ldr	r3, [pc, #140]	; (80104e8 <udp_input_local_match+0xb4>)
 801045c:	2288      	movs	r2, #136	; 0x88
 801045e:	4925      	ldr	r1, [pc, #148]	; (80104f4 <udp_input_local_match+0xc0>)
 8010460:	4823      	ldr	r0, [pc, #140]	; (80104f0 <udp_input_local_match+0xbc>)
 8010462:	f003 fe4b 	bl	80140fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	7a1b      	ldrb	r3, [r3, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00b      	beq.n	8010486 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	7a1a      	ldrb	r2, [r3, #8]
 8010472:	4b21      	ldr	r3, [pc, #132]	; (80104f8 <udp_input_local_match+0xc4>)
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801047a:	3301      	adds	r3, #1
 801047c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801047e:	429a      	cmp	r2, r3
 8010480:	d001      	beq.n	8010486 <udp_input_local_match+0x52>
    return 0;
 8010482:	2300      	movs	r3, #0
 8010484:	e02b      	b.n	80104de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010486:	79fb      	ldrb	r3, [r7, #7]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d018      	beq.n	80104be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d013      	beq.n	80104ba <udp_input_local_match+0x86>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00f      	beq.n	80104ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801049a:	4b17      	ldr	r3, [pc, #92]	; (80104f8 <udp_input_local_match+0xc4>)
 801049c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801049e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a2:	d00a      	beq.n	80104ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	4b13      	ldr	r3, [pc, #76]	; (80104f8 <udp_input_local_match+0xc4>)
 80104aa:	695b      	ldr	r3, [r3, #20]
 80104ac:	405a      	eors	r2, r3
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	3308      	adds	r3, #8
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d110      	bne.n	80104dc <udp_input_local_match+0xa8>
          return 1;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e00f      	b.n	80104de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d009      	beq.n	80104d8 <udp_input_local_match+0xa4>
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d005      	beq.n	80104d8 <udp_input_local_match+0xa4>
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	4b09      	ldr	r3, [pc, #36]	; (80104f8 <udp_input_local_match+0xc4>)
 80104d2:	695b      	ldr	r3, [r3, #20]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d101      	bne.n	80104dc <udp_input_local_match+0xa8>
        return 1;
 80104d8:	2301      	movs	r3, #1
 80104da:	e000      	b.n	80104de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	08016fc4 	.word	0x08016fc4
 80104ec:	08016ff4 	.word	0x08016ff4
 80104f0:	08017018 	.word	0x08017018
 80104f4:	08017040 	.word	0x08017040
 80104f8:	2000379c 	.word	0x2000379c

080104fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80104fc:	b590      	push	{r4, r7, lr}
 80104fe:	b08d      	sub	sp, #52	; 0x34
 8010500:	af02      	add	r7, sp, #8
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d105      	bne.n	801051c <udp_input+0x20>
 8010510:	4b7c      	ldr	r3, [pc, #496]	; (8010704 <udp_input+0x208>)
 8010512:	22cf      	movs	r2, #207	; 0xcf
 8010514:	497c      	ldr	r1, [pc, #496]	; (8010708 <udp_input+0x20c>)
 8010516:	487d      	ldr	r0, [pc, #500]	; (801070c <udp_input+0x210>)
 8010518:	f003 fdf0 	bl	80140fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d105      	bne.n	801052e <udp_input+0x32>
 8010522:	4b78      	ldr	r3, [pc, #480]	; (8010704 <udp_input+0x208>)
 8010524:	22d0      	movs	r2, #208	; 0xd0
 8010526:	497a      	ldr	r1, [pc, #488]	; (8010710 <udp_input+0x214>)
 8010528:	4878      	ldr	r0, [pc, #480]	; (801070c <udp_input+0x210>)
 801052a:	f003 fde7 	bl	80140fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	895b      	ldrh	r3, [r3, #10]
 8010532:	2b07      	cmp	r3, #7
 8010534:	d803      	bhi.n	801053e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7fa f9f2 	bl	800a920 <pbuf_free>
    goto end;
 801053c:	e0de      	b.n	80106fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010544:	4b73      	ldr	r3, [pc, #460]	; (8010714 <udp_input+0x218>)
 8010546:	695b      	ldr	r3, [r3, #20]
 8010548:	4a72      	ldr	r2, [pc, #456]	; (8010714 <udp_input+0x218>)
 801054a:	6812      	ldr	r2, [r2, #0]
 801054c:	4611      	mov	r1, r2
 801054e:	4618      	mov	r0, r3
 8010550:	f002 f80a 	bl	8012568 <ip4_addr_isbroadcast_u32>
 8010554:	4603      	mov	r3, r0
 8010556:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	b29b      	uxth	r3, r3
 801055e:	4618      	mov	r0, r3
 8010560:	f7f8 ff2a 	bl	80093b8 <lwip_htons>
 8010564:	4603      	mov	r3, r0
 8010566:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	885b      	ldrh	r3, [r3, #2]
 801056c:	b29b      	uxth	r3, r3
 801056e:	4618      	mov	r0, r3
 8010570:	f7f8 ff22 	bl	80093b8 <lwip_htons>
 8010574:	4603      	mov	r3, r0
 8010576:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010578:	2300      	movs	r3, #0
 801057a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801057c:	2300      	movs	r3, #0
 801057e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010584:	4b64      	ldr	r3, [pc, #400]	; (8010718 <udp_input+0x21c>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	627b      	str	r3, [r7, #36]	; 0x24
 801058a:	e054      	b.n	8010636 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058e:	8a5b      	ldrh	r3, [r3, #18]
 8010590:	89fa      	ldrh	r2, [r7, #14]
 8010592:	429a      	cmp	r2, r3
 8010594:	d14a      	bne.n	801062c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010596:	7cfb      	ldrb	r3, [r7, #19]
 8010598:	461a      	mov	r2, r3
 801059a:	6839      	ldr	r1, [r7, #0]
 801059c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801059e:	f7ff ff49 	bl	8010434 <udp_input_local_match>
 80105a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d041      	beq.n	801062c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80105a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105aa:	7c1b      	ldrb	r3, [r3, #16]
 80105ac:	f003 0304 	and.w	r3, r3, #4
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d11d      	bne.n	80105f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d102      	bne.n	80105c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	61fb      	str	r3, [r7, #28]
 80105be:	e017      	b.n	80105f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80105c0:	7cfb      	ldrb	r3, [r7, #19]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d014      	beq.n	80105f0 <udp_input+0xf4>
 80105c6:	4b53      	ldr	r3, [pc, #332]	; (8010714 <udp_input+0x218>)
 80105c8:	695b      	ldr	r3, [r3, #20]
 80105ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ce:	d10f      	bne.n	80105f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	3304      	adds	r3, #4
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d008      	beq.n	80105f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80105de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	3304      	adds	r3, #4
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d101      	bne.n	80105f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	8a9b      	ldrh	r3, [r3, #20]
 80105f4:	8a3a      	ldrh	r2, [r7, #16]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d118      	bne.n	801062c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d005      	beq.n	801060e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	685a      	ldr	r2, [r3, #4]
 8010606:	4b43      	ldr	r3, [pc, #268]	; (8010714 <udp_input+0x218>)
 8010608:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801060a:	429a      	cmp	r2, r3
 801060c:	d10e      	bne.n	801062c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801060e:	6a3b      	ldr	r3, [r7, #32]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d014      	beq.n	801063e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	68da      	ldr	r2, [r3, #12]
 8010618:	6a3b      	ldr	r3, [r7, #32]
 801061a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801061c:	4b3e      	ldr	r3, [pc, #248]	; (8010718 <udp_input+0x21c>)
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010624:	4a3c      	ldr	r2, [pc, #240]	; (8010718 <udp_input+0x21c>)
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801062a:	e008      	b.n	801063e <udp_input+0x142>
      }
    }

    prev = pcb;
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	627b      	str	r3, [r7, #36]	; 0x24
 8010636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1a7      	bne.n	801058c <udp_input+0x90>
 801063c:	e000      	b.n	8010640 <udp_input+0x144>
        break;
 801063e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	2b00      	cmp	r3, #0
 8010644:	d101      	bne.n	801064a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <udp_input+0x15a>
    for_us = 1;
 8010650:	2301      	movs	r3, #1
 8010652:	76fb      	strb	r3, [r7, #27]
 8010654:	e00a      	b.n	801066c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	3304      	adds	r3, #4
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	4b2d      	ldr	r3, [pc, #180]	; (8010714 <udp_input+0x218>)
 801065e:	695b      	ldr	r3, [r3, #20]
 8010660:	429a      	cmp	r2, r3
 8010662:	bf0c      	ite	eq
 8010664:	2301      	moveq	r3, #1
 8010666:	2300      	movne	r3, #0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801066c:	7efb      	ldrb	r3, [r7, #27]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d041      	beq.n	80106f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010672:	2108      	movs	r1, #8
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7fa f8cd 	bl	800a814 <pbuf_remove_header>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00a      	beq.n	8010696 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010680:	4b20      	ldr	r3, [pc, #128]	; (8010704 <udp_input+0x208>)
 8010682:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010686:	4925      	ldr	r1, [pc, #148]	; (801071c <udp_input+0x220>)
 8010688:	4820      	ldr	r0, [pc, #128]	; (801070c <udp_input+0x210>)
 801068a:	f003 fd37 	bl	80140fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7fa f946 	bl	800a920 <pbuf_free>
      goto end;
 8010694:	e032      	b.n	80106fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010698:	2b00      	cmp	r3, #0
 801069a:	d012      	beq.n	80106c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069e:	699b      	ldr	r3, [r3, #24]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00a      	beq.n	80106ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	699c      	ldr	r4, [r3, #24]
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	69d8      	ldr	r0, [r3, #28]
 80106ac:	8a3b      	ldrh	r3, [r7, #16]
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	4b1b      	ldr	r3, [pc, #108]	; (8010720 <udp_input+0x224>)
 80106b2:	687a      	ldr	r2, [r7, #4]
 80106b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80106b8:	e021      	b.n	80106fe <udp_input+0x202>
        pbuf_free(p);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7fa f930 	bl	800a920 <pbuf_free>
        goto end;
 80106c0:	e01c      	b.n	80106fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80106c2:	7cfb      	ldrb	r3, [r7, #19]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d112      	bne.n	80106ee <udp_input+0x1f2>
 80106c8:	4b12      	ldr	r3, [pc, #72]	; (8010714 <udp_input+0x218>)
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80106d0:	2be0      	cmp	r3, #224	; 0xe0
 80106d2:	d00c      	beq.n	80106ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80106d4:	4b0f      	ldr	r3, [pc, #60]	; (8010714 <udp_input+0x218>)
 80106d6:	899b      	ldrh	r3, [r3, #12]
 80106d8:	3308      	adds	r3, #8
 80106da:	b29b      	uxth	r3, r3
 80106dc:	b21b      	sxth	r3, r3
 80106de:	4619      	mov	r1, r3
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7fa f90a 	bl	800a8fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80106e6:	2103      	movs	r1, #3
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f001 fc1d 	bl	8011f28 <icmp_dest_unreach>
      pbuf_free(p);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7fa f916 	bl	800a920 <pbuf_free>
  return;
 80106f4:	e003      	b.n	80106fe <udp_input+0x202>
    pbuf_free(p);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7fa f912 	bl	800a920 <pbuf_free>
  return;
 80106fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80106fe:	372c      	adds	r7, #44	; 0x2c
 8010700:	46bd      	mov	sp, r7
 8010702:	bd90      	pop	{r4, r7, pc}
 8010704:	08016fc4 	.word	0x08016fc4
 8010708:	08017068 	.word	0x08017068
 801070c:	08017018 	.word	0x08017018
 8010710:	08017080 	.word	0x08017080
 8010714:	2000379c 	.word	0x2000379c
 8010718:	20006cf8 	.word	0x20006cf8
 801071c:	0801709c 	.word	0x0801709c
 8010720:	200037ac 	.word	0x200037ac

08010724 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d109      	bne.n	8010748 <udp_send+0x24>
 8010734:	4b11      	ldr	r3, [pc, #68]	; (801077c <udp_send+0x58>)
 8010736:	f240 12d5 	movw	r2, #469	; 0x1d5
 801073a:	4911      	ldr	r1, [pc, #68]	; (8010780 <udp_send+0x5c>)
 801073c:	4811      	ldr	r0, [pc, #68]	; (8010784 <udp_send+0x60>)
 801073e:	f003 fcdd 	bl	80140fc <iprintf>
 8010742:	f06f 030f 	mvn.w	r3, #15
 8010746:	e015      	b.n	8010774 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d109      	bne.n	8010762 <udp_send+0x3e>
 801074e:	4b0b      	ldr	r3, [pc, #44]	; (801077c <udp_send+0x58>)
 8010750:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8010754:	490c      	ldr	r1, [pc, #48]	; (8010788 <udp_send+0x64>)
 8010756:	480b      	ldr	r0, [pc, #44]	; (8010784 <udp_send+0x60>)
 8010758:	f003 fcd0 	bl	80140fc <iprintf>
 801075c:	f06f 030f 	mvn.w	r3, #15
 8010760:	e008      	b.n	8010774 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	1d1a      	adds	r2, r3, #4
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	8a9b      	ldrh	r3, [r3, #20]
 801076a:	6839      	ldr	r1, [r7, #0]
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 f80d 	bl	801078c <udp_sendto>
 8010772:	4603      	mov	r3, r0
}
 8010774:	4618      	mov	r0, r3
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	08016fc4 	.word	0x08016fc4
 8010780:	080170b8 	.word	0x080170b8
 8010784:	08017018 	.word	0x08017018
 8010788:	080170d0 	.word	0x080170d0

0801078c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b088      	sub	sp, #32
 8010790:	af02      	add	r7, sp, #8
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d109      	bne.n	80107b4 <udp_sendto+0x28>
 80107a0:	4b23      	ldr	r3, [pc, #140]	; (8010830 <udp_sendto+0xa4>)
 80107a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80107a6:	4923      	ldr	r1, [pc, #140]	; (8010834 <udp_sendto+0xa8>)
 80107a8:	4823      	ldr	r0, [pc, #140]	; (8010838 <udp_sendto+0xac>)
 80107aa:	f003 fca7 	bl	80140fc <iprintf>
 80107ae:	f06f 030f 	mvn.w	r3, #15
 80107b2:	e038      	b.n	8010826 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d109      	bne.n	80107ce <udp_sendto+0x42>
 80107ba:	4b1d      	ldr	r3, [pc, #116]	; (8010830 <udp_sendto+0xa4>)
 80107bc:	f240 2219 	movw	r2, #537	; 0x219
 80107c0:	491e      	ldr	r1, [pc, #120]	; (801083c <udp_sendto+0xb0>)
 80107c2:	481d      	ldr	r0, [pc, #116]	; (8010838 <udp_sendto+0xac>)
 80107c4:	f003 fc9a 	bl	80140fc <iprintf>
 80107c8:	f06f 030f 	mvn.w	r3, #15
 80107cc:	e02b      	b.n	8010826 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d109      	bne.n	80107e8 <udp_sendto+0x5c>
 80107d4:	4b16      	ldr	r3, [pc, #88]	; (8010830 <udp_sendto+0xa4>)
 80107d6:	f240 221a 	movw	r2, #538	; 0x21a
 80107da:	4919      	ldr	r1, [pc, #100]	; (8010840 <udp_sendto+0xb4>)
 80107dc:	4816      	ldr	r0, [pc, #88]	; (8010838 <udp_sendto+0xac>)
 80107de:	f003 fc8d 	bl	80140fc <iprintf>
 80107e2:	f06f 030f 	mvn.w	r3, #15
 80107e6:	e01e      	b.n	8010826 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	7a1b      	ldrb	r3, [r3, #8]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d006      	beq.n	80107fe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	7a1b      	ldrb	r3, [r3, #8]
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7f9 fd33 	bl	800a260 <netif_get_by_index>
 80107fa:	6178      	str	r0, [r7, #20]
 80107fc:	e003      	b.n	8010806 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f001 fc1c 	bl	801203c <ip4_route>
 8010804:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801080c:	f06f 0303 	mvn.w	r3, #3
 8010810:	e009      	b.n	8010826 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010812:	887a      	ldrh	r2, [r7, #2]
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	9300      	str	r3, [sp, #0]
 8010818:	4613      	mov	r3, r2
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	68b9      	ldr	r1, [r7, #8]
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f000 f810 	bl	8010844 <udp_sendto_if>
 8010824:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010826:	4618      	mov	r0, r3
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	08016fc4 	.word	0x08016fc4
 8010834:	080170e8 	.word	0x080170e8
 8010838:	08017018 	.word	0x08017018
 801083c:	08017100 	.word	0x08017100
 8010840:	0801711c 	.word	0x0801711c

08010844 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b088      	sub	sp, #32
 8010848:	af02      	add	r7, sp, #8
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
 8010850:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d109      	bne.n	801086c <udp_sendto_if+0x28>
 8010858:	4b2e      	ldr	r3, [pc, #184]	; (8010914 <udp_sendto_if+0xd0>)
 801085a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801085e:	492e      	ldr	r1, [pc, #184]	; (8010918 <udp_sendto_if+0xd4>)
 8010860:	482e      	ldr	r0, [pc, #184]	; (801091c <udp_sendto_if+0xd8>)
 8010862:	f003 fc4b 	bl	80140fc <iprintf>
 8010866:	f06f 030f 	mvn.w	r3, #15
 801086a:	e04f      	b.n	801090c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d109      	bne.n	8010886 <udp_sendto_if+0x42>
 8010872:	4b28      	ldr	r3, [pc, #160]	; (8010914 <udp_sendto_if+0xd0>)
 8010874:	f240 2281 	movw	r2, #641	; 0x281
 8010878:	4929      	ldr	r1, [pc, #164]	; (8010920 <udp_sendto_if+0xdc>)
 801087a:	4828      	ldr	r0, [pc, #160]	; (801091c <udp_sendto_if+0xd8>)
 801087c:	f003 fc3e 	bl	80140fc <iprintf>
 8010880:	f06f 030f 	mvn.w	r3, #15
 8010884:	e042      	b.n	801090c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d109      	bne.n	80108a0 <udp_sendto_if+0x5c>
 801088c:	4b21      	ldr	r3, [pc, #132]	; (8010914 <udp_sendto_if+0xd0>)
 801088e:	f240 2282 	movw	r2, #642	; 0x282
 8010892:	4924      	ldr	r1, [pc, #144]	; (8010924 <udp_sendto_if+0xe0>)
 8010894:	4821      	ldr	r0, [pc, #132]	; (801091c <udp_sendto_if+0xd8>)
 8010896:	f003 fc31 	bl	80140fc <iprintf>
 801089a:	f06f 030f 	mvn.w	r3, #15
 801089e:	e035      	b.n	801090c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80108a0:	6a3b      	ldr	r3, [r7, #32]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d109      	bne.n	80108ba <udp_sendto_if+0x76>
 80108a6:	4b1b      	ldr	r3, [pc, #108]	; (8010914 <udp_sendto_if+0xd0>)
 80108a8:	f240 2283 	movw	r2, #643	; 0x283
 80108ac:	491e      	ldr	r1, [pc, #120]	; (8010928 <udp_sendto_if+0xe4>)
 80108ae:	481b      	ldr	r0, [pc, #108]	; (801091c <udp_sendto_if+0xd8>)
 80108b0:	f003 fc24 	bl	80140fc <iprintf>
 80108b4:	f06f 030f 	mvn.w	r3, #15
 80108b8:	e028      	b.n	801090c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d009      	beq.n	80108d4 <udp_sendto_if+0x90>
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d005      	beq.n	80108d4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80108d0:	2be0      	cmp	r3, #224	; 0xe0
 80108d2:	d103      	bne.n	80108dc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	3304      	adds	r3, #4
 80108d8:	617b      	str	r3, [r7, #20]
 80108da:	e00b      	b.n	80108f4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	3304      	adds	r3, #4
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d002      	beq.n	80108f0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80108ea:	f06f 0303 	mvn.w	r3, #3
 80108ee:	e00d      	b.n	801090c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80108f4:	887a      	ldrh	r2, [r7, #2]
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	9301      	str	r3, [sp, #4]
 80108fa:	6a3b      	ldr	r3, [r7, #32]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4613      	mov	r3, r2
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	68b9      	ldr	r1, [r7, #8]
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f000 f811 	bl	801092c <udp_sendto_if_src>
 801090a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801090c:	4618      	mov	r0, r3
 801090e:	3718      	adds	r7, #24
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}
 8010914:	08016fc4 	.word	0x08016fc4
 8010918:	08017138 	.word	0x08017138
 801091c:	08017018 	.word	0x08017018
 8010920:	08017154 	.word	0x08017154
 8010924:	08017170 	.word	0x08017170
 8010928:	08017190 	.word	0x08017190

0801092c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08c      	sub	sp, #48	; 0x30
 8010930:	af04      	add	r7, sp, #16
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d109      	bne.n	8010954 <udp_sendto_if_src+0x28>
 8010940:	4b65      	ldr	r3, [pc, #404]	; (8010ad8 <udp_sendto_if_src+0x1ac>)
 8010942:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010946:	4965      	ldr	r1, [pc, #404]	; (8010adc <udp_sendto_if_src+0x1b0>)
 8010948:	4865      	ldr	r0, [pc, #404]	; (8010ae0 <udp_sendto_if_src+0x1b4>)
 801094a:	f003 fbd7 	bl	80140fc <iprintf>
 801094e:	f06f 030f 	mvn.w	r3, #15
 8010952:	e0bc      	b.n	8010ace <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d109      	bne.n	801096e <udp_sendto_if_src+0x42>
 801095a:	4b5f      	ldr	r3, [pc, #380]	; (8010ad8 <udp_sendto_if_src+0x1ac>)
 801095c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010960:	4960      	ldr	r1, [pc, #384]	; (8010ae4 <udp_sendto_if_src+0x1b8>)
 8010962:	485f      	ldr	r0, [pc, #380]	; (8010ae0 <udp_sendto_if_src+0x1b4>)
 8010964:	f003 fbca 	bl	80140fc <iprintf>
 8010968:	f06f 030f 	mvn.w	r3, #15
 801096c:	e0af      	b.n	8010ace <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d109      	bne.n	8010988 <udp_sendto_if_src+0x5c>
 8010974:	4b58      	ldr	r3, [pc, #352]	; (8010ad8 <udp_sendto_if_src+0x1ac>)
 8010976:	f240 22d3 	movw	r2, #723	; 0x2d3
 801097a:	495b      	ldr	r1, [pc, #364]	; (8010ae8 <udp_sendto_if_src+0x1bc>)
 801097c:	4858      	ldr	r0, [pc, #352]	; (8010ae0 <udp_sendto_if_src+0x1b4>)
 801097e:	f003 fbbd 	bl	80140fc <iprintf>
 8010982:	f06f 030f 	mvn.w	r3, #15
 8010986:	e0a2      	b.n	8010ace <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098a:	2b00      	cmp	r3, #0
 801098c:	d109      	bne.n	80109a2 <udp_sendto_if_src+0x76>
 801098e:	4b52      	ldr	r3, [pc, #328]	; (8010ad8 <udp_sendto_if_src+0x1ac>)
 8010990:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010994:	4955      	ldr	r1, [pc, #340]	; (8010aec <udp_sendto_if_src+0x1c0>)
 8010996:	4852      	ldr	r0, [pc, #328]	; (8010ae0 <udp_sendto_if_src+0x1b4>)
 8010998:	f003 fbb0 	bl	80140fc <iprintf>
 801099c:	f06f 030f 	mvn.w	r3, #15
 80109a0:	e095      	b.n	8010ace <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d109      	bne.n	80109bc <udp_sendto_if_src+0x90>
 80109a8:	4b4b      	ldr	r3, [pc, #300]	; (8010ad8 <udp_sendto_if_src+0x1ac>)
 80109aa:	f240 22d5 	movw	r2, #725	; 0x2d5
 80109ae:	4950      	ldr	r1, [pc, #320]	; (8010af0 <udp_sendto_if_src+0x1c4>)
 80109b0:	484b      	ldr	r0, [pc, #300]	; (8010ae0 <udp_sendto_if_src+0x1b4>)
 80109b2:	f003 fba3 	bl	80140fc <iprintf>
 80109b6:	f06f 030f 	mvn.w	r3, #15
 80109ba:	e088      	b.n	8010ace <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	8a5b      	ldrh	r3, [r3, #18]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10f      	bne.n	80109e4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80109c4:	68f9      	ldr	r1, [r7, #12]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	8a5b      	ldrh	r3, [r3, #18]
 80109ca:	461a      	mov	r2, r3
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f000 f893 	bl	8010af8 <udp_bind>
 80109d2:	4603      	mov	r3, r0
 80109d4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80109d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d002      	beq.n	80109e4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80109de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109e2:	e074      	b.n	8010ace <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	891b      	ldrh	r3, [r3, #8]
 80109e8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d902      	bls.n	80109f6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80109f0:	f04f 33ff 	mov.w	r3, #4294967295
 80109f4:	e06b      	b.n	8010ace <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80109f6:	2108      	movs	r1, #8
 80109f8:	68b8      	ldr	r0, [r7, #8]
 80109fa:	f7f9 fefb 	bl	800a7f4 <pbuf_add_header>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d015      	beq.n	8010a30 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010a04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a08:	2108      	movs	r1, #8
 8010a0a:	2022      	movs	r0, #34	; 0x22
 8010a0c:	f7f9 fca4 	bl	800a358 <pbuf_alloc>
 8010a10:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010a12:	69fb      	ldr	r3, [r7, #28]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d102      	bne.n	8010a1e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010a18:	f04f 33ff 	mov.w	r3, #4294967295
 8010a1c:	e057      	b.n	8010ace <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	891b      	ldrh	r3, [r3, #8]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d006      	beq.n	8010a34 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010a26:	68b9      	ldr	r1, [r7, #8]
 8010a28:	69f8      	ldr	r0, [r7, #28]
 8010a2a:	f7fa f891 	bl	800ab50 <pbuf_chain>
 8010a2e:	e001      	b.n	8010a34 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	895b      	ldrh	r3, [r3, #10]
 8010a38:	2b07      	cmp	r3, #7
 8010a3a:	d806      	bhi.n	8010a4a <udp_sendto_if_src+0x11e>
 8010a3c:	4b26      	ldr	r3, [pc, #152]	; (8010ad8 <udp_sendto_if_src+0x1ac>)
 8010a3e:	f240 320d 	movw	r2, #781	; 0x30d
 8010a42:	492c      	ldr	r1, [pc, #176]	; (8010af4 <udp_sendto_if_src+0x1c8>)
 8010a44:	4826      	ldr	r0, [pc, #152]	; (8010ae0 <udp_sendto_if_src+0x1b4>)
 8010a46:	f003 fb59 	bl	80140fc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	8a5b      	ldrh	r3, [r3, #18]
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7f8 fcaf 	bl	80093b8 <lwip_htons>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010a62:	887b      	ldrh	r3, [r7, #2]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7f8 fca7 	bl	80093b8 <lwip_htons>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	2200      	movs	r2, #0
 8010a76:	719a      	strb	r2, [r3, #6]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	891b      	ldrh	r3, [r3, #8]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7f8 fc99 	bl	80093b8 <lwip_htons>
 8010a86:	4603      	mov	r3, r0
 8010a88:	461a      	mov	r2, r3
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010a8e:	2311      	movs	r3, #17
 8010a90:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	7adb      	ldrb	r3, [r3, #11]
 8010a96:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	7a9b      	ldrb	r3, [r3, #10]
 8010a9c:	7cb9      	ldrb	r1, [r7, #18]
 8010a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010aa0:	9202      	str	r2, [sp, #8]
 8010aa2:	7cfa      	ldrb	r2, [r7, #19]
 8010aa4:	9201      	str	r2, [sp, #4]
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aae:	69f8      	ldr	r0, [r7, #28]
 8010ab0:	f001 fcac 	bl	801240c <ip4_output_if_src>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010ab8:	69fa      	ldr	r2, [r7, #28]
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d004      	beq.n	8010aca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010ac0:	69f8      	ldr	r0, [r7, #28]
 8010ac2:	f7f9 ff2d 	bl	800a920 <pbuf_free>
    q = NULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010aca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3720      	adds	r7, #32
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	08016fc4 	.word	0x08016fc4
 8010adc:	080171b0 	.word	0x080171b0
 8010ae0:	08017018 	.word	0x08017018
 8010ae4:	080171d0 	.word	0x080171d0
 8010ae8:	080171f0 	.word	0x080171f0
 8010aec:	08017214 	.word	0x08017214
 8010af0:	08017238 	.word	0x08017238
 8010af4:	0801725c 	.word	0x0801725c

08010af8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b086      	sub	sp, #24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	4613      	mov	r3, r2
 8010b04:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d101      	bne.n	8010b10 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010b0c:	4b39      	ldr	r3, [pc, #228]	; (8010bf4 <udp_bind+0xfc>)
 8010b0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d109      	bne.n	8010b2a <udp_bind+0x32>
 8010b16:	4b38      	ldr	r3, [pc, #224]	; (8010bf8 <udp_bind+0x100>)
 8010b18:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010b1c:	4937      	ldr	r1, [pc, #220]	; (8010bfc <udp_bind+0x104>)
 8010b1e:	4838      	ldr	r0, [pc, #224]	; (8010c00 <udp_bind+0x108>)
 8010b20:	f003 faec 	bl	80140fc <iprintf>
 8010b24:	f06f 030f 	mvn.w	r3, #15
 8010b28:	e060      	b.n	8010bec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b2e:	4b35      	ldr	r3, [pc, #212]	; (8010c04 <udp_bind+0x10c>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	e009      	b.n	8010b4a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d102      	bne.n	8010b44 <udp_bind+0x4c>
      rebind = 1;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	74fb      	strb	r3, [r7, #19]
      break;
 8010b42:	e005      	b.n	8010b50 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	68db      	ldr	r3, [r3, #12]
 8010b48:	617b      	str	r3, [r7, #20]
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d1f2      	bne.n	8010b36 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010b50:	88fb      	ldrh	r3, [r7, #6]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d109      	bne.n	8010b6a <udp_bind+0x72>
    port = udp_new_port();
 8010b56:	f7ff fc35 	bl	80103c4 <udp_new_port>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010b5e:	88fb      	ldrh	r3, [r7, #6]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d12c      	bne.n	8010bbe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010b64:	f06f 0307 	mvn.w	r3, #7
 8010b68:	e040      	b.n	8010bec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010b6a:	4b26      	ldr	r3, [pc, #152]	; (8010c04 <udp_bind+0x10c>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	617b      	str	r3, [r7, #20]
 8010b70:	e022      	b.n	8010bb8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d01b      	beq.n	8010bb2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	8a5b      	ldrh	r3, [r3, #18]
 8010b7e:	88fa      	ldrh	r2, [r7, #6]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d116      	bne.n	8010bb2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d00d      	beq.n	8010bac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00a      	beq.n	8010bac <udp_bind+0xb4>
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d006      	beq.n	8010bac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010b9e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d003      	beq.n	8010bac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d102      	bne.n	8010bb2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010bac:	f06f 0307 	mvn.w	r3, #7
 8010bb0:	e01c      	b.n	8010bec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	617b      	str	r3, [r7, #20]
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1d9      	bne.n	8010b72 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <udp_bind+0xd2>
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	e000      	b.n	8010bcc <udp_bind+0xd4>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	88fa      	ldrh	r2, [r7, #6]
 8010bd4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010bd6:	7cfb      	ldrb	r3, [r7, #19]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d106      	bne.n	8010bea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <udp_bind+0x10c>)
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010be4:	4a07      	ldr	r2, [pc, #28]	; (8010c04 <udp_bind+0x10c>)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010bea:	2300      	movs	r3, #0
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3718      	adds	r7, #24
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	08017b1c 	.word	0x08017b1c
 8010bf8:	08016fc4 	.word	0x08016fc4
 8010bfc:	0801728c 	.word	0x0801728c
 8010c00:	08017018 	.word	0x08017018
 8010c04:	20006cf8 	.word	0x20006cf8

08010c08 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b086      	sub	sp, #24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	4613      	mov	r3, r2
 8010c14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d109      	bne.n	8010c30 <udp_connect+0x28>
 8010c1c:	4b2c      	ldr	r3, [pc, #176]	; (8010cd0 <udp_connect+0xc8>)
 8010c1e:	f240 4235 	movw	r2, #1077	; 0x435
 8010c22:	492c      	ldr	r1, [pc, #176]	; (8010cd4 <udp_connect+0xcc>)
 8010c24:	482c      	ldr	r0, [pc, #176]	; (8010cd8 <udp_connect+0xd0>)
 8010c26:	f003 fa69 	bl	80140fc <iprintf>
 8010c2a:	f06f 030f 	mvn.w	r3, #15
 8010c2e:	e04b      	b.n	8010cc8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d109      	bne.n	8010c4a <udp_connect+0x42>
 8010c36:	4b26      	ldr	r3, [pc, #152]	; (8010cd0 <udp_connect+0xc8>)
 8010c38:	f240 4236 	movw	r2, #1078	; 0x436
 8010c3c:	4927      	ldr	r1, [pc, #156]	; (8010cdc <udp_connect+0xd4>)
 8010c3e:	4826      	ldr	r0, [pc, #152]	; (8010cd8 <udp_connect+0xd0>)
 8010c40:	f003 fa5c 	bl	80140fc <iprintf>
 8010c44:	f06f 030f 	mvn.w	r3, #15
 8010c48:	e03e      	b.n	8010cc8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	8a5b      	ldrh	r3, [r3, #18]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10f      	bne.n	8010c72 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010c52:	68f9      	ldr	r1, [r7, #12]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	8a5b      	ldrh	r3, [r3, #18]
 8010c58:	461a      	mov	r2, r3
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	f7ff ff4c 	bl	8010af8 <udp_bind>
 8010c60:	4603      	mov	r3, r0
 8010c62:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010c64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d002      	beq.n	8010c72 <udp_connect+0x6a>
      return err;
 8010c6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c70:	e02a      	b.n	8010cc8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <udp_connect+0x76>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	e000      	b.n	8010c80 <udp_connect+0x78>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	88fa      	ldrh	r2, [r7, #6]
 8010c88:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	7c1b      	ldrb	r3, [r3, #16]
 8010c8e:	f043 0304 	orr.w	r3, r3, #4
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010c98:	4b11      	ldr	r3, [pc, #68]	; (8010ce0 <udp_connect+0xd8>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	617b      	str	r3, [r7, #20]
 8010c9e:	e008      	b.n	8010cb2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010ca0:	68fa      	ldr	r2, [r7, #12]
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d101      	bne.n	8010cac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e00d      	b.n	8010cc8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	617b      	str	r3, [r7, #20]
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d1f3      	bne.n	8010ca0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010cb8:	4b09      	ldr	r3, [pc, #36]	; (8010ce0 <udp_connect+0xd8>)
 8010cba:	681a      	ldr	r2, [r3, #0]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010cc0:	4a07      	ldr	r2, [pc, #28]	; (8010ce0 <udp_connect+0xd8>)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010cc6:	2300      	movs	r3, #0
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3718      	adds	r7, #24
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	08016fc4 	.word	0x08016fc4
 8010cd4:	080172a4 	.word	0x080172a4
 8010cd8:	08017018 	.word	0x08017018
 8010cdc:	080172c0 	.word	0x080172c0
 8010ce0:	20006cf8 	.word	0x20006cf8

08010ce4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d107      	bne.n	8010d02 <udp_disconnect+0x1e>
 8010cf2:	4b0d      	ldr	r3, [pc, #52]	; (8010d28 <udp_disconnect+0x44>)
 8010cf4:	f240 426a 	movw	r2, #1130	; 0x46a
 8010cf8:	490c      	ldr	r1, [pc, #48]	; (8010d2c <udp_disconnect+0x48>)
 8010cfa:	480d      	ldr	r0, [pc, #52]	; (8010d30 <udp_disconnect+0x4c>)
 8010cfc:	f003 f9fe 	bl	80140fc <iprintf>
 8010d00:	e00f      	b.n	8010d22 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	7c1b      	ldrb	r3, [r3, #16]
 8010d18:	f023 0304 	bic.w	r3, r3, #4
 8010d1c:	b2da      	uxtb	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	741a      	strb	r2, [r3, #16]
}
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	08016fc4 	.word	0x08016fc4
 8010d2c:	080172dc 	.word	0x080172dc
 8010d30:	08017018 	.word	0x08017018

08010d34 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d107      	bne.n	8010d56 <udp_recv+0x22>
 8010d46:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <udp_recv+0x34>)
 8010d48:	f240 428a 	movw	r2, #1162	; 0x48a
 8010d4c:	4907      	ldr	r1, [pc, #28]	; (8010d6c <udp_recv+0x38>)
 8010d4e:	4808      	ldr	r0, [pc, #32]	; (8010d70 <udp_recv+0x3c>)
 8010d50:	f003 f9d4 	bl	80140fc <iprintf>
 8010d54:	e005      	b.n	8010d62 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	68ba      	ldr	r2, [r7, #8]
 8010d5a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	61da      	str	r2, [r3, #28]
}
 8010d62:	3710      	adds	r7, #16
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	08016fc4 	.word	0x08016fc4
 8010d6c:	080172f8 	.word	0x080172f8
 8010d70:	08017018 	.word	0x08017018

08010d74 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d107      	bne.n	8010d92 <udp_remove+0x1e>
 8010d82:	4b19      	ldr	r3, [pc, #100]	; (8010de8 <udp_remove+0x74>)
 8010d84:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010d88:	4918      	ldr	r1, [pc, #96]	; (8010dec <udp_remove+0x78>)
 8010d8a:	4819      	ldr	r0, [pc, #100]	; (8010df0 <udp_remove+0x7c>)
 8010d8c:	f003 f9b6 	bl	80140fc <iprintf>
 8010d90:	e026      	b.n	8010de0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010d92:	4b18      	ldr	r3, [pc, #96]	; (8010df4 <udp_remove+0x80>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d105      	bne.n	8010da8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010d9c:	4b15      	ldr	r3, [pc, #84]	; (8010df4 <udp_remove+0x80>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	4a14      	ldr	r2, [pc, #80]	; (8010df4 <udp_remove+0x80>)
 8010da4:	6013      	str	r3, [r2, #0]
 8010da6:	e017      	b.n	8010dd8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010da8:	4b12      	ldr	r3, [pc, #72]	; (8010df4 <udp_remove+0x80>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	60fb      	str	r3, [r7, #12]
 8010dae:	e010      	b.n	8010dd2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d009      	beq.n	8010dcc <udp_remove+0x58>
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	68db      	ldr	r3, [r3, #12]
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d104      	bne.n	8010dcc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	68da      	ldr	r2, [r3, #12]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	60da      	str	r2, [r3, #12]
        break;
 8010dca:	e005      	b.n	8010dd8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	60fb      	str	r3, [r7, #12]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1eb      	bne.n	8010db0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010dd8:	6879      	ldr	r1, [r7, #4]
 8010dda:	2000      	movs	r0, #0
 8010ddc:	f7f8 ff8e 	bl	8009cfc <memp_free>
}
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	08016fc4 	.word	0x08016fc4
 8010dec:	08017310 	.word	0x08017310
 8010df0:	08017018 	.word	0x08017018
 8010df4:	20006cf8 	.word	0x20006cf8

08010df8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f7f8 ff30 	bl	8009c64 <memp_malloc>
 8010e04:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d007      	beq.n	8010e1c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010e0c:	2220      	movs	r2, #32
 8010e0e:	2100      	movs	r1, #0
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f003 f8c1 	bl	8013f98 <memset>
    pcb->ttl = UDP_TTL;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	22ff      	movs	r2, #255	; 0xff
 8010e1a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010e1c:	687b      	ldr	r3, [r7, #4]
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
	...

08010e28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01e      	beq.n	8010e76 <udp_netif_ip_addr_changed+0x4e>
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d01a      	beq.n	8010e76 <udp_netif_ip_addr_changed+0x4e>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d017      	beq.n	8010e76 <udp_netif_ip_addr_changed+0x4e>
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d013      	beq.n	8010e76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010e4e:	4b0d      	ldr	r3, [pc, #52]	; (8010e84 <udp_netif_ip_addr_changed+0x5c>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	60fb      	str	r3, [r7, #12]
 8010e54:	e00c      	b.n	8010e70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d103      	bne.n	8010e6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d1ef      	bne.n	8010e56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010e76:	bf00      	nop
 8010e78:	3714      	adds	r7, #20
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	20006cf8 	.word	0x20006cf8

08010e88 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010e90:	4915      	ldr	r1, [pc, #84]	; (8010ee8 <etharp_free_entry+0x60>)
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	4613      	mov	r3, r2
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	4413      	add	r3, r2
 8010e9a:	00db      	lsls	r3, r3, #3
 8010e9c:	440b      	add	r3, r1
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d013      	beq.n	8010ecc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010ea4:	4910      	ldr	r1, [pc, #64]	; (8010ee8 <etharp_free_entry+0x60>)
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	4413      	add	r3, r2
 8010eae:	00db      	lsls	r3, r3, #3
 8010eb0:	440b      	add	r3, r1
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7f9 fd33 	bl	800a920 <pbuf_free>
    arp_table[i].q = NULL;
 8010eba:	490b      	ldr	r1, [pc, #44]	; (8010ee8 <etharp_free_entry+0x60>)
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	4413      	add	r3, r2
 8010ec4:	00db      	lsls	r3, r3, #3
 8010ec6:	440b      	add	r3, r1
 8010ec8:	2200      	movs	r2, #0
 8010eca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010ecc:	4906      	ldr	r1, [pc, #24]	; (8010ee8 <etharp_free_entry+0x60>)
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	00db      	lsls	r3, r3, #3
 8010ed8:	440b      	add	r3, r1
 8010eda:	3314      	adds	r3, #20
 8010edc:	2200      	movs	r2, #0
 8010ede:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010ee0:	bf00      	nop
 8010ee2:	3708      	adds	r7, #8
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	200003ec 	.word	0x200003ec

08010eec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	607b      	str	r3, [r7, #4]
 8010ef6:	e096      	b.n	8011026 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010ef8:	494f      	ldr	r1, [pc, #316]	; (8011038 <etharp_tmr+0x14c>)
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	4613      	mov	r3, r2
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	4413      	add	r3, r2
 8010f02:	00db      	lsls	r3, r3, #3
 8010f04:	440b      	add	r3, r1
 8010f06:	3314      	adds	r3, #20
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010f0c:	78fb      	ldrb	r3, [r7, #3]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f000 8086 	beq.w	8011020 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010f14:	4948      	ldr	r1, [pc, #288]	; (8011038 <etharp_tmr+0x14c>)
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	4613      	mov	r3, r2
 8010f1a:	005b      	lsls	r3, r3, #1
 8010f1c:	4413      	add	r3, r2
 8010f1e:	00db      	lsls	r3, r3, #3
 8010f20:	440b      	add	r3, r1
 8010f22:	3312      	adds	r3, #18
 8010f24:	881b      	ldrh	r3, [r3, #0]
 8010f26:	3301      	adds	r3, #1
 8010f28:	b298      	uxth	r0, r3
 8010f2a:	4943      	ldr	r1, [pc, #268]	; (8011038 <etharp_tmr+0x14c>)
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	4613      	mov	r3, r2
 8010f30:	005b      	lsls	r3, r3, #1
 8010f32:	4413      	add	r3, r2
 8010f34:	00db      	lsls	r3, r3, #3
 8010f36:	440b      	add	r3, r1
 8010f38:	3312      	adds	r3, #18
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010f3e:	493e      	ldr	r1, [pc, #248]	; (8011038 <etharp_tmr+0x14c>)
 8010f40:	687a      	ldr	r2, [r7, #4]
 8010f42:	4613      	mov	r3, r2
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	4413      	add	r3, r2
 8010f48:	00db      	lsls	r3, r3, #3
 8010f4a:	440b      	add	r3, r1
 8010f4c:	3312      	adds	r3, #18
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010f54:	d215      	bcs.n	8010f82 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010f56:	4938      	ldr	r1, [pc, #224]	; (8011038 <etharp_tmr+0x14c>)
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	4413      	add	r3, r2
 8010f60:	00db      	lsls	r3, r3, #3
 8010f62:	440b      	add	r3, r1
 8010f64:	3314      	adds	r3, #20
 8010f66:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d10e      	bne.n	8010f8a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010f6c:	4932      	ldr	r1, [pc, #200]	; (8011038 <etharp_tmr+0x14c>)
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	4613      	mov	r3, r2
 8010f72:	005b      	lsls	r3, r3, #1
 8010f74:	4413      	add	r3, r2
 8010f76:	00db      	lsls	r3, r3, #3
 8010f78:	440b      	add	r3, r1
 8010f7a:	3312      	adds	r3, #18
 8010f7c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010f7e:	2b04      	cmp	r3, #4
 8010f80:	d903      	bls.n	8010f8a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff ff80 	bl	8010e88 <etharp_free_entry>
 8010f88:	e04a      	b.n	8011020 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010f8a:	492b      	ldr	r1, [pc, #172]	; (8011038 <etharp_tmr+0x14c>)
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	4613      	mov	r3, r2
 8010f90:	005b      	lsls	r3, r3, #1
 8010f92:	4413      	add	r3, r2
 8010f94:	00db      	lsls	r3, r3, #3
 8010f96:	440b      	add	r3, r1
 8010f98:	3314      	adds	r3, #20
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	2b03      	cmp	r3, #3
 8010f9e:	d10a      	bne.n	8010fb6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010fa0:	4925      	ldr	r1, [pc, #148]	; (8011038 <etharp_tmr+0x14c>)
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	4613      	mov	r3, r2
 8010fa6:	005b      	lsls	r3, r3, #1
 8010fa8:	4413      	add	r3, r2
 8010faa:	00db      	lsls	r3, r3, #3
 8010fac:	440b      	add	r3, r1
 8010fae:	3314      	adds	r3, #20
 8010fb0:	2204      	movs	r2, #4
 8010fb2:	701a      	strb	r2, [r3, #0]
 8010fb4:	e034      	b.n	8011020 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010fb6:	4920      	ldr	r1, [pc, #128]	; (8011038 <etharp_tmr+0x14c>)
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	005b      	lsls	r3, r3, #1
 8010fbe:	4413      	add	r3, r2
 8010fc0:	00db      	lsls	r3, r3, #3
 8010fc2:	440b      	add	r3, r1
 8010fc4:	3314      	adds	r3, #20
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b04      	cmp	r3, #4
 8010fca:	d10a      	bne.n	8010fe2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010fcc:	491a      	ldr	r1, [pc, #104]	; (8011038 <etharp_tmr+0x14c>)
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	4613      	mov	r3, r2
 8010fd2:	005b      	lsls	r3, r3, #1
 8010fd4:	4413      	add	r3, r2
 8010fd6:	00db      	lsls	r3, r3, #3
 8010fd8:	440b      	add	r3, r1
 8010fda:	3314      	adds	r3, #20
 8010fdc:	2202      	movs	r2, #2
 8010fde:	701a      	strb	r2, [r3, #0]
 8010fe0:	e01e      	b.n	8011020 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010fe2:	4915      	ldr	r1, [pc, #84]	; (8011038 <etharp_tmr+0x14c>)
 8010fe4:	687a      	ldr	r2, [r7, #4]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	4413      	add	r3, r2
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	440b      	add	r3, r1
 8010ff0:	3314      	adds	r3, #20
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d113      	bne.n	8011020 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010ff8:	490f      	ldr	r1, [pc, #60]	; (8011038 <etharp_tmr+0x14c>)
 8010ffa:	687a      	ldr	r2, [r7, #4]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	4413      	add	r3, r2
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	440b      	add	r3, r1
 8011006:	3308      	adds	r3, #8
 8011008:	6818      	ldr	r0, [r3, #0]
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	4a08      	ldr	r2, [pc, #32]	; (8011038 <etharp_tmr+0x14c>)
 8011016:	4413      	add	r3, r2
 8011018:	3304      	adds	r3, #4
 801101a:	4619      	mov	r1, r3
 801101c:	f000 fe6e 	bl	8011cfc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	3301      	adds	r3, #1
 8011024:	607b      	str	r3, [r7, #4]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b09      	cmp	r3, #9
 801102a:	f77f af65 	ble.w	8010ef8 <etharp_tmr+0xc>
      }
    }
  }
}
 801102e:	bf00      	nop
 8011030:	bf00      	nop
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	200003ec 	.word	0x200003ec

0801103c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b08a      	sub	sp, #40	; 0x28
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	460b      	mov	r3, r1
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801104a:	230a      	movs	r3, #10
 801104c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801104e:	230a      	movs	r3, #10
 8011050:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011052:	230a      	movs	r3, #10
 8011054:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011056:	2300      	movs	r3, #0
 8011058:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801105a:	230a      	movs	r3, #10
 801105c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	83bb      	strh	r3, [r7, #28]
 8011062:	2300      	movs	r3, #0
 8011064:	837b      	strh	r3, [r7, #26]
 8011066:	2300      	movs	r3, #0
 8011068:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801106a:	2300      	movs	r3, #0
 801106c:	843b      	strh	r3, [r7, #32]
 801106e:	e0ae      	b.n	80111ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011070:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011074:	49a6      	ldr	r1, [pc, #664]	; (8011310 <etharp_find_entry+0x2d4>)
 8011076:	4613      	mov	r3, r2
 8011078:	005b      	lsls	r3, r3, #1
 801107a:	4413      	add	r3, r2
 801107c:	00db      	lsls	r3, r3, #3
 801107e:	440b      	add	r3, r1
 8011080:	3314      	adds	r3, #20
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011086:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801108a:	2b0a      	cmp	r3, #10
 801108c:	d105      	bne.n	801109a <etharp_find_entry+0x5e>
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d102      	bne.n	801109a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011094:	8c3b      	ldrh	r3, [r7, #32]
 8011096:	847b      	strh	r3, [r7, #34]	; 0x22
 8011098:	e095      	b.n	80111c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801109a:	7dfb      	ldrb	r3, [r7, #23]
 801109c:	2b00      	cmp	r3, #0
 801109e:	f000 8092 	beq.w	80111c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80110a2:	7dfb      	ldrb	r3, [r7, #23]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d009      	beq.n	80110bc <etharp_find_entry+0x80>
 80110a8:	7dfb      	ldrb	r3, [r7, #23]
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d806      	bhi.n	80110bc <etharp_find_entry+0x80>
 80110ae:	4b99      	ldr	r3, [pc, #612]	; (8011314 <etharp_find_entry+0x2d8>)
 80110b0:	f240 1223 	movw	r2, #291	; 0x123
 80110b4:	4998      	ldr	r1, [pc, #608]	; (8011318 <etharp_find_entry+0x2dc>)
 80110b6:	4899      	ldr	r0, [pc, #612]	; (801131c <etharp_find_entry+0x2e0>)
 80110b8:	f003 f820 	bl	80140fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d020      	beq.n	8011104 <etharp_find_entry+0xc8>
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	6819      	ldr	r1, [r3, #0]
 80110c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110ca:	4891      	ldr	r0, [pc, #580]	; (8011310 <etharp_find_entry+0x2d4>)
 80110cc:	4613      	mov	r3, r2
 80110ce:	005b      	lsls	r3, r3, #1
 80110d0:	4413      	add	r3, r2
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	4403      	add	r3, r0
 80110d6:	3304      	adds	r3, #4
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4299      	cmp	r1, r3
 80110dc:	d112      	bne.n	8011104 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00c      	beq.n	80110fe <etharp_find_entry+0xc2>
 80110e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110e8:	4989      	ldr	r1, [pc, #548]	; (8011310 <etharp_find_entry+0x2d4>)
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	440b      	add	r3, r1
 80110f4:	3308      	adds	r3, #8
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d102      	bne.n	8011104 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80110fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011102:	e100      	b.n	8011306 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011104:	7dfb      	ldrb	r3, [r7, #23]
 8011106:	2b01      	cmp	r3, #1
 8011108:	d140      	bne.n	801118c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801110a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801110e:	4980      	ldr	r1, [pc, #512]	; (8011310 <etharp_find_entry+0x2d4>)
 8011110:	4613      	mov	r3, r2
 8011112:	005b      	lsls	r3, r3, #1
 8011114:	4413      	add	r3, r2
 8011116:	00db      	lsls	r3, r3, #3
 8011118:	440b      	add	r3, r1
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d01a      	beq.n	8011156 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011124:	497a      	ldr	r1, [pc, #488]	; (8011310 <etharp_find_entry+0x2d4>)
 8011126:	4613      	mov	r3, r2
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	4413      	add	r3, r2
 801112c:	00db      	lsls	r3, r3, #3
 801112e:	440b      	add	r3, r1
 8011130:	3312      	adds	r3, #18
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	8bba      	ldrh	r2, [r7, #28]
 8011136:	429a      	cmp	r2, r3
 8011138:	d845      	bhi.n	80111c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801113a:	8c3b      	ldrh	r3, [r7, #32]
 801113c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801113e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011142:	4973      	ldr	r1, [pc, #460]	; (8011310 <etharp_find_entry+0x2d4>)
 8011144:	4613      	mov	r3, r2
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	4413      	add	r3, r2
 801114a:	00db      	lsls	r3, r3, #3
 801114c:	440b      	add	r3, r1
 801114e:	3312      	adds	r3, #18
 8011150:	881b      	ldrh	r3, [r3, #0]
 8011152:	83bb      	strh	r3, [r7, #28]
 8011154:	e037      	b.n	80111c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011156:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801115a:	496d      	ldr	r1, [pc, #436]	; (8011310 <etharp_find_entry+0x2d4>)
 801115c:	4613      	mov	r3, r2
 801115e:	005b      	lsls	r3, r3, #1
 8011160:	4413      	add	r3, r2
 8011162:	00db      	lsls	r3, r3, #3
 8011164:	440b      	add	r3, r1
 8011166:	3312      	adds	r3, #18
 8011168:	881b      	ldrh	r3, [r3, #0]
 801116a:	8b7a      	ldrh	r2, [r7, #26]
 801116c:	429a      	cmp	r2, r3
 801116e:	d82a      	bhi.n	80111c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8011170:	8c3b      	ldrh	r3, [r7, #32]
 8011172:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011178:	4965      	ldr	r1, [pc, #404]	; (8011310 <etharp_find_entry+0x2d4>)
 801117a:	4613      	mov	r3, r2
 801117c:	005b      	lsls	r3, r3, #1
 801117e:	4413      	add	r3, r2
 8011180:	00db      	lsls	r3, r3, #3
 8011182:	440b      	add	r3, r1
 8011184:	3312      	adds	r3, #18
 8011186:	881b      	ldrh	r3, [r3, #0]
 8011188:	837b      	strh	r3, [r7, #26]
 801118a:	e01c      	b.n	80111c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801118c:	7dfb      	ldrb	r3, [r7, #23]
 801118e:	2b01      	cmp	r3, #1
 8011190:	d919      	bls.n	80111c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011196:	495e      	ldr	r1, [pc, #376]	; (8011310 <etharp_find_entry+0x2d4>)
 8011198:	4613      	mov	r3, r2
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	4413      	add	r3, r2
 801119e:	00db      	lsls	r3, r3, #3
 80111a0:	440b      	add	r3, r1
 80111a2:	3312      	adds	r3, #18
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	8b3a      	ldrh	r2, [r7, #24]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d80c      	bhi.n	80111c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80111ac:	8c3b      	ldrh	r3, [r7, #32]
 80111ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80111b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111b4:	4956      	ldr	r1, [pc, #344]	; (8011310 <etharp_find_entry+0x2d4>)
 80111b6:	4613      	mov	r3, r2
 80111b8:	005b      	lsls	r3, r3, #1
 80111ba:	4413      	add	r3, r2
 80111bc:	00db      	lsls	r3, r3, #3
 80111be:	440b      	add	r3, r1
 80111c0:	3312      	adds	r3, #18
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111c6:	8c3b      	ldrh	r3, [r7, #32]
 80111c8:	3301      	adds	r3, #1
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	843b      	strh	r3, [r7, #32]
 80111ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111d2:	2b09      	cmp	r3, #9
 80111d4:	f77f af4c 	ble.w	8011070 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80111d8:	7afb      	ldrb	r3, [r7, #11]
 80111da:	f003 0302 	and.w	r3, r3, #2
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d108      	bne.n	80111f4 <etharp_find_entry+0x1b8>
 80111e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80111e6:	2b0a      	cmp	r3, #10
 80111e8:	d107      	bne.n	80111fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80111ea:	7afb      	ldrb	r3, [r7, #11]
 80111ec:	f003 0301 	and.w	r3, r3, #1
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d102      	bne.n	80111fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80111f4:	f04f 33ff 	mov.w	r3, #4294967295
 80111f8:	e085      	b.n	8011306 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80111fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80111fe:	2b09      	cmp	r3, #9
 8011200:	dc02      	bgt.n	8011208 <etharp_find_entry+0x1cc>
    i = empty;
 8011202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011204:	843b      	strh	r3, [r7, #32]
 8011206:	e039      	b.n	801127c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011208:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801120c:	2b09      	cmp	r3, #9
 801120e:	dc14      	bgt.n	801123a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011212:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011214:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011218:	493d      	ldr	r1, [pc, #244]	; (8011310 <etharp_find_entry+0x2d4>)
 801121a:	4613      	mov	r3, r2
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	4413      	add	r3, r2
 8011220:	00db      	lsls	r3, r3, #3
 8011222:	440b      	add	r3, r1
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d018      	beq.n	801125c <etharp_find_entry+0x220>
 801122a:	4b3a      	ldr	r3, [pc, #232]	; (8011314 <etharp_find_entry+0x2d8>)
 801122c:	f240 126d 	movw	r2, #365	; 0x16d
 8011230:	493b      	ldr	r1, [pc, #236]	; (8011320 <etharp_find_entry+0x2e4>)
 8011232:	483a      	ldr	r0, [pc, #232]	; (801131c <etharp_find_entry+0x2e0>)
 8011234:	f002 ff62 	bl	80140fc <iprintf>
 8011238:	e010      	b.n	801125c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801123a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801123e:	2b09      	cmp	r3, #9
 8011240:	dc02      	bgt.n	8011248 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011244:	843b      	strh	r3, [r7, #32]
 8011246:	e009      	b.n	801125c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011248:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801124c:	2b09      	cmp	r3, #9
 801124e:	dc02      	bgt.n	8011256 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011250:	8bfb      	ldrh	r3, [r7, #30]
 8011252:	843b      	strh	r3, [r7, #32]
 8011254:	e002      	b.n	801125c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011256:	f04f 33ff 	mov.w	r3, #4294967295
 801125a:	e054      	b.n	8011306 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801125c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011260:	2b09      	cmp	r3, #9
 8011262:	dd06      	ble.n	8011272 <etharp_find_entry+0x236>
 8011264:	4b2b      	ldr	r3, [pc, #172]	; (8011314 <etharp_find_entry+0x2d8>)
 8011266:	f240 127f 	movw	r2, #383	; 0x17f
 801126a:	492e      	ldr	r1, [pc, #184]	; (8011324 <etharp_find_entry+0x2e8>)
 801126c:	482b      	ldr	r0, [pc, #172]	; (801131c <etharp_find_entry+0x2e0>)
 801126e:	f002 ff45 	bl	80140fc <iprintf>
    etharp_free_entry(i);
 8011272:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011276:	4618      	mov	r0, r3
 8011278:	f7ff fe06 	bl	8010e88 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801127c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011280:	2b09      	cmp	r3, #9
 8011282:	dd06      	ble.n	8011292 <etharp_find_entry+0x256>
 8011284:	4b23      	ldr	r3, [pc, #140]	; (8011314 <etharp_find_entry+0x2d8>)
 8011286:	f240 1283 	movw	r2, #387	; 0x183
 801128a:	4926      	ldr	r1, [pc, #152]	; (8011324 <etharp_find_entry+0x2e8>)
 801128c:	4823      	ldr	r0, [pc, #140]	; (801131c <etharp_find_entry+0x2e0>)
 801128e:	f002 ff35 	bl	80140fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011296:	491e      	ldr	r1, [pc, #120]	; (8011310 <etharp_find_entry+0x2d4>)
 8011298:	4613      	mov	r3, r2
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	4413      	add	r3, r2
 801129e:	00db      	lsls	r3, r3, #3
 80112a0:	440b      	add	r3, r1
 80112a2:	3314      	adds	r3, #20
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d006      	beq.n	80112b8 <etharp_find_entry+0x27c>
 80112aa:	4b1a      	ldr	r3, [pc, #104]	; (8011314 <etharp_find_entry+0x2d8>)
 80112ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80112b0:	491d      	ldr	r1, [pc, #116]	; (8011328 <etharp_find_entry+0x2ec>)
 80112b2:	481a      	ldr	r0, [pc, #104]	; (801131c <etharp_find_entry+0x2e0>)
 80112b4:	f002 ff22 	bl	80140fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00b      	beq.n	80112d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80112be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6819      	ldr	r1, [r3, #0]
 80112c6:	4812      	ldr	r0, [pc, #72]	; (8011310 <etharp_find_entry+0x2d4>)
 80112c8:	4613      	mov	r3, r2
 80112ca:	005b      	lsls	r3, r3, #1
 80112cc:	4413      	add	r3, r2
 80112ce:	00db      	lsls	r3, r3, #3
 80112d0:	4403      	add	r3, r0
 80112d2:	3304      	adds	r3, #4
 80112d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80112d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112da:	490d      	ldr	r1, [pc, #52]	; (8011310 <etharp_find_entry+0x2d4>)
 80112dc:	4613      	mov	r3, r2
 80112de:	005b      	lsls	r3, r3, #1
 80112e0:	4413      	add	r3, r2
 80112e2:	00db      	lsls	r3, r3, #3
 80112e4:	440b      	add	r3, r1
 80112e6:	3312      	adds	r3, #18
 80112e8:	2200      	movs	r2, #0
 80112ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80112ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112f0:	4907      	ldr	r1, [pc, #28]	; (8011310 <etharp_find_entry+0x2d4>)
 80112f2:	4613      	mov	r3, r2
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	4413      	add	r3, r2
 80112f8:	00db      	lsls	r3, r3, #3
 80112fa:	440b      	add	r3, r1
 80112fc:	3308      	adds	r3, #8
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011302:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3728      	adds	r7, #40	; 0x28
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	200003ec 	.word	0x200003ec
 8011314:	08017328 	.word	0x08017328
 8011318:	08017360 	.word	0x08017360
 801131c:	080173a0 	.word	0x080173a0
 8011320:	080173c8 	.word	0x080173c8
 8011324:	080173e0 	.word	0x080173e0
 8011328:	080173f4 	.word	0x080173f4

0801132c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b088      	sub	sp, #32
 8011330:	af02      	add	r7, sp, #8
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
 8011338:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011340:	2b06      	cmp	r3, #6
 8011342:	d006      	beq.n	8011352 <etharp_update_arp_entry+0x26>
 8011344:	4b48      	ldr	r3, [pc, #288]	; (8011468 <etharp_update_arp_entry+0x13c>)
 8011346:	f240 12a9 	movw	r2, #425	; 0x1a9
 801134a:	4948      	ldr	r1, [pc, #288]	; (801146c <etharp_update_arp_entry+0x140>)
 801134c:	4848      	ldr	r0, [pc, #288]	; (8011470 <etharp_update_arp_entry+0x144>)
 801134e:	f002 fed5 	bl	80140fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d012      	beq.n	801137e <etharp_update_arp_entry+0x52>
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00e      	beq.n	801137e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011360:	68bb      	ldr	r3, [r7, #8]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	68f9      	ldr	r1, [r7, #12]
 8011366:	4618      	mov	r0, r3
 8011368:	f001 f8fe 	bl	8012568 <ip4_addr_isbroadcast_u32>
 801136c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801136e:	2b00      	cmp	r3, #0
 8011370:	d105      	bne.n	801137e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801137a:	2be0      	cmp	r3, #224	; 0xe0
 801137c:	d102      	bne.n	8011384 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801137e:	f06f 030f 	mvn.w	r3, #15
 8011382:	e06c      	b.n	801145e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011384:	78fb      	ldrb	r3, [r7, #3]
 8011386:	68fa      	ldr	r2, [r7, #12]
 8011388:	4619      	mov	r1, r3
 801138a:	68b8      	ldr	r0, [r7, #8]
 801138c:	f7ff fe56 	bl	801103c <etharp_find_entry>
 8011390:	4603      	mov	r3, r0
 8011392:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011394:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011398:	2b00      	cmp	r3, #0
 801139a:	da02      	bge.n	80113a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801139c:	8afb      	ldrh	r3, [r7, #22]
 801139e:	b25b      	sxtb	r3, r3
 80113a0:	e05d      	b.n	801145e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80113a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113a6:	4933      	ldr	r1, [pc, #204]	; (8011474 <etharp_update_arp_entry+0x148>)
 80113a8:	4613      	mov	r3, r2
 80113aa:	005b      	lsls	r3, r3, #1
 80113ac:	4413      	add	r3, r2
 80113ae:	00db      	lsls	r3, r3, #3
 80113b0:	440b      	add	r3, r1
 80113b2:	3314      	adds	r3, #20
 80113b4:	2202      	movs	r2, #2
 80113b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80113b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113bc:	492d      	ldr	r1, [pc, #180]	; (8011474 <etharp_update_arp_entry+0x148>)
 80113be:	4613      	mov	r3, r2
 80113c0:	005b      	lsls	r3, r3, #1
 80113c2:	4413      	add	r3, r2
 80113c4:	00db      	lsls	r3, r3, #3
 80113c6:	440b      	add	r3, r1
 80113c8:	3308      	adds	r3, #8
 80113ca:	68fa      	ldr	r2, [r7, #12]
 80113cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80113ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113d2:	4613      	mov	r3, r2
 80113d4:	005b      	lsls	r3, r3, #1
 80113d6:	4413      	add	r3, r2
 80113d8:	00db      	lsls	r3, r3, #3
 80113da:	3308      	adds	r3, #8
 80113dc:	4a25      	ldr	r2, [pc, #148]	; (8011474 <etharp_update_arp_entry+0x148>)
 80113de:	4413      	add	r3, r2
 80113e0:	3304      	adds	r3, #4
 80113e2:	2206      	movs	r2, #6
 80113e4:	6879      	ldr	r1, [r7, #4]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f002 fdc8 	bl	8013f7c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80113ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113f0:	4920      	ldr	r1, [pc, #128]	; (8011474 <etharp_update_arp_entry+0x148>)
 80113f2:	4613      	mov	r3, r2
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4413      	add	r3, r2
 80113f8:	00db      	lsls	r3, r3, #3
 80113fa:	440b      	add	r3, r1
 80113fc:	3312      	adds	r3, #18
 80113fe:	2200      	movs	r2, #0
 8011400:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011402:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011406:	491b      	ldr	r1, [pc, #108]	; (8011474 <etharp_update_arp_entry+0x148>)
 8011408:	4613      	mov	r3, r2
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	4413      	add	r3, r2
 801140e:	00db      	lsls	r3, r3, #3
 8011410:	440b      	add	r3, r1
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d021      	beq.n	801145c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011418:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801141c:	4915      	ldr	r1, [pc, #84]	; (8011474 <etharp_update_arp_entry+0x148>)
 801141e:	4613      	mov	r3, r2
 8011420:	005b      	lsls	r3, r3, #1
 8011422:	4413      	add	r3, r2
 8011424:	00db      	lsls	r3, r3, #3
 8011426:	440b      	add	r3, r1
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801142c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011430:	4910      	ldr	r1, [pc, #64]	; (8011474 <etharp_update_arp_entry+0x148>)
 8011432:	4613      	mov	r3, r2
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4413      	add	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	440b      	add	r3, r1
 801143c:	2200      	movs	r2, #0
 801143e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6939      	ldr	r1, [r7, #16]
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f001 ff91 	bl	8013378 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011456:	6938      	ldr	r0, [r7, #16]
 8011458:	f7f9 fa62 	bl	800a920 <pbuf_free>
  }
  return ERR_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3718      	adds	r7, #24
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	08017328 	.word	0x08017328
 801146c:	08017420 	.word	0x08017420
 8011470:	080173a0 	.word	0x080173a0
 8011474:	200003ec 	.word	0x200003ec

08011478 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011480:	2300      	movs	r3, #0
 8011482:	60fb      	str	r3, [r7, #12]
 8011484:	e01e      	b.n	80114c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011486:	4913      	ldr	r1, [pc, #76]	; (80114d4 <etharp_cleanup_netif+0x5c>)
 8011488:	68fa      	ldr	r2, [r7, #12]
 801148a:	4613      	mov	r3, r2
 801148c:	005b      	lsls	r3, r3, #1
 801148e:	4413      	add	r3, r2
 8011490:	00db      	lsls	r3, r3, #3
 8011492:	440b      	add	r3, r1
 8011494:	3314      	adds	r3, #20
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801149a:	7afb      	ldrb	r3, [r7, #11]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00e      	beq.n	80114be <etharp_cleanup_netif+0x46>
 80114a0:	490c      	ldr	r1, [pc, #48]	; (80114d4 <etharp_cleanup_netif+0x5c>)
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	4613      	mov	r3, r2
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	4413      	add	r3, r2
 80114aa:	00db      	lsls	r3, r3, #3
 80114ac:	440b      	add	r3, r1
 80114ae:	3308      	adds	r3, #8
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d102      	bne.n	80114be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff fce5 	bl	8010e88 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	3301      	adds	r3, #1
 80114c2:	60fb      	str	r3, [r7, #12]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2b09      	cmp	r3, #9
 80114c8:	dddd      	ble.n	8011486 <etharp_cleanup_netif+0xe>
    }
  }
}
 80114ca:	bf00      	nop
 80114cc:	bf00      	nop
 80114ce:	3710      	adds	r7, #16
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	200003ec 	.word	0x200003ec

080114d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80114d8:	b5b0      	push	{r4, r5, r7, lr}
 80114da:	b08a      	sub	sp, #40	; 0x28
 80114dc:	af04      	add	r7, sp, #16
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d107      	bne.n	80114f8 <etharp_input+0x20>
 80114e8:	4b3d      	ldr	r3, [pc, #244]	; (80115e0 <etharp_input+0x108>)
 80114ea:	f240 228a 	movw	r2, #650	; 0x28a
 80114ee:	493d      	ldr	r1, [pc, #244]	; (80115e4 <etharp_input+0x10c>)
 80114f0:	483d      	ldr	r0, [pc, #244]	; (80115e8 <etharp_input+0x110>)
 80114f2:	f002 fe03 	bl	80140fc <iprintf>
 80114f6:	e06f      	b.n	80115d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	881b      	ldrh	r3, [r3, #0]
 8011502:	b29b      	uxth	r3, r3
 8011504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011508:	d10c      	bne.n	8011524 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801150e:	2b06      	cmp	r3, #6
 8011510:	d108      	bne.n	8011524 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011516:	2b04      	cmp	r3, #4
 8011518:	d104      	bne.n	8011524 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	885b      	ldrh	r3, [r3, #2]
 801151e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011520:	2b08      	cmp	r3, #8
 8011522:	d003      	beq.n	801152c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7f9 f9fb 	bl	800a920 <pbuf_free>
    return;
 801152a:	e055      	b.n	80115d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801152c:	693b      	ldr	r3, [r7, #16]
 801152e:	330e      	adds	r3, #14
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	3318      	adds	r3, #24
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	3304      	adds	r3, #4
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d102      	bne.n	801154c <etharp_input+0x74>
    for_us = 0;
 8011546:	2300      	movs	r3, #0
 8011548:	75fb      	strb	r3, [r7, #23]
 801154a:	e009      	b.n	8011560 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801154c:	68ba      	ldr	r2, [r7, #8]
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	3304      	adds	r3, #4
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	429a      	cmp	r2, r3
 8011556:	bf0c      	ite	eq
 8011558:	2301      	moveq	r3, #1
 801155a:	2300      	movne	r3, #0
 801155c:	b2db      	uxtb	r3, r3
 801155e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	f103 0208 	add.w	r2, r3, #8
 8011566:	7dfb      	ldrb	r3, [r7, #23]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d001      	beq.n	8011570 <etharp_input+0x98>
 801156c:	2301      	movs	r3, #1
 801156e:	e000      	b.n	8011572 <etharp_input+0x9a>
 8011570:	2302      	movs	r3, #2
 8011572:	f107 010c 	add.w	r1, r7, #12
 8011576:	6838      	ldr	r0, [r7, #0]
 8011578:	f7ff fed8 	bl	801132c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	88db      	ldrh	r3, [r3, #6]
 8011580:	b29b      	uxth	r3, r3
 8011582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011586:	d003      	beq.n	8011590 <etharp_input+0xb8>
 8011588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801158c:	d01e      	beq.n	80115cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801158e:	e020      	b.n	80115d2 <etharp_input+0xfa>
      if (for_us) {
 8011590:	7dfb      	ldrb	r3, [r7, #23]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d01c      	beq.n	80115d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80115ac:	693a      	ldr	r2, [r7, #16]
 80115ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 80115b0:	2102      	movs	r1, #2
 80115b2:	9103      	str	r1, [sp, #12]
 80115b4:	f107 010c 	add.w	r1, r7, #12
 80115b8:	9102      	str	r1, [sp, #8]
 80115ba:	9201      	str	r2, [sp, #4]
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	462b      	mov	r3, r5
 80115c0:	4622      	mov	r2, r4
 80115c2:	4601      	mov	r1, r0
 80115c4:	6838      	ldr	r0, [r7, #0]
 80115c6:	f000 faeb 	bl	8011ba0 <etharp_raw>
      break;
 80115ca:	e001      	b.n	80115d0 <etharp_input+0xf8>
      break;
 80115cc:	bf00      	nop
 80115ce:	e000      	b.n	80115d2 <etharp_input+0xfa>
      break;
 80115d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7f9 f9a4 	bl	800a920 <pbuf_free>
}
 80115d8:	3718      	adds	r7, #24
 80115da:	46bd      	mov	sp, r7
 80115dc:	bdb0      	pop	{r4, r5, r7, pc}
 80115de:	bf00      	nop
 80115e0:	08017328 	.word	0x08017328
 80115e4:	08017478 	.word	0x08017478
 80115e8:	080173a0 	.word	0x080173a0

080115ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af02      	add	r7, sp, #8
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	4613      	mov	r3, r2
 80115f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80115fa:	79fa      	ldrb	r2, [r7, #7]
 80115fc:	4944      	ldr	r1, [pc, #272]	; (8011710 <etharp_output_to_arp_index+0x124>)
 80115fe:	4613      	mov	r3, r2
 8011600:	005b      	lsls	r3, r3, #1
 8011602:	4413      	add	r3, r2
 8011604:	00db      	lsls	r3, r3, #3
 8011606:	440b      	add	r3, r1
 8011608:	3314      	adds	r3, #20
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	2b01      	cmp	r3, #1
 801160e:	d806      	bhi.n	801161e <etharp_output_to_arp_index+0x32>
 8011610:	4b40      	ldr	r3, [pc, #256]	; (8011714 <etharp_output_to_arp_index+0x128>)
 8011612:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011616:	4940      	ldr	r1, [pc, #256]	; (8011718 <etharp_output_to_arp_index+0x12c>)
 8011618:	4840      	ldr	r0, [pc, #256]	; (801171c <etharp_output_to_arp_index+0x130>)
 801161a:	f002 fd6f 	bl	80140fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801161e:	79fa      	ldrb	r2, [r7, #7]
 8011620:	493b      	ldr	r1, [pc, #236]	; (8011710 <etharp_output_to_arp_index+0x124>)
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	00db      	lsls	r3, r3, #3
 801162a:	440b      	add	r3, r1
 801162c:	3314      	adds	r3, #20
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	2b02      	cmp	r3, #2
 8011632:	d153      	bne.n	80116dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011634:	79fa      	ldrb	r2, [r7, #7]
 8011636:	4936      	ldr	r1, [pc, #216]	; (8011710 <etharp_output_to_arp_index+0x124>)
 8011638:	4613      	mov	r3, r2
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	4413      	add	r3, r2
 801163e:	00db      	lsls	r3, r3, #3
 8011640:	440b      	add	r3, r1
 8011642:	3312      	adds	r3, #18
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801164a:	d919      	bls.n	8011680 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801164c:	79fa      	ldrb	r2, [r7, #7]
 801164e:	4613      	mov	r3, r2
 8011650:	005b      	lsls	r3, r3, #1
 8011652:	4413      	add	r3, r2
 8011654:	00db      	lsls	r3, r3, #3
 8011656:	4a2e      	ldr	r2, [pc, #184]	; (8011710 <etharp_output_to_arp_index+0x124>)
 8011658:	4413      	add	r3, r2
 801165a:	3304      	adds	r3, #4
 801165c:	4619      	mov	r1, r3
 801165e:	68f8      	ldr	r0, [r7, #12]
 8011660:	f000 fb4c 	bl	8011cfc <etharp_request>
 8011664:	4603      	mov	r3, r0
 8011666:	2b00      	cmp	r3, #0
 8011668:	d138      	bne.n	80116dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801166a:	79fa      	ldrb	r2, [r7, #7]
 801166c:	4928      	ldr	r1, [pc, #160]	; (8011710 <etharp_output_to_arp_index+0x124>)
 801166e:	4613      	mov	r3, r2
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	4413      	add	r3, r2
 8011674:	00db      	lsls	r3, r3, #3
 8011676:	440b      	add	r3, r1
 8011678:	3314      	adds	r3, #20
 801167a:	2203      	movs	r2, #3
 801167c:	701a      	strb	r2, [r3, #0]
 801167e:	e02d      	b.n	80116dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011680:	79fa      	ldrb	r2, [r7, #7]
 8011682:	4923      	ldr	r1, [pc, #140]	; (8011710 <etharp_output_to_arp_index+0x124>)
 8011684:	4613      	mov	r3, r2
 8011686:	005b      	lsls	r3, r3, #1
 8011688:	4413      	add	r3, r2
 801168a:	00db      	lsls	r3, r3, #3
 801168c:	440b      	add	r3, r1
 801168e:	3312      	adds	r3, #18
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011696:	d321      	bcc.n	80116dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011698:	79fa      	ldrb	r2, [r7, #7]
 801169a:	4613      	mov	r3, r2
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	4413      	add	r3, r2
 80116a0:	00db      	lsls	r3, r3, #3
 80116a2:	4a1b      	ldr	r2, [pc, #108]	; (8011710 <etharp_output_to_arp_index+0x124>)
 80116a4:	4413      	add	r3, r2
 80116a6:	1d19      	adds	r1, r3, #4
 80116a8:	79fa      	ldrb	r2, [r7, #7]
 80116aa:	4613      	mov	r3, r2
 80116ac:	005b      	lsls	r3, r3, #1
 80116ae:	4413      	add	r3, r2
 80116b0:	00db      	lsls	r3, r3, #3
 80116b2:	3308      	adds	r3, #8
 80116b4:	4a16      	ldr	r2, [pc, #88]	; (8011710 <etharp_output_to_arp_index+0x124>)
 80116b6:	4413      	add	r3, r2
 80116b8:	3304      	adds	r3, #4
 80116ba:	461a      	mov	r2, r3
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	f000 fafb 	bl	8011cb8 <etharp_request_dst>
 80116c2:	4603      	mov	r3, r0
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d109      	bne.n	80116dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80116c8:	79fa      	ldrb	r2, [r7, #7]
 80116ca:	4911      	ldr	r1, [pc, #68]	; (8011710 <etharp_output_to_arp_index+0x124>)
 80116cc:	4613      	mov	r3, r2
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	4413      	add	r3, r2
 80116d2:	00db      	lsls	r3, r3, #3
 80116d4:	440b      	add	r3, r1
 80116d6:	3314      	adds	r3, #20
 80116d8:	2203      	movs	r2, #3
 80116da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80116e2:	79fa      	ldrb	r2, [r7, #7]
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	3308      	adds	r3, #8
 80116ee:	4a08      	ldr	r2, [pc, #32]	; (8011710 <etharp_output_to_arp_index+0x124>)
 80116f0:	4413      	add	r3, r2
 80116f2:	3304      	adds	r3, #4
 80116f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116f8:	9200      	str	r2, [sp, #0]
 80116fa:	460a      	mov	r2, r1
 80116fc:	68b9      	ldr	r1, [r7, #8]
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f001 fe3a 	bl	8013378 <ethernet_output>
 8011704:	4603      	mov	r3, r0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	200003ec 	.word	0x200003ec
 8011714:	08017328 	.word	0x08017328
 8011718:	08017498 	.word	0x08017498
 801171c:	080173a0 	.word	0x080173a0

08011720 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b08a      	sub	sp, #40	; 0x28
 8011724:	af02      	add	r7, sp, #8
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d106      	bne.n	8011744 <etharp_output+0x24>
 8011736:	4b73      	ldr	r3, [pc, #460]	; (8011904 <etharp_output+0x1e4>)
 8011738:	f240 321e 	movw	r2, #798	; 0x31e
 801173c:	4972      	ldr	r1, [pc, #456]	; (8011908 <etharp_output+0x1e8>)
 801173e:	4873      	ldr	r0, [pc, #460]	; (801190c <etharp_output+0x1ec>)
 8011740:	f002 fcdc 	bl	80140fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d106      	bne.n	8011758 <etharp_output+0x38>
 801174a:	4b6e      	ldr	r3, [pc, #440]	; (8011904 <etharp_output+0x1e4>)
 801174c:	f240 321f 	movw	r2, #799	; 0x31f
 8011750:	496f      	ldr	r1, [pc, #444]	; (8011910 <etharp_output+0x1f0>)
 8011752:	486e      	ldr	r0, [pc, #440]	; (801190c <etharp_output+0x1ec>)
 8011754:	f002 fcd2 	bl	80140fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d106      	bne.n	801176c <etharp_output+0x4c>
 801175e:	4b69      	ldr	r3, [pc, #420]	; (8011904 <etharp_output+0x1e4>)
 8011760:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011764:	496b      	ldr	r1, [pc, #428]	; (8011914 <etharp_output+0x1f4>)
 8011766:	4869      	ldr	r0, [pc, #420]	; (801190c <etharp_output+0x1ec>)
 8011768:	f002 fcc8 	bl	80140fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	68f9      	ldr	r1, [r7, #12]
 8011772:	4618      	mov	r0, r3
 8011774:	f000 fef8 	bl	8012568 <ip4_addr_isbroadcast_u32>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d002      	beq.n	8011784 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801177e:	4b66      	ldr	r3, [pc, #408]	; (8011918 <etharp_output+0x1f8>)
 8011780:	61fb      	str	r3, [r7, #28]
 8011782:	e0af      	b.n	80118e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801178c:	2be0      	cmp	r3, #224	; 0xe0
 801178e:	d118      	bne.n	80117c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011790:	2301      	movs	r3, #1
 8011792:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011794:	2300      	movs	r3, #0
 8011796:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011798:	235e      	movs	r3, #94	; 0x5e
 801179a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3301      	adds	r3, #1
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	3302      	adds	r3, #2
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	3303      	adds	r3, #3
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80117ba:	f107 0310 	add.w	r3, r7, #16
 80117be:	61fb      	str	r3, [r7, #28]
 80117c0:	e090      	b.n	80118e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3304      	adds	r3, #4
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	405a      	eors	r2, r3
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	3308      	adds	r3, #8
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	4013      	ands	r3, r2
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d012      	beq.n	8011800 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80117e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d00b      	beq.n	8011800 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	330c      	adds	r3, #12
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d003      	beq.n	80117fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	330c      	adds	r3, #12
 80117f6:	61bb      	str	r3, [r7, #24]
 80117f8:	e002      	b.n	8011800 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80117fa:	f06f 0303 	mvn.w	r3, #3
 80117fe:	e07d      	b.n	80118fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011800:	4b46      	ldr	r3, [pc, #280]	; (801191c <etharp_output+0x1fc>)
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	4619      	mov	r1, r3
 8011806:	4a46      	ldr	r2, [pc, #280]	; (8011920 <etharp_output+0x200>)
 8011808:	460b      	mov	r3, r1
 801180a:	005b      	lsls	r3, r3, #1
 801180c:	440b      	add	r3, r1
 801180e:	00db      	lsls	r3, r3, #3
 8011810:	4413      	add	r3, r2
 8011812:	3314      	adds	r3, #20
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d925      	bls.n	8011866 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801181a:	4b40      	ldr	r3, [pc, #256]	; (801191c <etharp_output+0x1fc>)
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	4619      	mov	r1, r3
 8011820:	4a3f      	ldr	r2, [pc, #252]	; (8011920 <etharp_output+0x200>)
 8011822:	460b      	mov	r3, r1
 8011824:	005b      	lsls	r3, r3, #1
 8011826:	440b      	add	r3, r1
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	4413      	add	r3, r2
 801182c:	3308      	adds	r3, #8
 801182e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	429a      	cmp	r2, r3
 8011834:	d117      	bne.n	8011866 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	4b38      	ldr	r3, [pc, #224]	; (801191c <etharp_output+0x1fc>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	4618      	mov	r0, r3
 8011840:	4937      	ldr	r1, [pc, #220]	; (8011920 <etharp_output+0x200>)
 8011842:	4603      	mov	r3, r0
 8011844:	005b      	lsls	r3, r3, #1
 8011846:	4403      	add	r3, r0
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	440b      	add	r3, r1
 801184c:	3304      	adds	r3, #4
 801184e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011850:	429a      	cmp	r2, r3
 8011852:	d108      	bne.n	8011866 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011854:	4b31      	ldr	r3, [pc, #196]	; (801191c <etharp_output+0x1fc>)
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	461a      	mov	r2, r3
 801185a:	68b9      	ldr	r1, [r7, #8]
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f7ff fec5 	bl	80115ec <etharp_output_to_arp_index>
 8011862:	4603      	mov	r3, r0
 8011864:	e04a      	b.n	80118fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011866:	2300      	movs	r3, #0
 8011868:	75fb      	strb	r3, [r7, #23]
 801186a:	e031      	b.n	80118d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801186c:	7dfa      	ldrb	r2, [r7, #23]
 801186e:	492c      	ldr	r1, [pc, #176]	; (8011920 <etharp_output+0x200>)
 8011870:	4613      	mov	r3, r2
 8011872:	005b      	lsls	r3, r3, #1
 8011874:	4413      	add	r3, r2
 8011876:	00db      	lsls	r3, r3, #3
 8011878:	440b      	add	r3, r1
 801187a:	3314      	adds	r3, #20
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	2b01      	cmp	r3, #1
 8011880:	d923      	bls.n	80118ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011882:	7dfa      	ldrb	r2, [r7, #23]
 8011884:	4926      	ldr	r1, [pc, #152]	; (8011920 <etharp_output+0x200>)
 8011886:	4613      	mov	r3, r2
 8011888:	005b      	lsls	r3, r3, #1
 801188a:	4413      	add	r3, r2
 801188c:	00db      	lsls	r3, r3, #3
 801188e:	440b      	add	r3, r1
 8011890:	3308      	adds	r3, #8
 8011892:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011894:	68fa      	ldr	r2, [r7, #12]
 8011896:	429a      	cmp	r2, r3
 8011898:	d117      	bne.n	80118ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	6819      	ldr	r1, [r3, #0]
 801189e:	7dfa      	ldrb	r2, [r7, #23]
 80118a0:	481f      	ldr	r0, [pc, #124]	; (8011920 <etharp_output+0x200>)
 80118a2:	4613      	mov	r3, r2
 80118a4:	005b      	lsls	r3, r3, #1
 80118a6:	4413      	add	r3, r2
 80118a8:	00db      	lsls	r3, r3, #3
 80118aa:	4403      	add	r3, r0
 80118ac:	3304      	adds	r3, #4
 80118ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80118b0:	4299      	cmp	r1, r3
 80118b2:	d10a      	bne.n	80118ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80118b4:	4a19      	ldr	r2, [pc, #100]	; (801191c <etharp_output+0x1fc>)
 80118b6:	7dfb      	ldrb	r3, [r7, #23]
 80118b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80118ba:	7dfb      	ldrb	r3, [r7, #23]
 80118bc:	461a      	mov	r2, r3
 80118be:	68b9      	ldr	r1, [r7, #8]
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7ff fe93 	bl	80115ec <etharp_output_to_arp_index>
 80118c6:	4603      	mov	r3, r0
 80118c8:	e018      	b.n	80118fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
 80118cc:	3301      	adds	r3, #1
 80118ce:	75fb      	strb	r3, [r7, #23]
 80118d0:	7dfb      	ldrb	r3, [r7, #23]
 80118d2:	2b09      	cmp	r3, #9
 80118d4:	d9ca      	bls.n	801186c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	69b9      	ldr	r1, [r7, #24]
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	f000 f822 	bl	8011924 <etharp_query>
 80118e0:	4603      	mov	r3, r0
 80118e2:	e00b      	b.n	80118fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80118ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	68b9      	ldr	r1, [r7, #8]
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f001 fd3f 	bl	8013378 <ethernet_output>
 80118fa:	4603      	mov	r3, r0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3720      	adds	r7, #32
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	08017328 	.word	0x08017328
 8011908:	08017478 	.word	0x08017478
 801190c:	080173a0 	.word	0x080173a0
 8011910:	080174c8 	.word	0x080174c8
 8011914:	08017468 	.word	0x08017468
 8011918:	08017b20 	.word	0x08017b20
 801191c:	200004dc 	.word	0x200004dc
 8011920:	200003ec 	.word	0x200003ec

08011924 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b08c      	sub	sp, #48	; 0x30
 8011928:	af02      	add	r7, sp, #8
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	3326      	adds	r3, #38	; 0x26
 8011934:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011936:	23ff      	movs	r3, #255	; 0xff
 8011938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801193c:	2300      	movs	r3, #0
 801193e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	68f9      	ldr	r1, [r7, #12]
 8011946:	4618      	mov	r0, r3
 8011948:	f000 fe0e 	bl	8012568 <ip4_addr_isbroadcast_u32>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d10c      	bne.n	801196c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801195a:	2be0      	cmp	r3, #224	; 0xe0
 801195c:	d006      	beq.n	801196c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d003      	beq.n	801196c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801196c:	f06f 030f 	mvn.w	r3, #15
 8011970:	e101      	b.n	8011b76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011972:	68fa      	ldr	r2, [r7, #12]
 8011974:	2101      	movs	r1, #1
 8011976:	68b8      	ldr	r0, [r7, #8]
 8011978:	f7ff fb60 	bl	801103c <etharp_find_entry>
 801197c:	4603      	mov	r3, r0
 801197e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011984:	2b00      	cmp	r3, #0
 8011986:	da02      	bge.n	801198e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011988:	8a7b      	ldrh	r3, [r7, #18]
 801198a:	b25b      	sxtb	r3, r3
 801198c:	e0f3      	b.n	8011b76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801198e:	8a7b      	ldrh	r3, [r7, #18]
 8011990:	2b7e      	cmp	r3, #126	; 0x7e
 8011992:	d906      	bls.n	80119a2 <etharp_query+0x7e>
 8011994:	4b7a      	ldr	r3, [pc, #488]	; (8011b80 <etharp_query+0x25c>)
 8011996:	f240 32c1 	movw	r2, #961	; 0x3c1
 801199a:	497a      	ldr	r1, [pc, #488]	; (8011b84 <etharp_query+0x260>)
 801199c:	487a      	ldr	r0, [pc, #488]	; (8011b88 <etharp_query+0x264>)
 801199e:	f002 fbad 	bl	80140fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80119a2:	8a7b      	ldrh	r3, [r7, #18]
 80119a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80119a6:	7c7a      	ldrb	r2, [r7, #17]
 80119a8:	4978      	ldr	r1, [pc, #480]	; (8011b8c <etharp_query+0x268>)
 80119aa:	4613      	mov	r3, r2
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	4413      	add	r3, r2
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	440b      	add	r3, r1
 80119b4:	3314      	adds	r3, #20
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d115      	bne.n	80119e8 <etharp_query+0xc4>
    is_new_entry = 1;
 80119bc:	2301      	movs	r3, #1
 80119be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80119c0:	7c7a      	ldrb	r2, [r7, #17]
 80119c2:	4972      	ldr	r1, [pc, #456]	; (8011b8c <etharp_query+0x268>)
 80119c4:	4613      	mov	r3, r2
 80119c6:	005b      	lsls	r3, r3, #1
 80119c8:	4413      	add	r3, r2
 80119ca:	00db      	lsls	r3, r3, #3
 80119cc:	440b      	add	r3, r1
 80119ce:	3314      	adds	r3, #20
 80119d0:	2201      	movs	r2, #1
 80119d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80119d4:	7c7a      	ldrb	r2, [r7, #17]
 80119d6:	496d      	ldr	r1, [pc, #436]	; (8011b8c <etharp_query+0x268>)
 80119d8:	4613      	mov	r3, r2
 80119da:	005b      	lsls	r3, r3, #1
 80119dc:	4413      	add	r3, r2
 80119de:	00db      	lsls	r3, r3, #3
 80119e0:	440b      	add	r3, r1
 80119e2:	3308      	adds	r3, #8
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80119e8:	7c7a      	ldrb	r2, [r7, #17]
 80119ea:	4968      	ldr	r1, [pc, #416]	; (8011b8c <etharp_query+0x268>)
 80119ec:	4613      	mov	r3, r2
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	4413      	add	r3, r2
 80119f2:	00db      	lsls	r3, r3, #3
 80119f4:	440b      	add	r3, r1
 80119f6:	3314      	adds	r3, #20
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d011      	beq.n	8011a22 <etharp_query+0xfe>
 80119fe:	7c7a      	ldrb	r2, [r7, #17]
 8011a00:	4962      	ldr	r1, [pc, #392]	; (8011b8c <etharp_query+0x268>)
 8011a02:	4613      	mov	r3, r2
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	4413      	add	r3, r2
 8011a08:	00db      	lsls	r3, r3, #3
 8011a0a:	440b      	add	r3, r1
 8011a0c:	3314      	adds	r3, #20
 8011a0e:	781b      	ldrb	r3, [r3, #0]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d806      	bhi.n	8011a22 <etharp_query+0xfe>
 8011a14:	4b5a      	ldr	r3, [pc, #360]	; (8011b80 <etharp_query+0x25c>)
 8011a16:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011a1a:	495d      	ldr	r1, [pc, #372]	; (8011b90 <etharp_query+0x26c>)
 8011a1c:	485a      	ldr	r0, [pc, #360]	; (8011b88 <etharp_query+0x264>)
 8011a1e:	f002 fb6d 	bl	80140fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011a22:	6a3b      	ldr	r3, [r7, #32]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d102      	bne.n	8011a2e <etharp_query+0x10a>
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d10c      	bne.n	8011a48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011a2e:	68b9      	ldr	r1, [r7, #8]
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f000 f963 	bl	8011cfc <etharp_request>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d102      	bne.n	8011a48 <etharp_query+0x124>
      return result;
 8011a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a46:	e096      	b.n	8011b76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d106      	bne.n	8011a5c <etharp_query+0x138>
 8011a4e:	4b4c      	ldr	r3, [pc, #304]	; (8011b80 <etharp_query+0x25c>)
 8011a50:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011a54:	494f      	ldr	r1, [pc, #316]	; (8011b94 <etharp_query+0x270>)
 8011a56:	484c      	ldr	r0, [pc, #304]	; (8011b88 <etharp_query+0x264>)
 8011a58:	f002 fb50 	bl	80140fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011a5c:	7c7a      	ldrb	r2, [r7, #17]
 8011a5e:	494b      	ldr	r1, [pc, #300]	; (8011b8c <etharp_query+0x268>)
 8011a60:	4613      	mov	r3, r2
 8011a62:	005b      	lsls	r3, r3, #1
 8011a64:	4413      	add	r3, r2
 8011a66:	00db      	lsls	r3, r3, #3
 8011a68:	440b      	add	r3, r1
 8011a6a:	3314      	adds	r3, #20
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d917      	bls.n	8011aa2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011a72:	4a49      	ldr	r2, [pc, #292]	; (8011b98 <etharp_query+0x274>)
 8011a74:	7c7b      	ldrb	r3, [r7, #17]
 8011a76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011a78:	7c7a      	ldrb	r2, [r7, #17]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	005b      	lsls	r3, r3, #1
 8011a7e:	4413      	add	r3, r2
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	3308      	adds	r3, #8
 8011a84:	4a41      	ldr	r2, [pc, #260]	; (8011b8c <etharp_query+0x268>)
 8011a86:	4413      	add	r3, r2
 8011a88:	3304      	adds	r3, #4
 8011a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a8e:	9200      	str	r2, [sp, #0]
 8011a90:	697a      	ldr	r2, [r7, #20]
 8011a92:	6879      	ldr	r1, [r7, #4]
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f001 fc6f 	bl	8013378 <ethernet_output>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011aa0:	e067      	b.n	8011b72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011aa2:	7c7a      	ldrb	r2, [r7, #17]
 8011aa4:	4939      	ldr	r1, [pc, #228]	; (8011b8c <etharp_query+0x268>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	005b      	lsls	r3, r3, #1
 8011aaa:	4413      	add	r3, r2
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	440b      	add	r3, r1
 8011ab0:	3314      	adds	r3, #20
 8011ab2:	781b      	ldrb	r3, [r3, #0]
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d15c      	bne.n	8011b72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011ac0:	e01c      	b.n	8011afc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	895a      	ldrh	r2, [r3, #10]
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	891b      	ldrh	r3, [r3, #8]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d10a      	bne.n	8011ae4 <etharp_query+0x1c0>
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d006      	beq.n	8011ae4 <etharp_query+0x1c0>
 8011ad6:	4b2a      	ldr	r3, [pc, #168]	; (8011b80 <etharp_query+0x25c>)
 8011ad8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011adc:	492f      	ldr	r1, [pc, #188]	; (8011b9c <etharp_query+0x278>)
 8011ade:	482a      	ldr	r0, [pc, #168]	; (8011b88 <etharp_query+0x264>)
 8011ae0:	f002 fb0c 	bl	80140fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	7b1b      	ldrb	r3, [r3, #12]
 8011ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d002      	beq.n	8011af6 <etharp_query+0x1d2>
        copy_needed = 1;
 8011af0:	2301      	movs	r3, #1
 8011af2:	61bb      	str	r3, [r7, #24]
        break;
 8011af4:	e005      	b.n	8011b02 <etharp_query+0x1de>
      }
      p = p->next;
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1df      	bne.n	8011ac2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011b02:	69bb      	ldr	r3, [r7, #24]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d007      	beq.n	8011b18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011b0e:	200e      	movs	r0, #14
 8011b10:	f7f9 f972 	bl	800adf8 <pbuf_clone>
 8011b14:	61f8      	str	r0, [r7, #28]
 8011b16:	e004      	b.n	8011b22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011b1c:	69f8      	ldr	r0, [r7, #28]
 8011b1e:	f7f8 ff9f 	bl	800aa60 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d021      	beq.n	8011b6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011b28:	7c7a      	ldrb	r2, [r7, #17]
 8011b2a:	4918      	ldr	r1, [pc, #96]	; (8011b8c <etharp_query+0x268>)
 8011b2c:	4613      	mov	r3, r2
 8011b2e:	005b      	lsls	r3, r3, #1
 8011b30:	4413      	add	r3, r2
 8011b32:	00db      	lsls	r3, r3, #3
 8011b34:	440b      	add	r3, r1
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00a      	beq.n	8011b52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011b3c:	7c7a      	ldrb	r2, [r7, #17]
 8011b3e:	4913      	ldr	r1, [pc, #76]	; (8011b8c <etharp_query+0x268>)
 8011b40:	4613      	mov	r3, r2
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	4413      	add	r3, r2
 8011b46:	00db      	lsls	r3, r3, #3
 8011b48:	440b      	add	r3, r1
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7f8 fee7 	bl	800a920 <pbuf_free>
      }
      arp_table[i].q = p;
 8011b52:	7c7a      	ldrb	r2, [r7, #17]
 8011b54:	490d      	ldr	r1, [pc, #52]	; (8011b8c <etharp_query+0x268>)
 8011b56:	4613      	mov	r3, r2
 8011b58:	005b      	lsls	r3, r3, #1
 8011b5a:	4413      	add	r3, r2
 8011b5c:	00db      	lsls	r3, r3, #3
 8011b5e:	440b      	add	r3, r1
 8011b60:	69fa      	ldr	r2, [r7, #28]
 8011b62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011b64:	2300      	movs	r3, #0
 8011b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b6a:	e002      	b.n	8011b72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011b6c:	23ff      	movs	r3, #255	; 0xff
 8011b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3728      	adds	r7, #40	; 0x28
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	08017328 	.word	0x08017328
 8011b84:	080174d4 	.word	0x080174d4
 8011b88:	080173a0 	.word	0x080173a0
 8011b8c:	200003ec 	.word	0x200003ec
 8011b90:	080174e4 	.word	0x080174e4
 8011b94:	080174c8 	.word	0x080174c8
 8011b98:	200004dc 	.word	0x200004dc
 8011b9c:	0801750c 	.word	0x0801750c

08011ba0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b08a      	sub	sp, #40	; 0x28
 8011ba4:	af02      	add	r7, sp, #8
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d106      	bne.n	8011bc6 <etharp_raw+0x26>
 8011bb8:	4b3a      	ldr	r3, [pc, #232]	; (8011ca4 <etharp_raw+0x104>)
 8011bba:	f240 4257 	movw	r2, #1111	; 0x457
 8011bbe:	493a      	ldr	r1, [pc, #232]	; (8011ca8 <etharp_raw+0x108>)
 8011bc0:	483a      	ldr	r0, [pc, #232]	; (8011cac <etharp_raw+0x10c>)
 8011bc2:	f002 fa9b 	bl	80140fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011bc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bca:	211c      	movs	r1, #28
 8011bcc:	200e      	movs	r0, #14
 8011bce:	f7f8 fbc3 	bl	800a358 <pbuf_alloc>
 8011bd2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d102      	bne.n	8011be0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011bda:	f04f 33ff 	mov.w	r3, #4294967295
 8011bde:	e05d      	b.n	8011c9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011be0:	69bb      	ldr	r3, [r7, #24]
 8011be2:	895b      	ldrh	r3, [r3, #10]
 8011be4:	2b1b      	cmp	r3, #27
 8011be6:	d806      	bhi.n	8011bf6 <etharp_raw+0x56>
 8011be8:	4b2e      	ldr	r3, [pc, #184]	; (8011ca4 <etharp_raw+0x104>)
 8011bea:	f240 4262 	movw	r2, #1122	; 0x462
 8011bee:	4930      	ldr	r1, [pc, #192]	; (8011cb0 <etharp_raw+0x110>)
 8011bf0:	482e      	ldr	r0, [pc, #184]	; (8011cac <etharp_raw+0x10c>)
 8011bf2:	f002 fa83 	bl	80140fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011bfc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7f7 fbda 	bl	80093b8 <lwip_htons>
 8011c04:	4603      	mov	r3, r0
 8011c06:	461a      	mov	r2, r3
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011c12:	2b06      	cmp	r3, #6
 8011c14:	d006      	beq.n	8011c24 <etharp_raw+0x84>
 8011c16:	4b23      	ldr	r3, [pc, #140]	; (8011ca4 <etharp_raw+0x104>)
 8011c18:	f240 4269 	movw	r2, #1129	; 0x469
 8011c1c:	4925      	ldr	r1, [pc, #148]	; (8011cb4 <etharp_raw+0x114>)
 8011c1e:	4823      	ldr	r0, [pc, #140]	; (8011cac <etharp_raw+0x10c>)
 8011c20:	f002 fa6c 	bl	80140fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	3308      	adds	r3, #8
 8011c28:	2206      	movs	r2, #6
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f002 f9a5 	bl	8013f7c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	3312      	adds	r3, #18
 8011c36:	2206      	movs	r2, #6
 8011c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f002 f99e 	bl	8013f7c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	330e      	adds	r3, #14
 8011c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c46:	6812      	ldr	r2, [r2, #0]
 8011c48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	3318      	adds	r3, #24
 8011c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c50:	6812      	ldr	r2, [r2, #0]
 8011c52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	2200      	movs	r2, #0
 8011c58:	701a      	strb	r2, [r3, #0]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f042 0201 	orr.w	r2, r2, #1
 8011c60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	2200      	movs	r2, #0
 8011c66:	f042 0208 	orr.w	r2, r2, #8
 8011c6a:	709a      	strb	r2, [r3, #2]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2206      	movs	r2, #6
 8011c74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	2204      	movs	r2, #4
 8011c7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011c7c:	f640 0306 	movw	r3, #2054	; 0x806
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	69b9      	ldr	r1, [r7, #24]
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f001 fb75 	bl	8013378 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011c8e:	69b8      	ldr	r0, [r7, #24]
 8011c90:	f7f8 fe46 	bl	800a920 <pbuf_free>
  p = NULL;
 8011c94:	2300      	movs	r3, #0
 8011c96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011c98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3720      	adds	r7, #32
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	08017328 	.word	0x08017328
 8011ca8:	08017478 	.word	0x08017478
 8011cac:	080173a0 	.word	0x080173a0
 8011cb0:	08017528 	.word	0x08017528
 8011cb4:	0801755c 	.word	0x0801755c

08011cb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b088      	sub	sp, #32
 8011cbc:	af04      	add	r7, sp, #16
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011cd4:	2201      	movs	r2, #1
 8011cd6:	9203      	str	r2, [sp, #12]
 8011cd8:	68ba      	ldr	r2, [r7, #8]
 8011cda:	9202      	str	r2, [sp, #8]
 8011cdc:	4a06      	ldr	r2, [pc, #24]	; (8011cf8 <etharp_request_dst+0x40>)
 8011cde:	9201      	str	r2, [sp, #4]
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	68f8      	ldr	r0, [r7, #12]
 8011ce8:	f7ff ff5a 	bl	8011ba0 <etharp_raw>
 8011cec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	08017b28 	.word	0x08017b28

08011cfc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011d06:	4a05      	ldr	r2, [pc, #20]	; (8011d1c <etharp_request+0x20>)
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f7ff ffd4 	bl	8011cb8 <etharp_request_dst>
 8011d10:	4603      	mov	r3, r0
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3708      	adds	r7, #8
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	08017b20 	.word	0x08017b20

08011d20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b08e      	sub	sp, #56	; 0x38
 8011d24:	af04      	add	r7, sp, #16
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011d2a:	4b79      	ldr	r3, [pc, #484]	; (8011f10 <icmp_input+0x1f0>)
 8011d2c:	689b      	ldr	r3, [r3, #8]
 8011d2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	f003 030f 	and.w	r3, r3, #15
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	009b      	lsls	r3, r3, #2
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011d40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d42:	2b13      	cmp	r3, #19
 8011d44:	f240 80cd 	bls.w	8011ee2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	895b      	ldrh	r3, [r3, #10]
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	f240 80ca 	bls.w	8011ee6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011d5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f000 80b7 	beq.w	8011ed4 <icmp_input+0x1b4>
 8011d66:	2b08      	cmp	r3, #8
 8011d68:	f040 80b7 	bne.w	8011eda <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011d6c:	4b69      	ldr	r3, [pc, #420]	; (8011f14 <icmp_input+0x1f4>)
 8011d6e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d70:	4b67      	ldr	r3, [pc, #412]	; (8011f10 <icmp_input+0x1f0>)
 8011d72:	695b      	ldr	r3, [r3, #20]
 8011d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d78:	2be0      	cmp	r3, #224	; 0xe0
 8011d7a:	f000 80bb 	beq.w	8011ef4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011d7e:	4b64      	ldr	r3, [pc, #400]	; (8011f10 <icmp_input+0x1f0>)
 8011d80:	695b      	ldr	r3, [r3, #20]
 8011d82:	4a63      	ldr	r2, [pc, #396]	; (8011f10 <icmp_input+0x1f0>)
 8011d84:	6812      	ldr	r2, [r2, #0]
 8011d86:	4611      	mov	r1, r2
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f000 fbed 	bl	8012568 <ip4_addr_isbroadcast_u32>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f040 80b1 	bne.w	8011ef8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	891b      	ldrh	r3, [r3, #8]
 8011d9a:	2b07      	cmp	r3, #7
 8011d9c:	f240 80a5 	bls.w	8011eea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011da2:	330e      	adds	r3, #14
 8011da4:	4619      	mov	r1, r3
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f7f8 fd24 	bl	800a7f4 <pbuf_add_header>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d04b      	beq.n	8011e4a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	891a      	ldrh	r2, [r3, #8]
 8011db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011db8:	4413      	add	r3, r2
 8011dba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	891b      	ldrh	r3, [r3, #8]
 8011dc0:	8b7a      	ldrh	r2, [r7, #26]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	f0c0 809a 	bcc.w	8011efc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011dc8:	8b7b      	ldrh	r3, [r7, #26]
 8011dca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011dce:	4619      	mov	r1, r3
 8011dd0:	200e      	movs	r0, #14
 8011dd2:	f7f8 fac1 	bl	800a358 <pbuf_alloc>
 8011dd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f000 8090 	beq.w	8011f00 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	895b      	ldrh	r3, [r3, #10]
 8011de4:	461a      	mov	r2, r3
 8011de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011de8:	3308      	adds	r3, #8
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d203      	bcs.n	8011df6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011dee:	6978      	ldr	r0, [r7, #20]
 8011df0:	f7f8 fd96 	bl	800a920 <pbuf_free>
          goto icmperr;
 8011df4:	e085      	b.n	8011f02 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f002 f8bc 	bl	8013f7c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011e04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e06:	4619      	mov	r1, r3
 8011e08:	6978      	ldr	r0, [r7, #20]
 8011e0a:	f7f8 fd03 	bl	800a814 <pbuf_remove_header>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d009      	beq.n	8011e28 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011e14:	4b40      	ldr	r3, [pc, #256]	; (8011f18 <icmp_input+0x1f8>)
 8011e16:	22b6      	movs	r2, #182	; 0xb6
 8011e18:	4940      	ldr	r1, [pc, #256]	; (8011f1c <icmp_input+0x1fc>)
 8011e1a:	4841      	ldr	r0, [pc, #260]	; (8011f20 <icmp_input+0x200>)
 8011e1c:	f002 f96e 	bl	80140fc <iprintf>
          pbuf_free(r);
 8011e20:	6978      	ldr	r0, [r7, #20]
 8011e22:	f7f8 fd7d 	bl	800a920 <pbuf_free>
          goto icmperr;
 8011e26:	e06c      	b.n	8011f02 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011e28:	6879      	ldr	r1, [r7, #4]
 8011e2a:	6978      	ldr	r0, [r7, #20]
 8011e2c:	f7f8 fea0 	bl	800ab70 <pbuf_copy>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d003      	beq.n	8011e3e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011e36:	6978      	ldr	r0, [r7, #20]
 8011e38:	f7f8 fd72 	bl	800a920 <pbuf_free>
          goto icmperr;
 8011e3c:	e061      	b.n	8011f02 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7f8 fd6e 	bl	800a920 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	607b      	str	r3, [r7, #4]
 8011e48:	e00f      	b.n	8011e6a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e4c:	330e      	adds	r3, #14
 8011e4e:	4619      	mov	r1, r3
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f7f8 fcdf 	bl	800a814 <pbuf_remove_header>
 8011e56:	4603      	mov	r3, r0
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d006      	beq.n	8011e6a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011e5c:	4b2e      	ldr	r3, [pc, #184]	; (8011f18 <icmp_input+0x1f8>)
 8011e5e:	22c7      	movs	r2, #199	; 0xc7
 8011e60:	4930      	ldr	r1, [pc, #192]	; (8011f24 <icmp_input+0x204>)
 8011e62:	482f      	ldr	r0, [pc, #188]	; (8011f20 <icmp_input+0x200>)
 8011e64:	f002 f94a 	bl	80140fc <iprintf>
          goto icmperr;
 8011e68:	e04b      	b.n	8011f02 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011e70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e72:	4619      	mov	r1, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7f8 fcbd 	bl	800a7f4 <pbuf_add_header>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d12b      	bne.n	8011ed8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011e8e:	4b20      	ldr	r3, [pc, #128]	; (8011f10 <icmp_input+0x1f0>)
 8011e90:	691a      	ldr	r2, [r3, #16]
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	709a      	strb	r2, [r3, #2]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	22ff      	movs	r2, #255	; 0xff
 8011eaa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	729a      	strb	r2, [r3, #10]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	9302      	str	r3, [sp, #8]
 8011eba:	2301      	movs	r3, #1
 8011ebc:	9301      	str	r3, [sp, #4]
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	23ff      	movs	r3, #255	; 0xff
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	69f9      	ldr	r1, [r7, #28]
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 fa75 	bl	80123b8 <ip4_output_if>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011ed2:	e001      	b.n	8011ed8 <icmp_input+0x1b8>
      break;
 8011ed4:	bf00      	nop
 8011ed6:	e000      	b.n	8011eda <icmp_input+0x1ba>
      break;
 8011ed8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011eda:	6878      	ldr	r0, [r7, #4]
 8011edc:	f7f8 fd20 	bl	800a920 <pbuf_free>
  return;
 8011ee0:	e013      	b.n	8011f0a <icmp_input+0x1ea>
    goto lenerr;
 8011ee2:	bf00      	nop
 8011ee4:	e002      	b.n	8011eec <icmp_input+0x1cc>
    goto lenerr;
 8011ee6:	bf00      	nop
 8011ee8:	e000      	b.n	8011eec <icmp_input+0x1cc>
        goto lenerr;
 8011eea:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7f8 fd17 	bl	800a920 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011ef2:	e00a      	b.n	8011f0a <icmp_input+0x1ea>
        goto icmperr;
 8011ef4:	bf00      	nop
 8011ef6:	e004      	b.n	8011f02 <icmp_input+0x1e2>
        goto icmperr;
 8011ef8:	bf00      	nop
 8011efa:	e002      	b.n	8011f02 <icmp_input+0x1e2>
          goto icmperr;
 8011efc:	bf00      	nop
 8011efe:	e000      	b.n	8011f02 <icmp_input+0x1e2>
          goto icmperr;
 8011f00:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f7f8 fd0c 	bl	800a920 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011f08:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011f0a:	3728      	adds	r7, #40	; 0x28
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	2000379c 	.word	0x2000379c
 8011f14:	200037b0 	.word	0x200037b0
 8011f18:	080175a0 	.word	0x080175a0
 8011f1c:	080175d8 	.word	0x080175d8
 8011f20:	08017610 	.word	0x08017610
 8011f24:	08017638 	.word	0x08017638

08011f28 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	460b      	mov	r3, r1
 8011f32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011f34:	78fb      	ldrb	r3, [r7, #3]
 8011f36:	461a      	mov	r2, r3
 8011f38:	2103      	movs	r1, #3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 f814 	bl	8011f68 <icmp_send_response>
}
 8011f40:	bf00      	nop
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	460b      	mov	r3, r1
 8011f52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011f54:	78fb      	ldrb	r3, [r7, #3]
 8011f56:	461a      	mov	r2, r3
 8011f58:	210b      	movs	r1, #11
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 f804 	bl	8011f68 <icmp_send_response>
}
 8011f60:	bf00      	nop
 8011f62:	3708      	adds	r7, #8
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}

08011f68 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b08c      	sub	sp, #48	; 0x30
 8011f6c:	af04      	add	r7, sp, #16
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	460b      	mov	r3, r1
 8011f72:	70fb      	strb	r3, [r7, #3]
 8011f74:	4613      	mov	r3, r2
 8011f76:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011f78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f7c:	2124      	movs	r1, #36	; 0x24
 8011f7e:	2022      	movs	r0, #34	; 0x22
 8011f80:	f7f8 f9ea 	bl	800a358 <pbuf_alloc>
 8011f84:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d04c      	beq.n	8012026 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	895b      	ldrh	r3, [r3, #10]
 8011f90:	2b23      	cmp	r3, #35	; 0x23
 8011f92:	d806      	bhi.n	8011fa2 <icmp_send_response+0x3a>
 8011f94:	4b26      	ldr	r3, [pc, #152]	; (8012030 <icmp_send_response+0xc8>)
 8011f96:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011f9a:	4926      	ldr	r1, [pc, #152]	; (8012034 <icmp_send_response+0xcc>)
 8011f9c:	4826      	ldr	r0, [pc, #152]	; (8012038 <icmp_send_response+0xd0>)
 8011f9e:	f002 f8ad 	bl	80140fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	78fa      	ldrb	r2, [r7, #3]
 8011fb2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	78ba      	ldrb	r2, [r7, #2]
 8011fb8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	711a      	strb	r2, [r3, #4]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	719a      	strb	r2, [r3, #6]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	f103 0008 	add.w	r0, r3, #8
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	685b      	ldr	r3, [r3, #4]
 8011fda:	221c      	movs	r2, #28
 8011fdc:	4619      	mov	r1, r3
 8011fde:	f001 ffcd 	bl	8013f7c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011fe8:	f107 030c 	add.w	r3, r7, #12
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 f825 	bl	801203c <ip4_route>
 8011ff2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d011      	beq.n	801201e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	709a      	strb	r2, [r3, #2]
 8012000:	2200      	movs	r2, #0
 8012002:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012004:	f107 020c 	add.w	r2, r7, #12
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	9302      	str	r3, [sp, #8]
 801200c:	2301      	movs	r3, #1
 801200e:	9301      	str	r3, [sp, #4]
 8012010:	2300      	movs	r3, #0
 8012012:	9300      	str	r3, [sp, #0]
 8012014:	23ff      	movs	r3, #255	; 0xff
 8012016:	2100      	movs	r1, #0
 8012018:	69f8      	ldr	r0, [r7, #28]
 801201a:	f000 f9cd 	bl	80123b8 <ip4_output_if>
  }
  pbuf_free(q);
 801201e:	69f8      	ldr	r0, [r7, #28]
 8012020:	f7f8 fc7e 	bl	800a920 <pbuf_free>
 8012024:	e000      	b.n	8012028 <icmp_send_response+0xc0>
    return;
 8012026:	bf00      	nop
}
 8012028:	3720      	adds	r7, #32
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
 801202e:	bf00      	nop
 8012030:	080175a0 	.word	0x080175a0
 8012034:	0801766c 	.word	0x0801766c
 8012038:	08017610 	.word	0x08017610

0801203c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012044:	4b33      	ldr	r3, [pc, #204]	; (8012114 <ip4_route+0xd8>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	60fb      	str	r3, [r7, #12]
 801204a:	e036      	b.n	80120ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012052:	f003 0301 	and.w	r3, r3, #1
 8012056:	b2db      	uxtb	r3, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	d02b      	beq.n	80120b4 <ip4_route+0x78>
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012062:	089b      	lsrs	r3, r3, #2
 8012064:	f003 0301 	and.w	r3, r3, #1
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d022      	beq.n	80120b4 <ip4_route+0x78>
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	3304      	adds	r3, #4
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d01d      	beq.n	80120b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3304      	adds	r3, #4
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	405a      	eors	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	3308      	adds	r3, #8
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4013      	ands	r3, r2
 801208c:	2b00      	cmp	r3, #0
 801208e:	d101      	bne.n	8012094 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	e038      	b.n	8012106 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801209a:	f003 0302 	and.w	r3, r3, #2
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d108      	bne.n	80120b4 <ip4_route+0x78>
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	330c      	adds	r3, #12
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d101      	bne.n	80120b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	e028      	b.n	8012106 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	60fb      	str	r3, [r7, #12]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1c5      	bne.n	801204c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120c0:	4b15      	ldr	r3, [pc, #84]	; (8012118 <ip4_route+0xdc>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d01a      	beq.n	80120fe <ip4_route+0xc2>
 80120c8:	4b13      	ldr	r3, [pc, #76]	; (8012118 <ip4_route+0xdc>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120d0:	f003 0301 	and.w	r3, r3, #1
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d012      	beq.n	80120fe <ip4_route+0xc2>
 80120d8:	4b0f      	ldr	r3, [pc, #60]	; (8012118 <ip4_route+0xdc>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80120e0:	f003 0304 	and.w	r3, r3, #4
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00a      	beq.n	80120fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80120e8:	4b0b      	ldr	r3, [pc, #44]	; (8012118 <ip4_route+0xdc>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	3304      	adds	r3, #4
 80120ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d004      	beq.n	80120fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b7f      	cmp	r3, #127	; 0x7f
 80120fc:	d101      	bne.n	8012102 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80120fe:	2300      	movs	r3, #0
 8012100:	e001      	b.n	8012106 <ip4_route+0xca>
  }

  return netif_default;
 8012102:	4b05      	ldr	r3, [pc, #20]	; (8012118 <ip4_route+0xdc>)
 8012104:	681b      	ldr	r3, [r3, #0]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3714      	adds	r7, #20
 801210a:	46bd      	mov	sp, r7
 801210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012110:	4770      	bx	lr
 8012112:	bf00      	nop
 8012114:	20006cd0 	.word	0x20006cd0
 8012118:	20006cd4 	.word	0x20006cd4

0801211c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801212a:	f003 0301 	and.w	r3, r3, #1
 801212e:	b2db      	uxtb	r3, r3
 8012130:	2b00      	cmp	r3, #0
 8012132:	d016      	beq.n	8012162 <ip4_input_accept+0x46>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	3304      	adds	r3, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d011      	beq.n	8012162 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801213e:	4b0b      	ldr	r3, [pc, #44]	; (801216c <ip4_input_accept+0x50>)
 8012140:	695a      	ldr	r2, [r3, #20]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	3304      	adds	r3, #4
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	429a      	cmp	r2, r3
 801214a:	d008      	beq.n	801215e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801214c:	4b07      	ldr	r3, [pc, #28]	; (801216c <ip4_input_accept+0x50>)
 801214e:	695b      	ldr	r3, [r3, #20]
 8012150:	6879      	ldr	r1, [r7, #4]
 8012152:	4618      	mov	r0, r3
 8012154:	f000 fa08 	bl	8012568 <ip4_addr_isbroadcast_u32>
 8012158:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801215e:	2301      	movs	r3, #1
 8012160:	e000      	b.n	8012164 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012162:	2300      	movs	r3, #0
}
 8012164:	4618      	mov	r0, r3
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	2000379c 	.word	0x2000379c

08012170 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b086      	sub	sp, #24
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	091b      	lsrs	r3, r3, #4
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b04      	cmp	r3, #4
 801218a:	d004      	beq.n	8012196 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f7f8 fbc7 	bl	800a920 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	e107      	b.n	80123a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	f003 030f 	and.w	r3, r3, #15
 801219e:	b2db      	uxtb	r3, r3
 80121a0:	009b      	lsls	r3, r3, #2
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	885b      	ldrh	r3, [r3, #2]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f7 f903 	bl	80093b8 <lwip_htons>
 80121b2:	4603      	mov	r3, r0
 80121b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	891b      	ldrh	r3, [r3, #8]
 80121ba:	89ba      	ldrh	r2, [r7, #12]
 80121bc:	429a      	cmp	r2, r3
 80121be:	d204      	bcs.n	80121ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80121c0:	89bb      	ldrh	r3, [r7, #12]
 80121c2:	4619      	mov	r1, r3
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f7f8 fa25 	bl	800a614 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	895b      	ldrh	r3, [r3, #10]
 80121ce:	89fa      	ldrh	r2, [r7, #14]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d807      	bhi.n	80121e4 <ip4_input+0x74>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	891b      	ldrh	r3, [r3, #8]
 80121d8:	89ba      	ldrh	r2, [r7, #12]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d802      	bhi.n	80121e4 <ip4_input+0x74>
 80121de:	89fb      	ldrh	r3, [r7, #14]
 80121e0:	2b13      	cmp	r3, #19
 80121e2:	d804      	bhi.n	80121ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7f8 fb9b 	bl	800a920 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80121ea:	2300      	movs	r3, #0
 80121ec:	e0db      	b.n	80123a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	691b      	ldr	r3, [r3, #16]
 80121f2:	4a6f      	ldr	r2, [pc, #444]	; (80123b0 <ip4_input+0x240>)
 80121f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	4a6d      	ldr	r2, [pc, #436]	; (80123b0 <ip4_input+0x240>)
 80121fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80121fe:	4b6c      	ldr	r3, [pc, #432]	; (80123b0 <ip4_input+0x240>)
 8012200:	695b      	ldr	r3, [r3, #20]
 8012202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012206:	2be0      	cmp	r3, #224	; 0xe0
 8012208:	d112      	bne.n	8012230 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012210:	f003 0301 	and.w	r3, r3, #1
 8012214:	b2db      	uxtb	r3, r3
 8012216:	2b00      	cmp	r3, #0
 8012218:	d007      	beq.n	801222a <ip4_input+0xba>
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	3304      	adds	r3, #4
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d002      	beq.n	801222a <ip4_input+0xba>
      netif = inp;
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	613b      	str	r3, [r7, #16]
 8012228:	e02a      	b.n	8012280 <ip4_input+0x110>
    } else {
      netif = NULL;
 801222a:	2300      	movs	r3, #0
 801222c:	613b      	str	r3, [r7, #16]
 801222e:	e027      	b.n	8012280 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012230:	6838      	ldr	r0, [r7, #0]
 8012232:	f7ff ff73 	bl	801211c <ip4_input_accept>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d002      	beq.n	8012242 <ip4_input+0xd2>
      netif = inp;
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	613b      	str	r3, [r7, #16]
 8012240:	e01e      	b.n	8012280 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012246:	4b5a      	ldr	r3, [pc, #360]	; (80123b0 <ip4_input+0x240>)
 8012248:	695b      	ldr	r3, [r3, #20]
 801224a:	b2db      	uxtb	r3, r3
 801224c:	2b7f      	cmp	r3, #127	; 0x7f
 801224e:	d017      	beq.n	8012280 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012250:	4b58      	ldr	r3, [pc, #352]	; (80123b4 <ip4_input+0x244>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	613b      	str	r3, [r7, #16]
 8012256:	e00e      	b.n	8012276 <ip4_input+0x106>
          if (netif == inp) {
 8012258:	693a      	ldr	r2, [r7, #16]
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	429a      	cmp	r2, r3
 801225e:	d006      	beq.n	801226e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012260:	6938      	ldr	r0, [r7, #16]
 8012262:	f7ff ff5b 	bl	801211c <ip4_input_accept>
 8012266:	4603      	mov	r3, r0
 8012268:	2b00      	cmp	r3, #0
 801226a:	d108      	bne.n	801227e <ip4_input+0x10e>
 801226c:	e000      	b.n	8012270 <ip4_input+0x100>
            continue;
 801226e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	613b      	str	r3, [r7, #16]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d1ed      	bne.n	8012258 <ip4_input+0xe8>
 801227c:	e000      	b.n	8012280 <ip4_input+0x110>
            break;
 801227e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012280:	4b4b      	ldr	r3, [pc, #300]	; (80123b0 <ip4_input+0x240>)
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	6839      	ldr	r1, [r7, #0]
 8012286:	4618      	mov	r0, r3
 8012288:	f000 f96e 	bl	8012568 <ip4_addr_isbroadcast_u32>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d105      	bne.n	801229e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012292:	4b47      	ldr	r3, [pc, #284]	; (80123b0 <ip4_input+0x240>)
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801229a:	2be0      	cmp	r3, #224	; 0xe0
 801229c:	d104      	bne.n	80122a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f7f8 fb3e 	bl	800a920 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80122a4:	2300      	movs	r3, #0
 80122a6:	e07e      	b.n	80123a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d104      	bne.n	80122b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f7f8 fb36 	bl	800a920 <pbuf_free>
    return ERR_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	e076      	b.n	80123a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	88db      	ldrh	r3, [r3, #6]
 80122bc:	b29b      	uxth	r3, r3
 80122be:	461a      	mov	r2, r3
 80122c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80122c4:	4013      	ands	r3, r2
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d00b      	beq.n	80122e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f000 fc92 	bl	8012bf4 <ip4_reass>
 80122d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d101      	bne.n	80122dc <ip4_input+0x16c>
      return ERR_OK;
 80122d8:	2300      	movs	r3, #0
 80122da:	e064      	b.n	80123a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80122e2:	4a33      	ldr	r2, [pc, #204]	; (80123b0 <ip4_input+0x240>)
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80122e8:	4a31      	ldr	r2, [pc, #196]	; (80123b0 <ip4_input+0x240>)
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80122ee:	4a30      	ldr	r2, [pc, #192]	; (80123b0 <ip4_input+0x240>)
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	f003 030f 	and.w	r3, r3, #15
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	b2db      	uxtb	r3, r3
 8012302:	b29a      	uxth	r2, r3
 8012304:	4b2a      	ldr	r3, [pc, #168]	; (80123b0 <ip4_input+0x240>)
 8012306:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012308:	89fb      	ldrh	r3, [r7, #14]
 801230a:	4619      	mov	r1, r3
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7f8 fa81 	bl	800a814 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	7a5b      	ldrb	r3, [r3, #9]
 8012316:	2b11      	cmp	r3, #17
 8012318:	d006      	beq.n	8012328 <ip4_input+0x1b8>
 801231a:	2b11      	cmp	r3, #17
 801231c:	dc13      	bgt.n	8012346 <ip4_input+0x1d6>
 801231e:	2b01      	cmp	r3, #1
 8012320:	d00c      	beq.n	801233c <ip4_input+0x1cc>
 8012322:	2b06      	cmp	r3, #6
 8012324:	d005      	beq.n	8012332 <ip4_input+0x1c2>
 8012326:	e00e      	b.n	8012346 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7fe f8e6 	bl	80104fc <udp_input>
        break;
 8012330:	e026      	b.n	8012380 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012332:	6839      	ldr	r1, [r7, #0]
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7fa f92b 	bl	800c590 <tcp_input>
        break;
 801233a:	e021      	b.n	8012380 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f7ff fcee 	bl	8011d20 <icmp_input>
        break;
 8012344:	e01c      	b.n	8012380 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012346:	4b1a      	ldr	r3, [pc, #104]	; (80123b0 <ip4_input+0x240>)
 8012348:	695b      	ldr	r3, [r3, #20]
 801234a:	6939      	ldr	r1, [r7, #16]
 801234c:	4618      	mov	r0, r3
 801234e:	f000 f90b 	bl	8012568 <ip4_addr_isbroadcast_u32>
 8012352:	4603      	mov	r3, r0
 8012354:	2b00      	cmp	r3, #0
 8012356:	d10f      	bne.n	8012378 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012358:	4b15      	ldr	r3, [pc, #84]	; (80123b0 <ip4_input+0x240>)
 801235a:	695b      	ldr	r3, [r3, #20]
 801235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012360:	2be0      	cmp	r3, #224	; 0xe0
 8012362:	d009      	beq.n	8012378 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012368:	4619      	mov	r1, r3
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f7f8 fac5 	bl	800a8fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012370:	2102      	movs	r1, #2
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7ff fdd8 	bl	8011f28 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7f8 fad1 	bl	800a920 <pbuf_free>
        break;
 801237e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012380:	4b0b      	ldr	r3, [pc, #44]	; (80123b0 <ip4_input+0x240>)
 8012382:	2200      	movs	r2, #0
 8012384:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012386:	4b0a      	ldr	r3, [pc, #40]	; (80123b0 <ip4_input+0x240>)
 8012388:	2200      	movs	r2, #0
 801238a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801238c:	4b08      	ldr	r3, [pc, #32]	; (80123b0 <ip4_input+0x240>)
 801238e:	2200      	movs	r2, #0
 8012390:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012392:	4b07      	ldr	r3, [pc, #28]	; (80123b0 <ip4_input+0x240>)
 8012394:	2200      	movs	r2, #0
 8012396:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012398:	4b05      	ldr	r3, [pc, #20]	; (80123b0 <ip4_input+0x240>)
 801239a:	2200      	movs	r2, #0
 801239c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801239e:	4b04      	ldr	r3, [pc, #16]	; (80123b0 <ip4_input+0x240>)
 80123a0:	2200      	movs	r2, #0
 80123a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80123a4:	2300      	movs	r3, #0
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3718      	adds	r7, #24
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}
 80123ae:	bf00      	nop
 80123b0:	2000379c 	.word	0x2000379c
 80123b4:	20006cd0 	.word	0x20006cd0

080123b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b08a      	sub	sp, #40	; 0x28
 80123bc:	af04      	add	r7, sp, #16
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	607a      	str	r2, [r7, #4]
 80123c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d009      	beq.n	80123e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d003      	beq.n	80123de <ip4_output_if+0x26>
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d102      	bne.n	80123e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80123de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e0:	3304      	adds	r3, #4
 80123e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80123e4:	78fa      	ldrb	r2, [r7, #3]
 80123e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e8:	9302      	str	r3, [sp, #8]
 80123ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ee:	9301      	str	r3, [sp, #4]
 80123f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123f4:	9300      	str	r3, [sp, #0]
 80123f6:	4613      	mov	r3, r2
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	6979      	ldr	r1, [r7, #20]
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f000 f805 	bl	801240c <ip4_output_if_src>
 8012402:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012404:	4618      	mov	r0, r3
 8012406:	3718      	adds	r7, #24
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b088      	sub	sp, #32
 8012410:	af00      	add	r7, sp, #0
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	607a      	str	r2, [r7, #4]
 8012418:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	7b9b      	ldrb	r3, [r3, #14]
 801241e:	2b01      	cmp	r3, #1
 8012420:	d006      	beq.n	8012430 <ip4_output_if_src+0x24>
 8012422:	4b4b      	ldr	r3, [pc, #300]	; (8012550 <ip4_output_if_src+0x144>)
 8012424:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012428:	494a      	ldr	r1, [pc, #296]	; (8012554 <ip4_output_if_src+0x148>)
 801242a:	484b      	ldr	r0, [pc, #300]	; (8012558 <ip4_output_if_src+0x14c>)
 801242c:	f001 fe66 	bl	80140fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d060      	beq.n	80124f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012436:	2314      	movs	r3, #20
 8012438:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801243a:	2114      	movs	r1, #20
 801243c:	68f8      	ldr	r0, [r7, #12]
 801243e:	f7f8 f9d9 	bl	800a7f4 <pbuf_add_header>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d002      	beq.n	801244e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012448:	f06f 0301 	mvn.w	r3, #1
 801244c:	e07c      	b.n	8012548 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	895b      	ldrh	r3, [r3, #10]
 8012458:	2b13      	cmp	r3, #19
 801245a:	d806      	bhi.n	801246a <ip4_output_if_src+0x5e>
 801245c:	4b3c      	ldr	r3, [pc, #240]	; (8012550 <ip4_output_if_src+0x144>)
 801245e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012462:	493e      	ldr	r1, [pc, #248]	; (801255c <ip4_output_if_src+0x150>)
 8012464:	483c      	ldr	r0, [pc, #240]	; (8012558 <ip4_output_if_src+0x14c>)
 8012466:	f001 fe49 	bl	80140fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	78fa      	ldrb	r2, [r7, #3]
 801246e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012476:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012480:	8b7b      	ldrh	r3, [r7, #26]
 8012482:	089b      	lsrs	r3, r3, #2
 8012484:	b29b      	uxth	r3, r3
 8012486:	b2db      	uxtb	r3, r3
 8012488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801248c:	b2da      	uxtb	r2, r3
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012498:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	891b      	ldrh	r3, [r3, #8]
 801249e:	4618      	mov	r0, r3
 80124a0:	f7f6 ff8a 	bl	80093b8 <lwip_htons>
 80124a4:	4603      	mov	r3, r0
 80124a6:	461a      	mov	r2, r3
 80124a8:	69fb      	ldr	r3, [r7, #28]
 80124aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	2200      	movs	r2, #0
 80124b0:	719a      	strb	r2, [r3, #6]
 80124b2:	2200      	movs	r2, #0
 80124b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80124b6:	4b2a      	ldr	r3, [pc, #168]	; (8012560 <ip4_output_if_src+0x154>)
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7f6 ff7c 	bl	80093b8 <lwip_htons>
 80124c0:	4603      	mov	r3, r0
 80124c2:	461a      	mov	r2, r3
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80124c8:	4b25      	ldr	r3, [pc, #148]	; (8012560 <ip4_output_if_src+0x154>)
 80124ca:	881b      	ldrh	r3, [r3, #0]
 80124cc:	3301      	adds	r3, #1
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	4b23      	ldr	r3, [pc, #140]	; (8012560 <ip4_output_if_src+0x154>)
 80124d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d104      	bne.n	80124e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80124da:	4b22      	ldr	r3, [pc, #136]	; (8012564 <ip4_output_if_src+0x158>)
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	60da      	str	r2, [r3, #12]
 80124e2:	e003      	b.n	80124ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	2200      	movs	r2, #0
 80124f0:	729a      	strb	r2, [r3, #10]
 80124f2:	2200      	movs	r2, #0
 80124f4:	72da      	strb	r2, [r3, #11]
 80124f6:	e00f      	b.n	8012518 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	895b      	ldrh	r3, [r3, #10]
 80124fc:	2b13      	cmp	r3, #19
 80124fe:	d802      	bhi.n	8012506 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012500:	f06f 0301 	mvn.w	r3, #1
 8012504:	e020      	b.n	8012548 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	691b      	ldr	r3, [r3, #16]
 8012510:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012512:	f107 0314 	add.w	r3, r7, #20
 8012516:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801251c:	2b00      	cmp	r3, #0
 801251e:	d00c      	beq.n	801253a <ip4_output_if_src+0x12e>
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	891a      	ldrh	r2, [r3, #8]
 8012524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012528:	429a      	cmp	r2, r3
 801252a:	d906      	bls.n	801253a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f000 fd4d 	bl	8012fd0 <ip4_frag>
 8012536:	4603      	mov	r3, r0
 8012538:	e006      	b.n	8012548 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253c:	695b      	ldr	r3, [r3, #20]
 801253e:	687a      	ldr	r2, [r7, #4]
 8012540:	68f9      	ldr	r1, [r7, #12]
 8012542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012544:	4798      	blx	r3
 8012546:	4603      	mov	r3, r0
}
 8012548:	4618      	mov	r0, r3
 801254a:	3720      	adds	r7, #32
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	08017698 	.word	0x08017698
 8012554:	080176cc 	.word	0x080176cc
 8012558:	080176d8 	.word	0x080176d8
 801255c:	08017700 	.word	0x08017700
 8012560:	200004de 	.word	0x200004de
 8012564:	08017b1c 	.word	0x08017b1c

08012568 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012568:	b480      	push	{r7}
 801256a:	b085      	sub	sp, #20
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801257c:	d002      	beq.n	8012584 <ip4_addr_isbroadcast_u32+0x1c>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d101      	bne.n	8012588 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012584:	2301      	movs	r3, #1
 8012586:	e02a      	b.n	80125de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	2b00      	cmp	r3, #0
 8012594:	d101      	bne.n	801259a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012596:	2300      	movs	r3, #0
 8012598:	e021      	b.n	80125de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	3304      	adds	r3, #4
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d101      	bne.n	80125aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80125a6:	2300      	movs	r3, #0
 80125a8:	e019      	b.n	80125de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80125aa:	68fa      	ldr	r2, [r7, #12]
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	3304      	adds	r3, #4
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	405a      	eors	r2, r3
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	3308      	adds	r3, #8
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4013      	ands	r3, r2
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d10d      	bne.n	80125dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	3308      	adds	r3, #8
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	43da      	mvns	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	3308      	adds	r3, #8
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d101      	bne.n	80125dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80125d8:	2301      	movs	r3, #1
 80125da:	e000      	b.n	80125de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80125dc:	2300      	movs	r3, #0
  }
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3714      	adds	r7, #20
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr
	...

080125ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b084      	sub	sp, #16
 80125f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80125f2:	2300      	movs	r3, #0
 80125f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80125f6:	4b12      	ldr	r3, [pc, #72]	; (8012640 <ip_reass_tmr+0x54>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80125fc:	e018      	b.n	8012630 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	7fdb      	ldrb	r3, [r3, #31]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00b      	beq.n	801261e <ip_reass_tmr+0x32>
      r->timer--;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	7fdb      	ldrb	r3, [r3, #31]
 801260a:	3b01      	subs	r3, #1
 801260c:	b2da      	uxtb	r2, r3
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	60fb      	str	r3, [r7, #12]
 801261c:	e008      	b.n	8012630 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012628:	68b9      	ldr	r1, [r7, #8]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 f80a 	bl	8012644 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d1e3      	bne.n	80125fe <ip_reass_tmr+0x12>
    }
  }
}
 8012636:	bf00      	nop
 8012638:	bf00      	nop
 801263a:	3710      	adds	r7, #16
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	200004e0 	.word	0x200004e0

08012644 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b088      	sub	sp, #32
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012652:	683a      	ldr	r2, [r7, #0]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	429a      	cmp	r2, r3
 8012658:	d105      	bne.n	8012666 <ip_reass_free_complete_datagram+0x22>
 801265a:	4b45      	ldr	r3, [pc, #276]	; (8012770 <ip_reass_free_complete_datagram+0x12c>)
 801265c:	22ab      	movs	r2, #171	; 0xab
 801265e:	4945      	ldr	r1, [pc, #276]	; (8012774 <ip_reass_free_complete_datagram+0x130>)
 8012660:	4845      	ldr	r0, [pc, #276]	; (8012778 <ip_reass_free_complete_datagram+0x134>)
 8012662:	f001 fd4b 	bl	80140fc <iprintf>
  if (prev != NULL) {
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00a      	beq.n	8012682 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	687a      	ldr	r2, [r7, #4]
 8012672:	429a      	cmp	r2, r3
 8012674:	d005      	beq.n	8012682 <ip_reass_free_complete_datagram+0x3e>
 8012676:	4b3e      	ldr	r3, [pc, #248]	; (8012770 <ip_reass_free_complete_datagram+0x12c>)
 8012678:	22ad      	movs	r2, #173	; 0xad
 801267a:	4940      	ldr	r1, [pc, #256]	; (801277c <ip_reass_free_complete_datagram+0x138>)
 801267c:	483e      	ldr	r0, [pc, #248]	; (8012778 <ip_reass_free_complete_datagram+0x134>)
 801267e:	f001 fd3d 	bl	80140fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	889b      	ldrh	r3, [r3, #4]
 801268e:	b29b      	uxth	r3, r3
 8012690:	2b00      	cmp	r3, #0
 8012692:	d12a      	bne.n	80126ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	6858      	ldr	r0, [r3, #4]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	3308      	adds	r3, #8
 80126aa:	2214      	movs	r2, #20
 80126ac:	4619      	mov	r1, r3
 80126ae:	f001 fc65 	bl	8013f7c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80126b2:	2101      	movs	r1, #1
 80126b4:	69b8      	ldr	r0, [r7, #24]
 80126b6:	f7ff fc47 	bl	8011f48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80126ba:	69b8      	ldr	r0, [r7, #24]
 80126bc:	f7f8 f9b8 	bl	800aa30 <pbuf_clen>
 80126c0:	4603      	mov	r3, r0
 80126c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126c4:	8bfa      	ldrh	r2, [r7, #30]
 80126c6:	8a7b      	ldrh	r3, [r7, #18]
 80126c8:	4413      	add	r3, r2
 80126ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126ce:	db05      	blt.n	80126dc <ip_reass_free_complete_datagram+0x98>
 80126d0:	4b27      	ldr	r3, [pc, #156]	; (8012770 <ip_reass_free_complete_datagram+0x12c>)
 80126d2:	22bc      	movs	r2, #188	; 0xbc
 80126d4:	492a      	ldr	r1, [pc, #168]	; (8012780 <ip_reass_free_complete_datagram+0x13c>)
 80126d6:	4828      	ldr	r0, [pc, #160]	; (8012778 <ip_reass_free_complete_datagram+0x134>)
 80126d8:	f001 fd10 	bl	80140fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80126dc:	8bfa      	ldrh	r2, [r7, #30]
 80126de:	8a7b      	ldrh	r3, [r7, #18]
 80126e0:	4413      	add	r3, r2
 80126e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80126e4:	69b8      	ldr	r0, [r7, #24]
 80126e6:	f7f8 f91b 	bl	800a920 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80126f0:	e01f      	b.n	8012732 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80126f8:	69bb      	ldr	r3, [r7, #24]
 80126fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7f8 f994 	bl	800aa30 <pbuf_clen>
 8012708:	4603      	mov	r3, r0
 801270a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801270c:	8bfa      	ldrh	r2, [r7, #30]
 801270e:	8a7b      	ldrh	r3, [r7, #18]
 8012710:	4413      	add	r3, r2
 8012712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012716:	db05      	blt.n	8012724 <ip_reass_free_complete_datagram+0xe0>
 8012718:	4b15      	ldr	r3, [pc, #84]	; (8012770 <ip_reass_free_complete_datagram+0x12c>)
 801271a:	22cc      	movs	r2, #204	; 0xcc
 801271c:	4918      	ldr	r1, [pc, #96]	; (8012780 <ip_reass_free_complete_datagram+0x13c>)
 801271e:	4816      	ldr	r0, [pc, #88]	; (8012778 <ip_reass_free_complete_datagram+0x134>)
 8012720:	f001 fcec 	bl	80140fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012724:	8bfa      	ldrh	r2, [r7, #30]
 8012726:	8a7b      	ldrh	r3, [r7, #18]
 8012728:	4413      	add	r3, r2
 801272a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f7f8 f8f7 	bl	800a920 <pbuf_free>
  while (p != NULL) {
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d1dc      	bne.n	80126f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f8c2 	bl	80128c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012740:	4b10      	ldr	r3, [pc, #64]	; (8012784 <ip_reass_free_complete_datagram+0x140>)
 8012742:	881b      	ldrh	r3, [r3, #0]
 8012744:	8bfa      	ldrh	r2, [r7, #30]
 8012746:	429a      	cmp	r2, r3
 8012748:	d905      	bls.n	8012756 <ip_reass_free_complete_datagram+0x112>
 801274a:	4b09      	ldr	r3, [pc, #36]	; (8012770 <ip_reass_free_complete_datagram+0x12c>)
 801274c:	22d2      	movs	r2, #210	; 0xd2
 801274e:	490e      	ldr	r1, [pc, #56]	; (8012788 <ip_reass_free_complete_datagram+0x144>)
 8012750:	4809      	ldr	r0, [pc, #36]	; (8012778 <ip_reass_free_complete_datagram+0x134>)
 8012752:	f001 fcd3 	bl	80140fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012756:	4b0b      	ldr	r3, [pc, #44]	; (8012784 <ip_reass_free_complete_datagram+0x140>)
 8012758:	881a      	ldrh	r2, [r3, #0]
 801275a:	8bfb      	ldrh	r3, [r7, #30]
 801275c:	1ad3      	subs	r3, r2, r3
 801275e:	b29a      	uxth	r2, r3
 8012760:	4b08      	ldr	r3, [pc, #32]	; (8012784 <ip_reass_free_complete_datagram+0x140>)
 8012762:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012764:	8bfb      	ldrh	r3, [r7, #30]
}
 8012766:	4618      	mov	r0, r3
 8012768:	3720      	adds	r7, #32
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	08017730 	.word	0x08017730
 8012774:	0801776c 	.word	0x0801776c
 8012778:	08017778 	.word	0x08017778
 801277c:	080177a0 	.word	0x080177a0
 8012780:	080177b4 	.word	0x080177b4
 8012784:	200004e4 	.word	0x200004e4
 8012788:	080177d4 	.word	0x080177d4

0801278c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b08a      	sub	sp, #40	; 0x28
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012796:	2300      	movs	r3, #0
 8012798:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801279a:	2300      	movs	r3, #0
 801279c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801279e:	2300      	movs	r3, #0
 80127a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80127a2:	2300      	movs	r3, #0
 80127a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80127a6:	2300      	movs	r3, #0
 80127a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80127aa:	4b28      	ldr	r3, [pc, #160]	; (801284c <ip_reass_remove_oldest_datagram+0xc0>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80127b0:	e030      	b.n	8012814 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80127b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b4:	695a      	ldr	r2, [r3, #20]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d10c      	bne.n	80127d8 <ip_reass_remove_oldest_datagram+0x4c>
 80127be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c0:	699a      	ldr	r2, [r3, #24]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	691b      	ldr	r3, [r3, #16]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d106      	bne.n	80127d8 <ip_reass_remove_oldest_datagram+0x4c>
 80127ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127cc:	899a      	ldrh	r2, [r3, #12]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	889b      	ldrh	r3, [r3, #4]
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d014      	beq.n	8012802 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	3301      	adds	r3, #1
 80127dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80127de:	6a3b      	ldr	r3, [r7, #32]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d104      	bne.n	80127ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80127e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	61bb      	str	r3, [r7, #24]
 80127ec:	e009      	b.n	8012802 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	7fda      	ldrb	r2, [r3, #31]
 80127f2:	6a3b      	ldr	r3, [r7, #32]
 80127f4:	7fdb      	ldrb	r3, [r3, #31]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d803      	bhi.n	8012802 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80127fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d001      	beq.n	801280e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012816:	2b00      	cmp	r3, #0
 8012818:	d1cb      	bne.n	80127b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801281a:	6a3b      	ldr	r3, [r7, #32]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d008      	beq.n	8012832 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012820:	69b9      	ldr	r1, [r7, #24]
 8012822:	6a38      	ldr	r0, [r7, #32]
 8012824:	f7ff ff0e 	bl	8012644 <ip_reass_free_complete_datagram>
 8012828:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801282a:	697a      	ldr	r2, [r7, #20]
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	4413      	add	r3, r2
 8012830:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012832:	697a      	ldr	r2, [r7, #20]
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	429a      	cmp	r2, r3
 8012838:	da02      	bge.n	8012840 <ip_reass_remove_oldest_datagram+0xb4>
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	2b01      	cmp	r3, #1
 801283e:	dcac      	bgt.n	801279a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012840:	697b      	ldr	r3, [r7, #20]
}
 8012842:	4618      	mov	r0, r3
 8012844:	3728      	adds	r7, #40	; 0x28
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	200004e0 	.word	0x200004e0

08012850 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801285a:	2004      	movs	r0, #4
 801285c:	f7f7 fa02 	bl	8009c64 <memp_malloc>
 8012860:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d110      	bne.n	801288a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012868:	6839      	ldr	r1, [r7, #0]
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f7ff ff8e 	bl	801278c <ip_reass_remove_oldest_datagram>
 8012870:	4602      	mov	r2, r0
 8012872:	683b      	ldr	r3, [r7, #0]
 8012874:	4293      	cmp	r3, r2
 8012876:	dc03      	bgt.n	8012880 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012878:	2004      	movs	r0, #4
 801287a:	f7f7 f9f3 	bl	8009c64 <memp_malloc>
 801287e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d101      	bne.n	801288a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012886:	2300      	movs	r3, #0
 8012888:	e016      	b.n	80128b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801288a:	2220      	movs	r2, #32
 801288c:	2100      	movs	r1, #0
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f001 fb82 	bl	8013f98 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	220f      	movs	r2, #15
 8012898:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801289a:	4b09      	ldr	r3, [pc, #36]	; (80128c0 <ip_reass_enqueue_new_datagram+0x70>)
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80128a2:	4a07      	ldr	r2, [pc, #28]	; (80128c0 <ip_reass_enqueue_new_datagram+0x70>)
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	3308      	adds	r3, #8
 80128ac:	2214      	movs	r2, #20
 80128ae:	6879      	ldr	r1, [r7, #4]
 80128b0:	4618      	mov	r0, r3
 80128b2:	f001 fb63 	bl	8013f7c <memcpy>
  return ipr;
 80128b6:	68fb      	ldr	r3, [r7, #12]
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3710      	adds	r7, #16
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}
 80128c0:	200004e0 	.word	0x200004e0

080128c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
 80128cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80128ce:	4b10      	ldr	r3, [pc, #64]	; (8012910 <ip_reass_dequeue_datagram+0x4c>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d104      	bne.n	80128e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	4a0c      	ldr	r2, [pc, #48]	; (8012910 <ip_reass_dequeue_datagram+0x4c>)
 80128de:	6013      	str	r3, [r2, #0]
 80128e0:	e00d      	b.n	80128fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d106      	bne.n	80128f6 <ip_reass_dequeue_datagram+0x32>
 80128e8:	4b0a      	ldr	r3, [pc, #40]	; (8012914 <ip_reass_dequeue_datagram+0x50>)
 80128ea:	f240 1245 	movw	r2, #325	; 0x145
 80128ee:	490a      	ldr	r1, [pc, #40]	; (8012918 <ip_reass_dequeue_datagram+0x54>)
 80128f0:	480a      	ldr	r0, [pc, #40]	; (801291c <ip_reass_dequeue_datagram+0x58>)
 80128f2:	f001 fc03 	bl	80140fc <iprintf>
    prev->next = ipr->next;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80128fe:	6879      	ldr	r1, [r7, #4]
 8012900:	2004      	movs	r0, #4
 8012902:	f7f7 f9fb 	bl	8009cfc <memp_free>
}
 8012906:	bf00      	nop
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	200004e0 	.word	0x200004e0
 8012914:	08017730 	.word	0x08017730
 8012918:	080177f8 	.word	0x080177f8
 801291c:	08017778 	.word	0x08017778

08012920 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b08c      	sub	sp, #48	; 0x30
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801292c:	2300      	movs	r3, #0
 801292e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012930:	2301      	movs	r3, #1
 8012932:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	885b      	ldrh	r3, [r3, #2]
 801293e:	b29b      	uxth	r3, r3
 8012940:	4618      	mov	r0, r3
 8012942:	f7f6 fd39 	bl	80093b8 <lwip_htons>
 8012946:	4603      	mov	r3, r0
 8012948:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801294a:	69fb      	ldr	r3, [r7, #28]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	f003 030f 	and.w	r3, r3, #15
 8012952:	b2db      	uxtb	r3, r3
 8012954:	009b      	lsls	r3, r3, #2
 8012956:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012958:	7e7b      	ldrb	r3, [r7, #25]
 801295a:	b29b      	uxth	r3, r3
 801295c:	8b7a      	ldrh	r2, [r7, #26]
 801295e:	429a      	cmp	r2, r3
 8012960:	d202      	bcs.n	8012968 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012962:	f04f 33ff 	mov.w	r3, #4294967295
 8012966:	e135      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012968:	7e7b      	ldrb	r3, [r7, #25]
 801296a:	b29b      	uxth	r3, r3
 801296c:	8b7a      	ldrh	r2, [r7, #26]
 801296e:	1ad3      	subs	r3, r2, r3
 8012970:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012972:	69fb      	ldr	r3, [r7, #28]
 8012974:	88db      	ldrh	r3, [r3, #6]
 8012976:	b29b      	uxth	r3, r3
 8012978:	4618      	mov	r0, r3
 801297a:	f7f6 fd1d 	bl	80093b8 <lwip_htons>
 801297e:	4603      	mov	r3, r0
 8012980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012984:	b29b      	uxth	r3, r3
 8012986:	00db      	lsls	r3, r3, #3
 8012988:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012992:	2200      	movs	r2, #0
 8012994:	701a      	strb	r2, [r3, #0]
 8012996:	2200      	movs	r2, #0
 8012998:	705a      	strb	r2, [r3, #1]
 801299a:	2200      	movs	r2, #0
 801299c:	709a      	strb	r2, [r3, #2]
 801299e:	2200      	movs	r2, #0
 80129a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	8afa      	ldrh	r2, [r7, #22]
 80129a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80129a8:	8afa      	ldrh	r2, [r7, #22]
 80129aa:	8b7b      	ldrh	r3, [r7, #26]
 80129ac:	4413      	add	r3, r2
 80129ae:	b29a      	uxth	r2, r3
 80129b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	88db      	ldrh	r3, [r3, #6]
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	8afa      	ldrh	r2, [r7, #22]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d902      	bls.n	80129c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80129c0:	f04f 33ff 	mov.w	r3, #4294967295
 80129c4:	e106      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	627b      	str	r3, [r7, #36]	; 0x24
 80129cc:	e068      	b.n	8012aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80129ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80129d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d6:	889b      	ldrh	r3, [r3, #4]
 80129d8:	b29a      	uxth	r2, r3
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	889b      	ldrh	r3, [r3, #4]
 80129de:	b29b      	uxth	r3, r3
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d235      	bcs.n	8012a50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80129e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80129ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d020      	beq.n	8012a32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	889b      	ldrh	r3, [r3, #4]
 80129f4:	b29a      	uxth	r2, r3
 80129f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f8:	88db      	ldrh	r3, [r3, #6]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d307      	bcc.n	8012a10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a02:	88db      	ldrh	r3, [r3, #6]
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	889b      	ldrh	r3, [r3, #4]
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d902      	bls.n	8012a16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a10:	f04f 33ff 	mov.w	r3, #4294967295
 8012a14:	e0de      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a18:	68ba      	ldr	r2, [r7, #8]
 8012a1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1e:	88db      	ldrh	r3, [r3, #6]
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a24:	889b      	ldrh	r3, [r3, #4]
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d03d      	beq.n	8012aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012a30:	e03a      	b.n	8012aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a34:	88db      	ldrh	r3, [r3, #6]
 8012a36:	b29a      	uxth	r2, r3
 8012a38:	693b      	ldr	r3, [r7, #16]
 8012a3a:	889b      	ldrh	r3, [r3, #4]
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d902      	bls.n	8012a48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a42:	f04f 33ff 	mov.w	r3, #4294967295
 8012a46:	e0c5      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	68ba      	ldr	r2, [r7, #8]
 8012a4c:	605a      	str	r2, [r3, #4]
      break;
 8012a4e:	e02b      	b.n	8012aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a52:	889b      	ldrh	r3, [r3, #4]
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	889b      	ldrh	r3, [r3, #4]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d102      	bne.n	8012a66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a60:	f04f 33ff 	mov.w	r3, #4294967295
 8012a64:	e0b6      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a68:	889b      	ldrh	r3, [r3, #4]
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	88db      	ldrh	r3, [r3, #6]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d202      	bcs.n	8012a7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a76:	f04f 33ff 	mov.w	r3, #4294967295
 8012a7a:	e0ab      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d009      	beq.n	8012a96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a84:	88db      	ldrh	r3, [r3, #6]
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	889b      	ldrh	r3, [r3, #4]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d001      	beq.n	8012a96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d193      	bne.n	80129ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012aa6:	e000      	b.n	8012aaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012aa8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d12d      	bne.n	8012b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d01c      	beq.n	8012af0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab8:	88db      	ldrh	r3, [r3, #6]
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012abe:	889b      	ldrh	r3, [r3, #4]
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d906      	bls.n	8012ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012ac6:	4b45      	ldr	r3, [pc, #276]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ac8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012acc:	4944      	ldr	r1, [pc, #272]	; (8012be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012ace:	4845      	ldr	r0, [pc, #276]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ad0:	f001 fb14 	bl	80140fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad6:	68ba      	ldr	r2, [r7, #8]
 8012ad8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012adc:	88db      	ldrh	r3, [r3, #6]
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae2:	889b      	ldrh	r3, [r3, #4]
 8012ae4:	b29b      	uxth	r3, r3
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d010      	beq.n	8012b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	623b      	str	r3, [r7, #32]
 8012aee:	e00d      	b.n	8012b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d006      	beq.n	8012b06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012af8:	4b38      	ldr	r3, [pc, #224]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012afa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012afe:	493a      	ldr	r1, [pc, #232]	; (8012be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012b00:	4838      	ldr	r0, [pc, #224]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b02:	f001 fafb 	bl	80140fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d105      	bne.n	8012b1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	7f9b      	ldrb	r3, [r3, #30]
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d059      	beq.n	8012bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012b1e:	6a3b      	ldr	r3, [r7, #32]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d04f      	beq.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d006      	beq.n	8012b3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	889b      	ldrh	r3, [r3, #4]
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d002      	beq.n	8012b40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	623b      	str	r3, [r7, #32]
 8012b3e:	e041      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b4a:	e012      	b.n	8012b72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b54:	88db      	ldrh	r3, [r3, #6]
 8012b56:	b29a      	uxth	r2, r3
 8012b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5a:	889b      	ldrh	r3, [r3, #4]
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d002      	beq.n	8012b68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	623b      	str	r3, [r7, #32]
            break;
 8012b66:	e007      	b.n	8012b78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d1e9      	bne.n	8012b4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012b78:	6a3b      	ldr	r3, [r7, #32]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d022      	beq.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	685b      	ldr	r3, [r3, #4]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d106      	bne.n	8012b94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012b86:	4b15      	ldr	r3, [pc, #84]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b88:	f240 12df 	movw	r2, #479	; 0x1df
 8012b8c:	4917      	ldr	r1, [pc, #92]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012b8e:	4815      	ldr	r0, [pc, #84]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b90:	f001 fab4 	bl	80140fc <iprintf>
          LWIP_ASSERT("sanity check",
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b9c:	429a      	cmp	r2, r3
 8012b9e:	d106      	bne.n	8012bae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012ba0:	4b0e      	ldr	r3, [pc, #56]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ba2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012ba6:	4911      	ldr	r1, [pc, #68]	; (8012bec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012ba8:	480e      	ldr	r0, [pc, #56]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012baa:	f001 faa7 	bl	80140fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d006      	beq.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012bb6:	4b09      	ldr	r3, [pc, #36]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012bb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012bbc:	490c      	ldr	r1, [pc, #48]	; (8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012bbe:	4809      	ldr	r0, [pc, #36]	; (8012be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bc0:	f001 fa9c 	bl	80140fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	bf14      	ite	ne
 8012bca:	2301      	movne	r3, #1
 8012bcc:	2300      	moveq	r3, #0
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	e000      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012bd2:	2300      	movs	r3, #0
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3730      	adds	r7, #48	; 0x30
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	08017730 	.word	0x08017730
 8012be0:	08017814 	.word	0x08017814
 8012be4:	08017778 	.word	0x08017778
 8012be8:	08017834 	.word	0x08017834
 8012bec:	0801786c 	.word	0x0801786c
 8012bf0:	0801787c 	.word	0x0801787c

08012bf4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b08e      	sub	sp, #56	; 0x38
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	f003 030f 	and.w	r3, r3, #15
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	b2db      	uxtb	r3, r3
 8012c10:	2b14      	cmp	r3, #20
 8012c12:	f040 8167 	bne.w	8012ee4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c18:	88db      	ldrh	r3, [r3, #6]
 8012c1a:	b29b      	uxth	r3, r3
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7f6 fbcb 	bl	80093b8 <lwip_htons>
 8012c22:	4603      	mov	r3, r0
 8012c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	00db      	lsls	r3, r3, #3
 8012c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c30:	885b      	ldrh	r3, [r3, #2]
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7f6 fbbf 	bl	80093b8 <lwip_htons>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	f003 030f 	and.w	r3, r3, #15
 8012c46:	b2db      	uxtb	r3, r3
 8012c48:	009b      	lsls	r3, r3, #2
 8012c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c56:	429a      	cmp	r2, r3
 8012c58:	f0c0 8146 	bcc.w	8012ee8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c64:	1ad3      	subs	r3, r2, r3
 8012c66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7f7 fee1 	bl	800aa30 <pbuf_clen>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012c72:	4b9f      	ldr	r3, [pc, #636]	; (8012ef0 <ip4_reass+0x2fc>)
 8012c74:	881b      	ldrh	r3, [r3, #0]
 8012c76:	461a      	mov	r2, r3
 8012c78:	8c3b      	ldrh	r3, [r7, #32]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	2b0a      	cmp	r3, #10
 8012c7e:	dd10      	ble.n	8012ca2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c80:	8c3b      	ldrh	r3, [r7, #32]
 8012c82:	4619      	mov	r1, r3
 8012c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c86:	f7ff fd81 	bl	801278c <ip_reass_remove_oldest_datagram>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f000 812d 	beq.w	8012eec <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012c92:	4b97      	ldr	r3, [pc, #604]	; (8012ef0 <ip4_reass+0x2fc>)
 8012c94:	881b      	ldrh	r3, [r3, #0]
 8012c96:	461a      	mov	r2, r3
 8012c98:	8c3b      	ldrh	r3, [r7, #32]
 8012c9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c9c:	2b0a      	cmp	r3, #10
 8012c9e:	f300 8125 	bgt.w	8012eec <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012ca2:	4b94      	ldr	r3, [pc, #592]	; (8012ef4 <ip4_reass+0x300>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8012ca8:	e015      	b.n	8012cd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cac:	695a      	ldr	r2, [r3, #20]
 8012cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d10c      	bne.n	8012cd0 <ip4_reass+0xdc>
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb8:	699a      	ldr	r2, [r3, #24]
 8012cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbc:	691b      	ldr	r3, [r3, #16]
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d106      	bne.n	8012cd0 <ip4_reass+0xdc>
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc4:	899a      	ldrh	r2, [r3, #12]
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	889b      	ldrh	r3, [r3, #4]
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d006      	beq.n	8012cde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8012cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d1e6      	bne.n	8012caa <ip4_reass+0xb6>
 8012cdc:	e000      	b.n	8012ce0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012cde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d109      	bne.n	8012cfa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ce6:	8c3b      	ldrh	r3, [r7, #32]
 8012ce8:	4619      	mov	r1, r3
 8012cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cec:	f7ff fdb0 	bl	8012850 <ip_reass_enqueue_new_datagram>
 8012cf0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d11c      	bne.n	8012d32 <ip4_reass+0x13e>
      goto nullreturn;
 8012cf8:	e109      	b.n	8012f0e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfc:	88db      	ldrh	r3, [r3, #6]
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f6 fb59 	bl	80093b8 <lwip_htons>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d110      	bne.n	8012d32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d12:	89db      	ldrh	r3, [r3, #14]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7f6 fb4f 	bl	80093b8 <lwip_htons>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d26:	3308      	adds	r3, #8
 8012d28:	2214      	movs	r2, #20
 8012d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f001 f925 	bl	8013f7c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d34:	88db      	ldrh	r3, [r3, #6]
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	f003 0320 	and.w	r3, r3, #32
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	bf0c      	ite	eq
 8012d40:	2301      	moveq	r3, #1
 8012d42:	2300      	movne	r3, #0
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00e      	beq.n	8012d6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d52:	4413      	add	r3, r2
 8012d54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012d56:	8b7a      	ldrh	r2, [r7, #26]
 8012d58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	f0c0 80a0 	bcc.w	8012ea0 <ip4_reass+0x2ac>
 8012d60:	8b7b      	ldrh	r3, [r7, #26]
 8012d62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012d66:	4293      	cmp	r3, r2
 8012d68:	f200 809a 	bhi.w	8012ea0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012d6c:	69fa      	ldr	r2, [r7, #28]
 8012d6e:	6879      	ldr	r1, [r7, #4]
 8012d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d72:	f7ff fdd5 	bl	8012920 <ip_reass_chain_frag_into_datagram_and_validate>
 8012d76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7e:	f000 8091 	beq.w	8012ea4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012d82:	4b5b      	ldr	r3, [pc, #364]	; (8012ef0 <ip4_reass+0x2fc>)
 8012d84:	881a      	ldrh	r2, [r3, #0]
 8012d86:	8c3b      	ldrh	r3, [r7, #32]
 8012d88:	4413      	add	r3, r2
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	4b58      	ldr	r3, [pc, #352]	; (8012ef0 <ip4_reass+0x2fc>)
 8012d8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d00d      	beq.n	8012db2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d9a:	4413      	add	r3, r2
 8012d9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da0:	8a7a      	ldrh	r2, [r7, #18]
 8012da2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da6:	7f9b      	ldrb	r3, [r3, #30]
 8012da8:	f043 0301 	orr.w	r3, r3, #1
 8012dac:	b2da      	uxtb	r2, r3
 8012dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d171      	bne.n	8012e9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dba:	8b9b      	ldrh	r3, [r3, #28]
 8012dbc:	3314      	adds	r3, #20
 8012dbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	3308      	adds	r3, #8
 8012dd6:	2214      	movs	r2, #20
 8012dd8:	4619      	mov	r1, r3
 8012dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ddc:	f001 f8ce 	bl	8013f7c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012de0:	8a3b      	ldrh	r3, [r7, #16]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f6 fae8 	bl	80093b8 <lwip_htons>
 8012de8:	4603      	mov	r3, r0
 8012dea:	461a      	mov	r2, r3
 8012dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df2:	2200      	movs	r2, #0
 8012df4:	719a      	strb	r2, [r3, #6]
 8012df6:	2200      	movs	r2, #0
 8012df8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	729a      	strb	r2, [r3, #10]
 8012e00:	2200      	movs	r2, #0
 8012e02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012e0a:	e00d      	b.n	8012e28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012e12:	2114      	movs	r1, #20
 8012e14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e16:	f7f7 fcfd 	bl	800a814 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012e1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f7f7 fe41 	bl	800aaa4 <pbuf_cat>
      r = iprh->next_pbuf;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1ee      	bne.n	8012e0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012e2e:	4b31      	ldr	r3, [pc, #196]	; (8012ef4 <ip4_reass+0x300>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d102      	bne.n	8012e3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e3c:	e010      	b.n	8012e60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e3e:	4b2d      	ldr	r3, [pc, #180]	; (8012ef4 <ip4_reass+0x300>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e44:	e007      	b.n	8012e56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d006      	beq.n	8012e5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d1f4      	bne.n	8012e46 <ip4_reass+0x252>
 8012e5c:	e000      	b.n	8012e60 <ip4_reass+0x26c>
          break;
 8012e5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e64:	f7ff fd2e 	bl	80128c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f7f7 fde1 	bl	800aa30 <pbuf_clen>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012e72:	4b1f      	ldr	r3, [pc, #124]	; (8012ef0 <ip4_reass+0x2fc>)
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	8c3a      	ldrh	r2, [r7, #32]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d906      	bls.n	8012e8a <ip4_reass+0x296>
 8012e7c:	4b1e      	ldr	r3, [pc, #120]	; (8012ef8 <ip4_reass+0x304>)
 8012e7e:	f240 229b 	movw	r2, #667	; 0x29b
 8012e82:	491e      	ldr	r1, [pc, #120]	; (8012efc <ip4_reass+0x308>)
 8012e84:	481e      	ldr	r0, [pc, #120]	; (8012f00 <ip4_reass+0x30c>)
 8012e86:	f001 f939 	bl	80140fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012e8a:	4b19      	ldr	r3, [pc, #100]	; (8012ef0 <ip4_reass+0x2fc>)
 8012e8c:	881a      	ldrh	r2, [r3, #0]
 8012e8e:	8c3b      	ldrh	r3, [r7, #32]
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	4b16      	ldr	r3, [pc, #88]	; (8012ef0 <ip4_reass+0x2fc>)
 8012e96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	e03c      	b.n	8012f16 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	e03a      	b.n	8012f16 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012ea0:	bf00      	nop
 8012ea2:	e000      	b.n	8012ea6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012ea4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d106      	bne.n	8012eba <ip4_reass+0x2c6>
 8012eac:	4b12      	ldr	r3, [pc, #72]	; (8012ef8 <ip4_reass+0x304>)
 8012eae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012eb2:	4914      	ldr	r1, [pc, #80]	; (8012f04 <ip4_reass+0x310>)
 8012eb4:	4812      	ldr	r0, [pc, #72]	; (8012f00 <ip4_reass+0x30c>)
 8012eb6:	f001 f921 	bl	80140fc <iprintf>
  if (ipr->p == NULL) {
 8012eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d124      	bne.n	8012f0c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012ec2:	4b0c      	ldr	r3, [pc, #48]	; (8012ef4 <ip4_reass+0x300>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d006      	beq.n	8012eda <ip4_reass+0x2e6>
 8012ecc:	4b0a      	ldr	r3, [pc, #40]	; (8012ef8 <ip4_reass+0x304>)
 8012ece:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012ed2:	490d      	ldr	r1, [pc, #52]	; (8012f08 <ip4_reass+0x314>)
 8012ed4:	480a      	ldr	r0, [pc, #40]	; (8012f00 <ip4_reass+0x30c>)
 8012ed6:	f001 f911 	bl	80140fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012eda:	2100      	movs	r1, #0
 8012edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ede:	f7ff fcf1 	bl	80128c4 <ip_reass_dequeue_datagram>
 8012ee2:	e014      	b.n	8012f0e <ip4_reass+0x31a>
    goto nullreturn;
 8012ee4:	bf00      	nop
 8012ee6:	e012      	b.n	8012f0e <ip4_reass+0x31a>
    goto nullreturn;
 8012ee8:	bf00      	nop
 8012eea:	e010      	b.n	8012f0e <ip4_reass+0x31a>
      goto nullreturn;
 8012eec:	bf00      	nop
 8012eee:	e00e      	b.n	8012f0e <ip4_reass+0x31a>
 8012ef0:	200004e4 	.word	0x200004e4
 8012ef4:	200004e0 	.word	0x200004e0
 8012ef8:	08017730 	.word	0x08017730
 8012efc:	080178a0 	.word	0x080178a0
 8012f00:	08017778 	.word	0x08017778
 8012f04:	080178bc 	.word	0x080178bc
 8012f08:	080178c8 	.word	0x080178c8
  }

nullreturn:
 8012f0c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f7f7 fd06 	bl	800a920 <pbuf_free>
  return NULL;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3738      	adds	r7, #56	; 0x38
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop

08012f20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012f24:	2005      	movs	r0, #5
 8012f26:	f7f6 fe9d 	bl	8009c64 <memp_malloc>
 8012f2a:	4603      	mov	r3, r0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <ip_frag_free_pbuf_custom_ref+0x1c>
 8012f3e:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012f40:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012f44:	4906      	ldr	r1, [pc, #24]	; (8012f60 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012f46:	4807      	ldr	r0, [pc, #28]	; (8012f64 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012f48:	f001 f8d8 	bl	80140fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012f4c:	6879      	ldr	r1, [r7, #4]
 8012f4e:	2005      	movs	r0, #5
 8012f50:	f7f6 fed4 	bl	8009cfc <memp_free>
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	08017730 	.word	0x08017730
 8012f60:	080178e8 	.word	0x080178e8
 8012f64:	08017778 	.word	0x08017778

08012f68 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d106      	bne.n	8012f88 <ipfrag_free_pbuf_custom+0x20>
 8012f7a:	4b11      	ldr	r3, [pc, #68]	; (8012fc0 <ipfrag_free_pbuf_custom+0x58>)
 8012f7c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012f80:	4910      	ldr	r1, [pc, #64]	; (8012fc4 <ipfrag_free_pbuf_custom+0x5c>)
 8012f82:	4811      	ldr	r0, [pc, #68]	; (8012fc8 <ipfrag_free_pbuf_custom+0x60>)
 8012f84:	f001 f8ba 	bl	80140fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d006      	beq.n	8012f9e <ipfrag_free_pbuf_custom+0x36>
 8012f90:	4b0b      	ldr	r3, [pc, #44]	; (8012fc0 <ipfrag_free_pbuf_custom+0x58>)
 8012f92:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012f96:	490d      	ldr	r1, [pc, #52]	; (8012fcc <ipfrag_free_pbuf_custom+0x64>)
 8012f98:	480b      	ldr	r0, [pc, #44]	; (8012fc8 <ipfrag_free_pbuf_custom+0x60>)
 8012f9a:	f001 f8af 	bl	80140fc <iprintf>
  if (pcr->original != NULL) {
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	695b      	ldr	r3, [r3, #20]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d004      	beq.n	8012fb0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	695b      	ldr	r3, [r3, #20]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7f7 fcb8 	bl	800a920 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012fb0:	68f8      	ldr	r0, [r7, #12]
 8012fb2:	f7ff ffbd 	bl	8012f30 <ip_frag_free_pbuf_custom_ref>
}
 8012fb6:	bf00      	nop
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	08017730 	.word	0x08017730
 8012fc4:	080178f4 	.word	0x080178f4
 8012fc8:	08017778 	.word	0x08017778
 8012fcc:	08017900 	.word	0x08017900

08012fd0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b094      	sub	sp, #80	; 0x50
 8012fd4:	af02      	add	r7, sp, #8
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012fe6:	3b14      	subs	r3, #20
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	da00      	bge.n	8012fee <ip4_frag+0x1e>
 8012fec:	3307      	adds	r3, #7
 8012fee:	10db      	asrs	r3, r3, #3
 8012ff0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012ff2:	2314      	movs	r3, #20
 8012ff4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ffe:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	f003 030f 	and.w	r3, r3, #15
 8013008:	b2db      	uxtb	r3, r3
 801300a:	009b      	lsls	r3, r3, #2
 801300c:	b2db      	uxtb	r3, r3
 801300e:	2b14      	cmp	r3, #20
 8013010:	d002      	beq.n	8013018 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013012:	f06f 0305 	mvn.w	r3, #5
 8013016:	e110      	b.n	801323a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	895b      	ldrh	r3, [r3, #10]
 801301c:	2b13      	cmp	r3, #19
 801301e:	d809      	bhi.n	8013034 <ip4_frag+0x64>
 8013020:	4b88      	ldr	r3, [pc, #544]	; (8013244 <ip4_frag+0x274>)
 8013022:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013026:	4988      	ldr	r1, [pc, #544]	; (8013248 <ip4_frag+0x278>)
 8013028:	4888      	ldr	r0, [pc, #544]	; (801324c <ip4_frag+0x27c>)
 801302a:	f001 f867 	bl	80140fc <iprintf>
 801302e:	f06f 0305 	mvn.w	r3, #5
 8013032:	e102      	b.n	801323a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013036:	88db      	ldrh	r3, [r3, #6]
 8013038:	b29b      	uxth	r3, r3
 801303a:	4618      	mov	r0, r3
 801303c:	f7f6 f9bc 	bl	80093b8 <lwip_htons>
 8013040:	4603      	mov	r3, r0
 8013042:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013044:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801304a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801304e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013054:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	3b14      	subs	r3, #20
 801305c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013060:	e0e1      	b.n	8013226 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013064:	00db      	lsls	r3, r3, #3
 8013066:	b29b      	uxth	r3, r3
 8013068:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801306c:	4293      	cmp	r3, r2
 801306e:	bf28      	it	cs
 8013070:	4613      	movcs	r3, r2
 8013072:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013074:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013078:	2114      	movs	r1, #20
 801307a:	200e      	movs	r0, #14
 801307c:	f7f7 f96c 	bl	800a358 <pbuf_alloc>
 8013080:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	2b00      	cmp	r3, #0
 8013086:	f000 80d5 	beq.w	8013234 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	895b      	ldrh	r3, [r3, #10]
 801308e:	2b13      	cmp	r3, #19
 8013090:	d806      	bhi.n	80130a0 <ip4_frag+0xd0>
 8013092:	4b6c      	ldr	r3, [pc, #432]	; (8013244 <ip4_frag+0x274>)
 8013094:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013098:	496d      	ldr	r1, [pc, #436]	; (8013250 <ip4_frag+0x280>)
 801309a:	486c      	ldr	r0, [pc, #432]	; (801324c <ip4_frag+0x27c>)
 801309c:	f001 f82e 	bl	80140fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	685b      	ldr	r3, [r3, #4]
 80130a4:	2214      	movs	r2, #20
 80130a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80130a8:	4618      	mov	r0, r3
 80130aa:	f000 ff67 	bl	8013f7c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80130ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b0:	685b      	ldr	r3, [r3, #4]
 80130b2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80130b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80130ba:	e064      	b.n	8013186 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	895a      	ldrh	r2, [r3, #10]
 80130c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	895b      	ldrh	r3, [r3, #10]
 80130ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d906      	bls.n	80130de <ip4_frag+0x10e>
 80130d0:	4b5c      	ldr	r3, [pc, #368]	; (8013244 <ip4_frag+0x274>)
 80130d2:	f240 322d 	movw	r2, #813	; 0x32d
 80130d6:	495f      	ldr	r1, [pc, #380]	; (8013254 <ip4_frag+0x284>)
 80130d8:	485c      	ldr	r0, [pc, #368]	; (801324c <ip4_frag+0x27c>)
 80130da:	f001 f80f 	bl	80140fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80130de:	8bfa      	ldrh	r2, [r7, #30]
 80130e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80130e4:	4293      	cmp	r3, r2
 80130e6:	bf28      	it	cs
 80130e8:	4613      	movcs	r3, r2
 80130ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80130ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d105      	bne.n	8013102 <ip4_frag+0x132>
        poff = 0;
 80130f6:	2300      	movs	r3, #0
 80130f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	60fb      	str	r3, [r7, #12]
        continue;
 8013100:	e041      	b.n	8013186 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013102:	f7ff ff0d 	bl	8012f20 <ip_frag_alloc_pbuf_custom_ref>
 8013106:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d103      	bne.n	8013116 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801310e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013110:	f7f7 fc06 	bl	800a920 <pbuf_free>
        goto memerr;
 8013114:	e08f      	b.n	8013236 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013116:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801311c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801311e:	4413      	add	r3, r2
 8013120:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013124:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013128:	9201      	str	r2, [sp, #4]
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	4603      	mov	r3, r0
 801312e:	2241      	movs	r2, #65	; 0x41
 8013130:	2000      	movs	r0, #0
 8013132:	f7f7 fa3b 	bl	800a5ac <pbuf_alloced_custom>
 8013136:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d106      	bne.n	801314c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801313e:	69b8      	ldr	r0, [r7, #24]
 8013140:	f7ff fef6 	bl	8012f30 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013146:	f7f7 fbeb 	bl	800a920 <pbuf_free>
        goto memerr;
 801314a:	e074      	b.n	8013236 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801314c:	68f8      	ldr	r0, [r7, #12]
 801314e:	f7f7 fc87 	bl	800aa60 <pbuf_ref>
      pcr->original = p;
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	68fa      	ldr	r2, [r7, #12]
 8013156:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	4a3f      	ldr	r2, [pc, #252]	; (8013258 <ip4_frag+0x288>)
 801315c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801315e:	6979      	ldr	r1, [r7, #20]
 8013160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013162:	f7f7 fc9f 	bl	800aaa4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013166:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801316a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801316e:	1ad3      	subs	r3, r2, r3
 8013170:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013174:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013178:	2b00      	cmp	r3, #0
 801317a:	d004      	beq.n	8013186 <ip4_frag+0x1b6>
        poff = 0;
 801317c:	2300      	movs	r3, #0
 801317e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013186:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801318a:	2b00      	cmp	r3, #0
 801318c:	d196      	bne.n	80130bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801318e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013190:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013194:	4413      	add	r3, r2
 8013196:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801319c:	f1a3 0213 	sub.w	r2, r3, #19
 80131a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131a4:	429a      	cmp	r2, r3
 80131a6:	bfcc      	ite	gt
 80131a8:	2301      	movgt	r3, #1
 80131aa:	2300      	movle	r3, #0
 80131ac:	b2db      	uxtb	r3, r3
 80131ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80131b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80131b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d002      	beq.n	80131c6 <ip4_frag+0x1f6>
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d003      	beq.n	80131ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80131c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80131cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80131ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f6 f8f1 	bl	80093b8 <lwip_htons>
 80131d6:	4603      	mov	r3, r0
 80131d8:	461a      	mov	r2, r3
 80131da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80131de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80131e0:	3314      	adds	r3, #20
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7f6 f8e7 	bl	80093b8 <lwip_htons>
 80131ea:	4603      	mov	r3, r0
 80131ec:	461a      	mov	r2, r3
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80131f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f4:	2200      	movs	r2, #0
 80131f6:	729a      	strb	r2, [r3, #10]
 80131f8:	2200      	movs	r2, #0
 80131fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	695b      	ldr	r3, [r3, #20]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013204:	68b8      	ldr	r0, [r7, #8]
 8013206:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801320a:	f7f7 fb89 	bl	800a920 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801320e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013212:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801321a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801321e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013220:	4413      	add	r3, r2
 8013222:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013226:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801322a:	2b00      	cmp	r3, #0
 801322c:	f47f af19 	bne.w	8013062 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013230:	2300      	movs	r3, #0
 8013232:	e002      	b.n	801323a <ip4_frag+0x26a>
      goto memerr;
 8013234:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013236:	f04f 33ff 	mov.w	r3, #4294967295
}
 801323a:	4618      	mov	r0, r3
 801323c:	3748      	adds	r7, #72	; 0x48
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}
 8013242:	bf00      	nop
 8013244:	08017730 	.word	0x08017730
 8013248:	0801790c 	.word	0x0801790c
 801324c:	08017778 	.word	0x08017778
 8013250:	08017928 	.word	0x08017928
 8013254:	08017948 	.word	0x08017948
 8013258:	08012f69 	.word	0x08012f69

0801325c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013266:	230e      	movs	r3, #14
 8013268:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	895b      	ldrh	r3, [r3, #10]
 801326e:	2b0e      	cmp	r3, #14
 8013270:	d96e      	bls.n	8013350 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	7bdb      	ldrb	r3, [r3, #15]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d106      	bne.n	8013288 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013280:	3301      	adds	r3, #1
 8013282:	b2da      	uxtb	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	7b1a      	ldrb	r2, [r3, #12]
 8013292:	7b5b      	ldrb	r3, [r3, #13]
 8013294:	021b      	lsls	r3, r3, #8
 8013296:	4313      	orrs	r3, r2
 8013298:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f003 0301 	and.w	r3, r3, #1
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d023      	beq.n	80132ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	781b      	ldrb	r3, [r3, #0]
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d10f      	bne.n	80132ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	785b      	ldrb	r3, [r3, #1]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d11b      	bne.n	80132ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80132ba:	2b5e      	cmp	r3, #94	; 0x5e
 80132bc:	d117      	bne.n	80132ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7b5b      	ldrb	r3, [r3, #13]
 80132c2:	f043 0310 	orr.w	r3, r3, #16
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	735a      	strb	r2, [r3, #13]
 80132cc:	e00f      	b.n	80132ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	2206      	movs	r2, #6
 80132d2:	4928      	ldr	r1, [pc, #160]	; (8013374 <ethernet_input+0x118>)
 80132d4:	4618      	mov	r0, r3
 80132d6:	f000 fe43 	bl	8013f60 <memcmp>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d106      	bne.n	80132ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	7b5b      	ldrb	r3, [r3, #13]
 80132e4:	f043 0308 	orr.w	r3, r3, #8
 80132e8:	b2da      	uxtb	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80132ee:	89fb      	ldrh	r3, [r7, #14]
 80132f0:	2b08      	cmp	r3, #8
 80132f2:	d003      	beq.n	80132fc <ethernet_input+0xa0>
 80132f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80132f8:	d014      	beq.n	8013324 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80132fa:	e032      	b.n	8013362 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013302:	f003 0308 	and.w	r3, r3, #8
 8013306:	2b00      	cmp	r3, #0
 8013308:	d024      	beq.n	8013354 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801330a:	8afb      	ldrh	r3, [r7, #22]
 801330c:	4619      	mov	r1, r3
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f7f7 fa80 	bl	800a814 <pbuf_remove_header>
 8013314:	4603      	mov	r3, r0
 8013316:	2b00      	cmp	r3, #0
 8013318:	d11e      	bne.n	8013358 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801331a:	6839      	ldr	r1, [r7, #0]
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7fe ff27 	bl	8012170 <ip4_input>
      break;
 8013322:	e013      	b.n	801334c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801332a:	f003 0308 	and.w	r3, r3, #8
 801332e:	2b00      	cmp	r3, #0
 8013330:	d014      	beq.n	801335c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013332:	8afb      	ldrh	r3, [r7, #22]
 8013334:	4619      	mov	r1, r3
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7f7 fa6c 	bl	800a814 <pbuf_remove_header>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d10e      	bne.n	8013360 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013342:	6839      	ldr	r1, [r7, #0]
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7fe f8c7 	bl	80114d8 <etharp_input>
      break;
 801334a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801334c:	2300      	movs	r3, #0
 801334e:	e00c      	b.n	801336a <ethernet_input+0x10e>
    goto free_and_return;
 8013350:	bf00      	nop
 8013352:	e006      	b.n	8013362 <ethernet_input+0x106>
        goto free_and_return;
 8013354:	bf00      	nop
 8013356:	e004      	b.n	8013362 <ethernet_input+0x106>
        goto free_and_return;
 8013358:	bf00      	nop
 801335a:	e002      	b.n	8013362 <ethernet_input+0x106>
        goto free_and_return;
 801335c:	bf00      	nop
 801335e:	e000      	b.n	8013362 <ethernet_input+0x106>
        goto free_and_return;
 8013360:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7f7 fadc 	bl	800a920 <pbuf_free>
  return ERR_OK;
 8013368:	2300      	movs	r3, #0
}
 801336a:	4618      	mov	r0, r3
 801336c:	3718      	adds	r7, #24
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	08017b20 	.word	0x08017b20

08013378 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013378:	b580      	push	{r7, lr}
 801337a:	b086      	sub	sp, #24
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
 8013384:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013386:	8c3b      	ldrh	r3, [r7, #32]
 8013388:	4618      	mov	r0, r3
 801338a:	f7f6 f815 	bl	80093b8 <lwip_htons>
 801338e:	4603      	mov	r3, r0
 8013390:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013392:	210e      	movs	r1, #14
 8013394:	68b8      	ldr	r0, [r7, #8]
 8013396:	f7f7 fa2d 	bl	800a7f4 <pbuf_add_header>
 801339a:	4603      	mov	r3, r0
 801339c:	2b00      	cmp	r3, #0
 801339e:	d125      	bne.n	80133ec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	8afa      	ldrh	r2, [r7, #22]
 80133aa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	2206      	movs	r2, #6
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	4618      	mov	r0, r3
 80133b4:	f000 fde2 	bl	8013f7c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	3306      	adds	r3, #6
 80133bc:	2206      	movs	r2, #6
 80133be:	6879      	ldr	r1, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 fddb 	bl	8013f7c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80133cc:	2b06      	cmp	r3, #6
 80133ce:	d006      	beq.n	80133de <ethernet_output+0x66>
 80133d0:	4b0a      	ldr	r3, [pc, #40]	; (80133fc <ethernet_output+0x84>)
 80133d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80133d6:	490a      	ldr	r1, [pc, #40]	; (8013400 <ethernet_output+0x88>)
 80133d8:	480a      	ldr	r0, [pc, #40]	; (8013404 <ethernet_output+0x8c>)
 80133da:	f000 fe8f 	bl	80140fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	699b      	ldr	r3, [r3, #24]
 80133e2:	68b9      	ldr	r1, [r7, #8]
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	4798      	blx	r3
 80133e8:	4603      	mov	r3, r0
 80133ea:	e002      	b.n	80133f2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80133ec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80133ee:	f06f 0301 	mvn.w	r3, #1
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3718      	adds	r7, #24
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	08017958 	.word	0x08017958
 8013400:	08017990 	.word	0x08017990
 8013404:	080179c4 	.word	0x080179c4

08013408 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801340c:	2200      	movs	r2, #0
 801340e:	4912      	ldr	r1, [pc, #72]	; (8013458 <MX_USB_DEVICE_Init+0x50>)
 8013410:	4812      	ldr	r0, [pc, #72]	; (801345c <MX_USB_DEVICE_Init+0x54>)
 8013412:	f7f4 fe93 	bl	800813c <USBD_Init>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d001      	beq.n	8013420 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801341c:	f7ed faa2 	bl	8000964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013420:	490f      	ldr	r1, [pc, #60]	; (8013460 <MX_USB_DEVICE_Init+0x58>)
 8013422:	480e      	ldr	r0, [pc, #56]	; (801345c <MX_USB_DEVICE_Init+0x54>)
 8013424:	f7f4 fec0 	bl	80081a8 <USBD_RegisterClass>
 8013428:	4603      	mov	r3, r0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801342e:	f7ed fa99 	bl	8000964 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013432:	490c      	ldr	r1, [pc, #48]	; (8013464 <MX_USB_DEVICE_Init+0x5c>)
 8013434:	4809      	ldr	r0, [pc, #36]	; (801345c <MX_USB_DEVICE_Init+0x54>)
 8013436:	f7f4 fde5 	bl	8008004 <USBD_CDC_RegisterInterface>
 801343a:	4603      	mov	r3, r0
 801343c:	2b00      	cmp	r3, #0
 801343e:	d001      	beq.n	8013444 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013440:	f7ed fa90 	bl	8000964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013444:	4805      	ldr	r0, [pc, #20]	; (801345c <MX_USB_DEVICE_Init+0x54>)
 8013446:	f7f4 fed0 	bl	80081ea <USBD_Start>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d001      	beq.n	8013454 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013450:	f7ed fa88 	bl	8000964 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013454:	bf00      	nop
 8013456:	bd80      	pop	{r7, pc}
 8013458:	2000013c 	.word	0x2000013c
 801345c:	20006cfc 	.word	0x20006cfc
 8013460:	20000018 	.word	0x20000018
 8013464:	20000128 	.word	0x20000128

08013468 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801346c:	2200      	movs	r2, #0
 801346e:	4905      	ldr	r1, [pc, #20]	; (8013484 <CDC_Init_FS+0x1c>)
 8013470:	4805      	ldr	r0, [pc, #20]	; (8013488 <CDC_Init_FS+0x20>)
 8013472:	f7f4 fddc 	bl	800802e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013476:	4905      	ldr	r1, [pc, #20]	; (801348c <CDC_Init_FS+0x24>)
 8013478:	4803      	ldr	r0, [pc, #12]	; (8013488 <CDC_Init_FS+0x20>)
 801347a:	f7f4 fdf1 	bl	8008060 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801347e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013480:	4618      	mov	r0, r3
 8013482:	bd80      	pop	{r7, pc}
 8013484:	200077cc 	.word	0x200077cc
 8013488:	20006cfc 	.word	0x20006cfc
 801348c:	20006fcc 	.word	0x20006fcc

08013490 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013490:	b480      	push	{r7}
 8013492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013494:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013496:	4618      	mov	r0, r3
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr

080134a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	6039      	str	r1, [r7, #0]
 80134aa:	71fb      	strb	r3, [r7, #7]
 80134ac:	4613      	mov	r3, r2
 80134ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80134b0:	79fb      	ldrb	r3, [r7, #7]
 80134b2:	2b23      	cmp	r3, #35	; 0x23
 80134b4:	d84a      	bhi.n	801354c <CDC_Control_FS+0xac>
 80134b6:	a201      	add	r2, pc, #4	; (adr r2, 80134bc <CDC_Control_FS+0x1c>)
 80134b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134bc:	0801354d 	.word	0x0801354d
 80134c0:	0801354d 	.word	0x0801354d
 80134c4:	0801354d 	.word	0x0801354d
 80134c8:	0801354d 	.word	0x0801354d
 80134cc:	0801354d 	.word	0x0801354d
 80134d0:	0801354d 	.word	0x0801354d
 80134d4:	0801354d 	.word	0x0801354d
 80134d8:	0801354d 	.word	0x0801354d
 80134dc:	0801354d 	.word	0x0801354d
 80134e0:	0801354d 	.word	0x0801354d
 80134e4:	0801354d 	.word	0x0801354d
 80134e8:	0801354d 	.word	0x0801354d
 80134ec:	0801354d 	.word	0x0801354d
 80134f0:	0801354d 	.word	0x0801354d
 80134f4:	0801354d 	.word	0x0801354d
 80134f8:	0801354d 	.word	0x0801354d
 80134fc:	0801354d 	.word	0x0801354d
 8013500:	0801354d 	.word	0x0801354d
 8013504:	0801354d 	.word	0x0801354d
 8013508:	0801354d 	.word	0x0801354d
 801350c:	0801354d 	.word	0x0801354d
 8013510:	0801354d 	.word	0x0801354d
 8013514:	0801354d 	.word	0x0801354d
 8013518:	0801354d 	.word	0x0801354d
 801351c:	0801354d 	.word	0x0801354d
 8013520:	0801354d 	.word	0x0801354d
 8013524:	0801354d 	.word	0x0801354d
 8013528:	0801354d 	.word	0x0801354d
 801352c:	0801354d 	.word	0x0801354d
 8013530:	0801354d 	.word	0x0801354d
 8013534:	0801354d 	.word	0x0801354d
 8013538:	0801354d 	.word	0x0801354d
 801353c:	0801354d 	.word	0x0801354d
 8013540:	0801354d 	.word	0x0801354d
 8013544:	0801354d 	.word	0x0801354d
 8013548:	0801354d 	.word	0x0801354d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801354c:	bf00      	nop
  }

  return (USBD_OK);
 801354e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013550:	4618      	mov	r0, r3
 8013552:	370c      	adds	r7, #12
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr

0801355c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013566:	6879      	ldr	r1, [r7, #4]
 8013568:	4805      	ldr	r0, [pc, #20]	; (8013580 <CDC_Receive_FS+0x24>)
 801356a:	f7f4 fd79 	bl	8008060 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801356e:	4804      	ldr	r0, [pc, #16]	; (8013580 <CDC_Receive_FS+0x24>)
 8013570:	f7f4 fdba 	bl	80080e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013574:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013576:	4618      	mov	r0, r3
 8013578:	3708      	adds	r7, #8
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	20006cfc 	.word	0x20006cfc

08013584 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	460b      	mov	r3, r1
 801358e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013590:	2300      	movs	r3, #0
 8013592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013594:	4b0d      	ldr	r3, [pc, #52]	; (80135cc <CDC_Transmit_FS+0x48>)
 8013596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801359a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80135a6:	2301      	movs	r3, #1
 80135a8:	e00b      	b.n	80135c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80135aa:	887b      	ldrh	r3, [r7, #2]
 80135ac:	461a      	mov	r2, r3
 80135ae:	6879      	ldr	r1, [r7, #4]
 80135b0:	4806      	ldr	r0, [pc, #24]	; (80135cc <CDC_Transmit_FS+0x48>)
 80135b2:	f7f4 fd3c 	bl	800802e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80135b6:	4805      	ldr	r0, [pc, #20]	; (80135cc <CDC_Transmit_FS+0x48>)
 80135b8:	f7f4 fd66 	bl	8008088 <USBD_CDC_TransmitPacket>
 80135bc:	4603      	mov	r3, r0
 80135be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80135c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	20006cfc 	.word	0x20006cfc

080135d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b087      	sub	sp, #28
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	4613      	mov	r3, r2
 80135dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80135de:	2300      	movs	r3, #0
 80135e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80135e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	371c      	adds	r7, #28
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
	...

080135f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	4603      	mov	r3, r0
 80135fc:	6039      	str	r1, [r7, #0]
 80135fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	2212      	movs	r2, #18
 8013604:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013606:	4b03      	ldr	r3, [pc, #12]	; (8013614 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013608:	4618      	mov	r0, r3
 801360a:	370c      	adds	r7, #12
 801360c:	46bd      	mov	sp, r7
 801360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013612:	4770      	bx	lr
 8013614:	2000015c 	.word	0x2000015c

08013618 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013618:	b480      	push	{r7}
 801361a:	b083      	sub	sp, #12
 801361c:	af00      	add	r7, sp, #0
 801361e:	4603      	mov	r3, r0
 8013620:	6039      	str	r1, [r7, #0]
 8013622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	2204      	movs	r2, #4
 8013628:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801362a:	4b03      	ldr	r3, [pc, #12]	; (8013638 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801362c:	4618      	mov	r0, r3
 801362e:	370c      	adds	r7, #12
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr
 8013638:	2000017c 	.word	0x2000017c

0801363c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	4603      	mov	r3, r0
 8013644:	6039      	str	r1, [r7, #0]
 8013646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013648:	79fb      	ldrb	r3, [r7, #7]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d105      	bne.n	801365a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801364e:	683a      	ldr	r2, [r7, #0]
 8013650:	4907      	ldr	r1, [pc, #28]	; (8013670 <USBD_FS_ProductStrDescriptor+0x34>)
 8013652:	4808      	ldr	r0, [pc, #32]	; (8013674 <USBD_FS_ProductStrDescriptor+0x38>)
 8013654:	f7f5 fdd0 	bl	80091f8 <USBD_GetString>
 8013658:	e004      	b.n	8013664 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801365a:	683a      	ldr	r2, [r7, #0]
 801365c:	4904      	ldr	r1, [pc, #16]	; (8013670 <USBD_FS_ProductStrDescriptor+0x34>)
 801365e:	4805      	ldr	r0, [pc, #20]	; (8013674 <USBD_FS_ProductStrDescriptor+0x38>)
 8013660:	f7f5 fdca 	bl	80091f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013664:	4b02      	ldr	r3, [pc, #8]	; (8013670 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013666:	4618      	mov	r0, r3
 8013668:	3708      	adds	r7, #8
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	20007fcc 	.word	0x20007fcc
 8013674:	080179ec 	.word	0x080179ec

08013678 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	4603      	mov	r3, r0
 8013680:	6039      	str	r1, [r7, #0]
 8013682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013684:	683a      	ldr	r2, [r7, #0]
 8013686:	4904      	ldr	r1, [pc, #16]	; (8013698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013688:	4804      	ldr	r0, [pc, #16]	; (801369c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801368a:	f7f5 fdb5 	bl	80091f8 <USBD_GetString>
  return USBD_StrDesc;
 801368e:	4b02      	ldr	r3, [pc, #8]	; (8013698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013690:	4618      	mov	r0, r3
 8013692:	3708      	adds	r7, #8
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	20007fcc 	.word	0x20007fcc
 801369c:	08017a04 	.word	0x08017a04

080136a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	4603      	mov	r3, r0
 80136a8:	6039      	str	r1, [r7, #0]
 80136aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	221a      	movs	r2, #26
 80136b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80136b2:	f000 f855 	bl	8013760 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80136b6:	4b02      	ldr	r3, [pc, #8]	; (80136c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3708      	adds	r7, #8
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	20000180 	.word	0x20000180

080136c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	4603      	mov	r3, r0
 80136cc:	6039      	str	r1, [r7, #0]
 80136ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80136d0:	79fb      	ldrb	r3, [r7, #7]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d105      	bne.n	80136e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80136d6:	683a      	ldr	r2, [r7, #0]
 80136d8:	4907      	ldr	r1, [pc, #28]	; (80136f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80136da:	4808      	ldr	r0, [pc, #32]	; (80136fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80136dc:	f7f5 fd8c 	bl	80091f8 <USBD_GetString>
 80136e0:	e004      	b.n	80136ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80136e2:	683a      	ldr	r2, [r7, #0]
 80136e4:	4904      	ldr	r1, [pc, #16]	; (80136f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80136e6:	4805      	ldr	r0, [pc, #20]	; (80136fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80136e8:	f7f5 fd86 	bl	80091f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80136ec:	4b02      	ldr	r3, [pc, #8]	; (80136f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	20007fcc 	.word	0x20007fcc
 80136fc:	08017a18 	.word	0x08017a18

08013700 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	4603      	mov	r3, r0
 8013708:	6039      	str	r1, [r7, #0]
 801370a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801370c:	79fb      	ldrb	r3, [r7, #7]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d105      	bne.n	801371e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013712:	683a      	ldr	r2, [r7, #0]
 8013714:	4907      	ldr	r1, [pc, #28]	; (8013734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013716:	4808      	ldr	r0, [pc, #32]	; (8013738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013718:	f7f5 fd6e 	bl	80091f8 <USBD_GetString>
 801371c:	e004      	b.n	8013728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801371e:	683a      	ldr	r2, [r7, #0]
 8013720:	4904      	ldr	r1, [pc, #16]	; (8013734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013722:	4805      	ldr	r0, [pc, #20]	; (8013738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013724:	f7f5 fd68 	bl	80091f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013728:	4b02      	ldr	r3, [pc, #8]	; (8013734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801372a:	4618      	mov	r0, r3
 801372c:	3708      	adds	r7, #8
 801372e:	46bd      	mov	sp, r7
 8013730:	bd80      	pop	{r7, pc}
 8013732:	bf00      	nop
 8013734:	20007fcc 	.word	0x20007fcc
 8013738:	08017a24 	.word	0x08017a24

0801373c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	4603      	mov	r3, r0
 8013744:	6039      	str	r1, [r7, #0]
 8013746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	220c      	movs	r2, #12
 801374c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801374e:	4b03      	ldr	r3, [pc, #12]	; (801375c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013750:	4618      	mov	r0, r3
 8013752:	370c      	adds	r7, #12
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr
 801375c:	20000170 	.word	0x20000170

08013760 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013766:	4b0f      	ldr	r3, [pc, #60]	; (80137a4 <Get_SerialNum+0x44>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801376c:	4b0e      	ldr	r3, [pc, #56]	; (80137a8 <Get_SerialNum+0x48>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013772:	4b0e      	ldr	r3, [pc, #56]	; (80137ac <Get_SerialNum+0x4c>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013778:	68fa      	ldr	r2, [r7, #12]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4413      	add	r3, r2
 801377e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d009      	beq.n	801379a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013786:	2208      	movs	r2, #8
 8013788:	4909      	ldr	r1, [pc, #36]	; (80137b0 <Get_SerialNum+0x50>)
 801378a:	68f8      	ldr	r0, [r7, #12]
 801378c:	f000 f814 	bl	80137b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013790:	2204      	movs	r2, #4
 8013792:	4908      	ldr	r1, [pc, #32]	; (80137b4 <Get_SerialNum+0x54>)
 8013794:	68b8      	ldr	r0, [r7, #8]
 8013796:	f000 f80f 	bl	80137b8 <IntToUnicode>
  }
}
 801379a:	bf00      	nop
 801379c:	3710      	adds	r7, #16
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	1ff0f420 	.word	0x1ff0f420
 80137a8:	1ff0f424 	.word	0x1ff0f424
 80137ac:	1ff0f428 	.word	0x1ff0f428
 80137b0:	20000182 	.word	0x20000182
 80137b4:	20000192 	.word	0x20000192

080137b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b087      	sub	sp, #28
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	4613      	mov	r3, r2
 80137c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80137ca:	2300      	movs	r3, #0
 80137cc:	75fb      	strb	r3, [r7, #23]
 80137ce:	e027      	b.n	8013820 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	0f1b      	lsrs	r3, r3, #28
 80137d4:	2b09      	cmp	r3, #9
 80137d6:	d80b      	bhi.n	80137f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	0f1b      	lsrs	r3, r3, #28
 80137dc:	b2da      	uxtb	r2, r3
 80137de:	7dfb      	ldrb	r3, [r7, #23]
 80137e0:	005b      	lsls	r3, r3, #1
 80137e2:	4619      	mov	r1, r3
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	440b      	add	r3, r1
 80137e8:	3230      	adds	r2, #48	; 0x30
 80137ea:	b2d2      	uxtb	r2, r2
 80137ec:	701a      	strb	r2, [r3, #0]
 80137ee:	e00a      	b.n	8013806 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	0f1b      	lsrs	r3, r3, #28
 80137f4:	b2da      	uxtb	r2, r3
 80137f6:	7dfb      	ldrb	r3, [r7, #23]
 80137f8:	005b      	lsls	r3, r3, #1
 80137fa:	4619      	mov	r1, r3
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	440b      	add	r3, r1
 8013800:	3237      	adds	r2, #55	; 0x37
 8013802:	b2d2      	uxtb	r2, r2
 8013804:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	011b      	lsls	r3, r3, #4
 801380a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801380c:	7dfb      	ldrb	r3, [r7, #23]
 801380e:	005b      	lsls	r3, r3, #1
 8013810:	3301      	adds	r3, #1
 8013812:	68ba      	ldr	r2, [r7, #8]
 8013814:	4413      	add	r3, r2
 8013816:	2200      	movs	r2, #0
 8013818:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801381a:	7dfb      	ldrb	r3, [r7, #23]
 801381c:	3301      	adds	r3, #1
 801381e:	75fb      	strb	r3, [r7, #23]
 8013820:	7dfa      	ldrb	r2, [r7, #23]
 8013822:	79fb      	ldrb	r3, [r7, #7]
 8013824:	429a      	cmp	r2, r3
 8013826:	d3d3      	bcc.n	80137d0 <IntToUnicode+0x18>
  }
}
 8013828:	bf00      	nop
 801382a:	bf00      	nop
 801382c:	371c      	adds	r7, #28
 801382e:	46bd      	mov	sp, r7
 8013830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013834:	4770      	bx	lr
	...

08013838 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b08a      	sub	sp, #40	; 0x28
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013840:	f107 0314 	add.w	r3, r7, #20
 8013844:	2200      	movs	r2, #0
 8013846:	601a      	str	r2, [r3, #0]
 8013848:	605a      	str	r2, [r3, #4]
 801384a:	609a      	str	r2, [r3, #8]
 801384c:	60da      	str	r2, [r3, #12]
 801384e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013858:	d149      	bne.n	80138ee <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801385a:	4b27      	ldr	r3, [pc, #156]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 801385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801385e:	4a26      	ldr	r2, [pc, #152]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 8013860:	f043 0301 	orr.w	r3, r3, #1
 8013864:	6313      	str	r3, [r2, #48]	; 0x30
 8013866:	4b24      	ldr	r3, [pc, #144]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 8013868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386a:	f003 0301 	and.w	r3, r3, #1
 801386e:	613b      	str	r3, [r7, #16]
 8013870:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8013872:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8013876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013878:	2302      	movs	r3, #2
 801387a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801387c:	2300      	movs	r3, #0
 801387e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013880:	2303      	movs	r3, #3
 8013882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013884:	230a      	movs	r3, #10
 8013886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013888:	f107 0314 	add.w	r3, r7, #20
 801388c:	4619      	mov	r1, r3
 801388e:	481b      	ldr	r0, [pc, #108]	; (80138fc <HAL_PCD_MspInit+0xc4>)
 8013890:	f7ee fd5c 	bl	800234c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8013894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801389a:	2300      	movs	r3, #0
 801389c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801389e:	2300      	movs	r3, #0
 80138a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80138a2:	f107 0314 	add.w	r3, r7, #20
 80138a6:	4619      	mov	r1, r3
 80138a8:	4814      	ldr	r0, [pc, #80]	; (80138fc <HAL_PCD_MspInit+0xc4>)
 80138aa:	f7ee fd4f 	bl	800234c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80138ae:	4b12      	ldr	r3, [pc, #72]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 80138b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138b2:	4a11      	ldr	r2, [pc, #68]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 80138b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138b8:	6353      	str	r3, [r2, #52]	; 0x34
 80138ba:	4b0f      	ldr	r3, [pc, #60]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 80138bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	4b0c      	ldr	r3, [pc, #48]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 80138c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138ca:	4a0b      	ldr	r2, [pc, #44]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 80138cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80138d0:	6453      	str	r3, [r2, #68]	; 0x44
 80138d2:	4b09      	ldr	r3, [pc, #36]	; (80138f8 <HAL_PCD_MspInit+0xc0>)
 80138d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80138da:	60bb      	str	r3, [r7, #8]
 80138dc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80138de:	2200      	movs	r2, #0
 80138e0:	2100      	movs	r1, #0
 80138e2:	2043      	movs	r0, #67	; 0x43
 80138e4:	f7ed fc04 	bl	80010f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80138e8:	2043      	movs	r0, #67	; 0x43
 80138ea:	f7ed fc1d 	bl	8001128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80138ee:	bf00      	nop
 80138f0:	3728      	adds	r7, #40	; 0x28
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	40023800 	.word	0x40023800
 80138fc:	40020000 	.word	0x40020000

08013900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013914:	4619      	mov	r1, r3
 8013916:	4610      	mov	r0, r2
 8013918:	f7f4 fcb2 	bl	8008280 <USBD_LL_SetupStage>
}
 801391c:	bf00      	nop
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	460b      	mov	r3, r1
 801392e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8013936:	78fa      	ldrb	r2, [r7, #3]
 8013938:	6879      	ldr	r1, [r7, #4]
 801393a:	4613      	mov	r3, r2
 801393c:	00db      	lsls	r3, r3, #3
 801393e:	1a9b      	subs	r3, r3, r2
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	440b      	add	r3, r1
 8013944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	78fb      	ldrb	r3, [r7, #3]
 801394c:	4619      	mov	r1, r3
 801394e:	f7f4 fcec 	bl	800832a <USBD_LL_DataOutStage>
}
 8013952:	bf00      	nop
 8013954:	3708      	adds	r7, #8
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}

0801395a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801395a:	b580      	push	{r7, lr}
 801395c:	b082      	sub	sp, #8
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
 8013962:	460b      	mov	r3, r1
 8013964:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801396c:	78fa      	ldrb	r2, [r7, #3]
 801396e:	6879      	ldr	r1, [r7, #4]
 8013970:	4613      	mov	r3, r2
 8013972:	00db      	lsls	r3, r3, #3
 8013974:	1a9b      	subs	r3, r3, r2
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	440b      	add	r3, r1
 801397a:	3348      	adds	r3, #72	; 0x48
 801397c:	681a      	ldr	r2, [r3, #0]
 801397e:	78fb      	ldrb	r3, [r7, #3]
 8013980:	4619      	mov	r1, r3
 8013982:	f7f4 fd35 	bl	80083f0 <USBD_LL_DataInStage>
}
 8013986:	bf00      	nop
 8013988:	3708      	adds	r7, #8
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}

0801398e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801398e:	b580      	push	{r7, lr}
 8013990:	b082      	sub	sp, #8
 8013992:	af00      	add	r7, sp, #0
 8013994:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801399c:	4618      	mov	r0, r3
 801399e:	f7f4 fe39 	bl	8008614 <USBD_LL_SOF>
}
 80139a2:	bf00      	nop
 80139a4:	3708      	adds	r7, #8
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}

080139aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139aa:	b580      	push	{r7, lr}
 80139ac:	b084      	sub	sp, #16
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80139b2:	2301      	movs	r3, #1
 80139b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	68db      	ldr	r3, [r3, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d102      	bne.n	80139c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80139be:	2300      	movs	r3, #0
 80139c0:	73fb      	strb	r3, [r7, #15]
 80139c2:	e008      	b.n	80139d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	2b02      	cmp	r3, #2
 80139ca:	d102      	bne.n	80139d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80139cc:	2301      	movs	r3, #1
 80139ce:	73fb      	strb	r3, [r7, #15]
 80139d0:	e001      	b.n	80139d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80139d2:	f7ec ffc7 	bl	8000964 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80139dc:	7bfa      	ldrb	r2, [r7, #15]
 80139de:	4611      	mov	r1, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7f4 fddc 	bl	800859e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f4 fd95 	bl	800851c <USBD_LL_Reset>
}
 80139f2:	bf00      	nop
 80139f4:	3710      	adds	r7, #16
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
	...

080139fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b082      	sub	sp, #8
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7f4 fdd7 	bl	80085be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	6812      	ldr	r2, [r2, #0]
 8013a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013a22:	f043 0301 	orr.w	r3, r3, #1
 8013a26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6a1b      	ldr	r3, [r3, #32]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d005      	beq.n	8013a3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a30:	4b04      	ldr	r3, [pc, #16]	; (8013a44 <HAL_PCD_SuspendCallback+0x48>)
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	4a03      	ldr	r2, [pc, #12]	; (8013a44 <HAL_PCD_SuspendCallback+0x48>)
 8013a36:	f043 0306 	orr.w	r3, r3, #6
 8013a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013a3c:	bf00      	nop
 8013a3e:	3708      	adds	r7, #8
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	e000ed00 	.word	0xe000ed00

08013a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b082      	sub	sp, #8
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7f4 fdc6 	bl	80085e8 <USBD_LL_Resume>
}
 8013a5c:	bf00      	nop
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}

08013a64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013a76:	78fa      	ldrb	r2, [r7, #3]
 8013a78:	4611      	mov	r1, r2
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7f4 fdf1 	bl	8008662 <USBD_LL_IsoOUTIncomplete>
}
 8013a80:	bf00      	nop
 8013a82:	3708      	adds	r7, #8
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	460b      	mov	r3, r1
 8013a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013a9a:	78fa      	ldrb	r2, [r7, #3]
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7f4 fdd2 	bl	8008648 <USBD_LL_IsoINIncomplete>
}
 8013aa4:	bf00      	nop
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7f4 fdde 	bl	800867c <USBD_LL_DevConnected>
}
 8013ac0:	bf00      	nop
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7f4 fddb 	bl	8008692 <USBD_LL_DevDisconnected>
}
 8013adc:	bf00      	nop
 8013ade:	3708      	adds	r7, #8
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d13c      	bne.n	8013b6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013af4:	4a20      	ldr	r2, [pc, #128]	; (8013b78 <USBD_LL_Init+0x94>)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	4a1e      	ldr	r2, [pc, #120]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013b04:	4b1c      	ldr	r3, [pc, #112]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013b0c:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b0e:	2206      	movs	r2, #6
 8013b10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013b12:	4b19      	ldr	r3, [pc, #100]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b14:	2202      	movs	r2, #2
 8013b16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013b18:	4b17      	ldr	r3, [pc, #92]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013b1e:	4b16      	ldr	r3, [pc, #88]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b20:	2202      	movs	r2, #2
 8013b22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8013b24:	4b14      	ldr	r3, [pc, #80]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b26:	2201      	movs	r2, #1
 8013b28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013b2a:	4b13      	ldr	r3, [pc, #76]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013b30:	4b11      	ldr	r3, [pc, #68]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b32:	2200      	movs	r2, #0
 8013b34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8013b36:	4b10      	ldr	r3, [pc, #64]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b38:	2201      	movs	r2, #1
 8013b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013b3c:	4b0e      	ldr	r3, [pc, #56]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b3e:	2200      	movs	r2, #0
 8013b40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013b42:	480d      	ldr	r0, [pc, #52]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b44:	f7ee fdc7 	bl	80026d6 <HAL_PCD_Init>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d001      	beq.n	8013b52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013b4e:	f7ec ff09 	bl	8000964 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013b52:	2180      	movs	r1, #128	; 0x80
 8013b54:	4808      	ldr	r0, [pc, #32]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b56:	f7ef ff48 	bl	80039ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013b5a:	2240      	movs	r2, #64	; 0x40
 8013b5c:	2100      	movs	r1, #0
 8013b5e:	4806      	ldr	r0, [pc, #24]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b60:	f7ef fefc 	bl	800395c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013b64:	2280      	movs	r2, #128	; 0x80
 8013b66:	2101      	movs	r1, #1
 8013b68:	4803      	ldr	r0, [pc, #12]	; (8013b78 <USBD_LL_Init+0x94>)
 8013b6a:	f7ef fef7 	bl	800395c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013b6e:	2300      	movs	r3, #0
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	200081cc 	.word	0x200081cc

08013b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b084      	sub	sp, #16
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b84:	2300      	movs	r3, #0
 8013b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013b92:	4618      	mov	r0, r3
 8013b94:	f7ee fec3 	bl	800291e <HAL_PCD_Start>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b9c:	7bfb      	ldrb	r3, [r7, #15]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f000 f97e 	bl	8013ea0 <USBD_Get_USB_Status>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3710      	adds	r7, #16
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}

08013bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013bb2:	b580      	push	{r7, lr}
 8013bb4:	b084      	sub	sp, #16
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
 8013bba:	4608      	mov	r0, r1
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	70fb      	strb	r3, [r7, #3]
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	70bb      	strb	r3, [r7, #2]
 8013bc8:	4613      	mov	r3, r2
 8013bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013bda:	78bb      	ldrb	r3, [r7, #2]
 8013bdc:	883a      	ldrh	r2, [r7, #0]
 8013bde:	78f9      	ldrb	r1, [r7, #3]
 8013be0:	f7ef fac3 	bl	800316a <HAL_PCD_EP_Open>
 8013be4:	4603      	mov	r3, r0
 8013be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013be8:	7bfb      	ldrb	r3, [r7, #15]
 8013bea:	4618      	mov	r0, r3
 8013bec:	f000 f958 	bl	8013ea0 <USBD_Get_USB_Status>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3710      	adds	r7, #16
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}

08013bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013bfe:	b580      	push	{r7, lr}
 8013c00:	b084      	sub	sp, #16
 8013c02:	af00      	add	r7, sp, #0
 8013c04:	6078      	str	r0, [r7, #4]
 8013c06:	460b      	mov	r3, r1
 8013c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013c18:	78fa      	ldrb	r2, [r7, #3]
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7ef fb0c 	bl	800323a <HAL_PCD_EP_Close>
 8013c22:	4603      	mov	r3, r0
 8013c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c26:	7bfb      	ldrb	r3, [r7, #15]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f000 f939 	bl	8013ea0 <USBD_Get_USB_Status>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	3710      	adds	r7, #16
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	460b      	mov	r3, r1
 8013c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c48:	2300      	movs	r3, #0
 8013c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013c56:	78fa      	ldrb	r2, [r7, #3]
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7ef fbe4 	bl	8003428 <HAL_PCD_EP_SetStall>
 8013c60:	4603      	mov	r3, r0
 8013c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c64:	7bfb      	ldrb	r3, [r7, #15]
 8013c66:	4618      	mov	r0, r3
 8013c68:	f000 f91a 	bl	8013ea0 <USBD_Get_USB_Status>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b084      	sub	sp, #16
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
 8013c82:	460b      	mov	r3, r1
 8013c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c86:	2300      	movs	r3, #0
 8013c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013c94:	78fa      	ldrb	r2, [r7, #3]
 8013c96:	4611      	mov	r1, r2
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7ef fc29 	bl	80034f0 <HAL_PCD_EP_ClrStall>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ca2:	7bfb      	ldrb	r3, [r7, #15]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f000 f8fb 	bl	8013ea0 <USBD_Get_USB_Status>
 8013caa:	4603      	mov	r3, r0
 8013cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3710      	adds	r7, #16
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cb8:	b480      	push	{r7}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013cca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	da0b      	bge.n	8013cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013cd4:	78fb      	ldrb	r3, [r7, #3]
 8013cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013cda:	68f9      	ldr	r1, [r7, #12]
 8013cdc:	4613      	mov	r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	1a9b      	subs	r3, r3, r2
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	440b      	add	r3, r1
 8013ce6:	333e      	adds	r3, #62	; 0x3e
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	e00b      	b.n	8013d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013cec:	78fb      	ldrb	r3, [r7, #3]
 8013cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013cf2:	68f9      	ldr	r1, [r7, #12]
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	1a9b      	subs	r3, r3, r2
 8013cfa:	009b      	lsls	r3, r3, #2
 8013cfc:	440b      	add	r3, r1
 8013cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3714      	adds	r7, #20
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0e:	4770      	bx	lr

08013d10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b084      	sub	sp, #16
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	460b      	mov	r3, r1
 8013d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d20:	2300      	movs	r3, #0
 8013d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013d2a:	78fa      	ldrb	r2, [r7, #3]
 8013d2c:	4611      	mov	r1, r2
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7ef f9f6 	bl	8003120 <HAL_PCD_SetAddress>
 8013d34:	4603      	mov	r3, r0
 8013d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d38:	7bfb      	ldrb	r3, [r7, #15]
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f000 f8b0 	bl	8013ea0 <USBD_Get_USB_Status>
 8013d40:	4603      	mov	r3, r0
 8013d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d46:	4618      	mov	r0, r3
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}

08013d4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d4e:	b580      	push	{r7, lr}
 8013d50:	b086      	sub	sp, #24
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	60f8      	str	r0, [r7, #12]
 8013d56:	607a      	str	r2, [r7, #4]
 8013d58:	603b      	str	r3, [r7, #0]
 8013d5a:	460b      	mov	r3, r1
 8013d5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d62:	2300      	movs	r3, #0
 8013d64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013d6c:	7af9      	ldrb	r1, [r7, #11]
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	f7ef fb0f 	bl	8003394 <HAL_PCD_EP_Transmit>
 8013d76:	4603      	mov	r3, r0
 8013d78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d7a:	7dfb      	ldrb	r3, [r7, #23]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f000 f88f 	bl	8013ea0 <USBD_Get_USB_Status>
 8013d82:	4603      	mov	r3, r0
 8013d84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013d86:	7dbb      	ldrb	r3, [r7, #22]
}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3718      	adds	r7, #24
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	607a      	str	r2, [r7, #4]
 8013d9a:	603b      	str	r3, [r7, #0]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013da0:	2300      	movs	r3, #0
 8013da2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013da4:	2300      	movs	r3, #0
 8013da6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013dae:	7af9      	ldrb	r1, [r7, #11]
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	f7ef fa8b 	bl	80032ce <HAL_PCD_EP_Receive>
 8013db8:	4603      	mov	r3, r0
 8013dba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dbc:	7dfb      	ldrb	r3, [r7, #23]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f000 f86e 	bl	8013ea0 <USBD_Get_USB_Status>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013dc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3718      	adds	r7, #24
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}

08013dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dd2:	b580      	push	{r7, lr}
 8013dd4:	b082      	sub	sp, #8
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	6078      	str	r0, [r7, #4]
 8013dda:	460b      	mov	r3, r1
 8013ddc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013de4:	78fa      	ldrb	r2, [r7, #3]
 8013de6:	4611      	mov	r1, r2
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7ef fabb 	bl	8003364 <HAL_PCD_EP_GetRxCount>
 8013dee:	4603      	mov	r3, r0
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b082      	sub	sp, #8
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	460b      	mov	r3, r1
 8013e02:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013e04:	78fb      	ldrb	r3, [r7, #3]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d002      	beq.n	8013e10 <HAL_PCDEx_LPM_Callback+0x18>
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d01f      	beq.n	8013e4e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013e0e:	e03b      	b.n	8013e88 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	6a1b      	ldr	r3, [r3, #32]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d007      	beq.n	8013e28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013e18:	f000 f83c 	bl	8013e94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013e1c:	4b1c      	ldr	r3, [pc, #112]	; (8013e90 <HAL_PCDEx_LPM_Callback+0x98>)
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	4a1b      	ldr	r2, [pc, #108]	; (8013e90 <HAL_PCDEx_LPM_Callback+0x98>)
 8013e22:	f023 0306 	bic.w	r3, r3, #6
 8013e26:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	6812      	ldr	r2, [r2, #0]
 8013e36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e3a:	f023 0301 	bic.w	r3, r3, #1
 8013e3e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7f4 fbce 	bl	80085e8 <USBD_LL_Resume>
    break;
 8013e4c:	e01c      	b.n	8013e88 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	6812      	ldr	r2, [r2, #0]
 8013e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e60:	f043 0301 	orr.w	r3, r3, #1
 8013e64:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7f4 fba6 	bl	80085be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6a1b      	ldr	r3, [r3, #32]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d005      	beq.n	8013e86 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013e7a:	4b05      	ldr	r3, [pc, #20]	; (8013e90 <HAL_PCDEx_LPM_Callback+0x98>)
 8013e7c:	691b      	ldr	r3, [r3, #16]
 8013e7e:	4a04      	ldr	r2, [pc, #16]	; (8013e90 <HAL_PCDEx_LPM_Callback+0x98>)
 8013e80:	f043 0306 	orr.w	r3, r3, #6
 8013e84:	6113      	str	r3, [r2, #16]
    break;
 8013e86:	bf00      	nop
}
 8013e88:	bf00      	nop
 8013e8a:	3708      	adds	r7, #8
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	e000ed00 	.word	0xe000ed00

08013e94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013e98:	f7ec fbb8 	bl	800060c <SystemClock_Config>
}
 8013e9c:	bf00      	nop
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013eae:	79fb      	ldrb	r3, [r7, #7]
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d817      	bhi.n	8013ee4 <USBD_Get_USB_Status+0x44>
 8013eb4:	a201      	add	r2, pc, #4	; (adr r2, 8013ebc <USBD_Get_USB_Status+0x1c>)
 8013eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eba:	bf00      	nop
 8013ebc:	08013ecd 	.word	0x08013ecd
 8013ec0:	08013ed3 	.word	0x08013ed3
 8013ec4:	08013ed9 	.word	0x08013ed9
 8013ec8:	08013edf 	.word	0x08013edf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	73fb      	strb	r3, [r7, #15]
    break;
 8013ed0:	e00b      	b.n	8013eea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013ed2:	2303      	movs	r3, #3
 8013ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8013ed6:	e008      	b.n	8013eea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013ed8:	2301      	movs	r3, #1
 8013eda:	73fb      	strb	r3, [r7, #15]
    break;
 8013edc:	e005      	b.n	8013eea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013ede:	2303      	movs	r3, #3
 8013ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8013ee2:	e002      	b.n	8013eea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013ee4:	2303      	movs	r3, #3
 8013ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8013ee8:	bf00      	nop
  }
  return usb_status;
 8013eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3714      	adds	r7, #20
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef6:	4770      	bx	lr

08013ef8 <__libc_init_array>:
 8013ef8:	b570      	push	{r4, r5, r6, lr}
 8013efa:	4d0d      	ldr	r5, [pc, #52]	; (8013f30 <__libc_init_array+0x38>)
 8013efc:	4c0d      	ldr	r4, [pc, #52]	; (8013f34 <__libc_init_array+0x3c>)
 8013efe:	1b64      	subs	r4, r4, r5
 8013f00:	10a4      	asrs	r4, r4, #2
 8013f02:	2600      	movs	r6, #0
 8013f04:	42a6      	cmp	r6, r4
 8013f06:	d109      	bne.n	8013f1c <__libc_init_array+0x24>
 8013f08:	4d0b      	ldr	r5, [pc, #44]	; (8013f38 <__libc_init_array+0x40>)
 8013f0a:	4c0c      	ldr	r4, [pc, #48]	; (8013f3c <__libc_init_array+0x44>)
 8013f0c:	f001 f872 	bl	8014ff4 <_init>
 8013f10:	1b64      	subs	r4, r4, r5
 8013f12:	10a4      	asrs	r4, r4, #2
 8013f14:	2600      	movs	r6, #0
 8013f16:	42a6      	cmp	r6, r4
 8013f18:	d105      	bne.n	8013f26 <__libc_init_array+0x2e>
 8013f1a:	bd70      	pop	{r4, r5, r6, pc}
 8013f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f20:	4798      	blx	r3
 8013f22:	3601      	adds	r6, #1
 8013f24:	e7ee      	b.n	8013f04 <__libc_init_array+0xc>
 8013f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f2a:	4798      	blx	r3
 8013f2c:	3601      	adds	r6, #1
 8013f2e:	e7f2      	b.n	8013f16 <__libc_init_array+0x1e>
 8013f30:	08017c84 	.word	0x08017c84
 8013f34:	08017c84 	.word	0x08017c84
 8013f38:	08017c84 	.word	0x08017c84
 8013f3c:	08017c88 	.word	0x08017c88

08013f40 <malloc>:
 8013f40:	4b02      	ldr	r3, [pc, #8]	; (8013f4c <malloc+0xc>)
 8013f42:	4601      	mov	r1, r0
 8013f44:	6818      	ldr	r0, [r3, #0]
 8013f46:	f000 b87f 	b.w	8014048 <_malloc_r>
 8013f4a:	bf00      	nop
 8013f4c:	2000019c 	.word	0x2000019c

08013f50 <free>:
 8013f50:	4b02      	ldr	r3, [pc, #8]	; (8013f5c <free+0xc>)
 8013f52:	4601      	mov	r1, r0
 8013f54:	6818      	ldr	r0, [r3, #0]
 8013f56:	f000 b827 	b.w	8013fa8 <_free_r>
 8013f5a:	bf00      	nop
 8013f5c:	2000019c 	.word	0x2000019c

08013f60 <memcmp>:
 8013f60:	b530      	push	{r4, r5, lr}
 8013f62:	3901      	subs	r1, #1
 8013f64:	2400      	movs	r4, #0
 8013f66:	42a2      	cmp	r2, r4
 8013f68:	d101      	bne.n	8013f6e <memcmp+0xe>
 8013f6a:	2000      	movs	r0, #0
 8013f6c:	e005      	b.n	8013f7a <memcmp+0x1a>
 8013f6e:	5d03      	ldrb	r3, [r0, r4]
 8013f70:	3401      	adds	r4, #1
 8013f72:	5d0d      	ldrb	r5, [r1, r4]
 8013f74:	42ab      	cmp	r3, r5
 8013f76:	d0f6      	beq.n	8013f66 <memcmp+0x6>
 8013f78:	1b58      	subs	r0, r3, r5
 8013f7a:	bd30      	pop	{r4, r5, pc}

08013f7c <memcpy>:
 8013f7c:	440a      	add	r2, r1
 8013f7e:	4291      	cmp	r1, r2
 8013f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f84:	d100      	bne.n	8013f88 <memcpy+0xc>
 8013f86:	4770      	bx	lr
 8013f88:	b510      	push	{r4, lr}
 8013f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f92:	4291      	cmp	r1, r2
 8013f94:	d1f9      	bne.n	8013f8a <memcpy+0xe>
 8013f96:	bd10      	pop	{r4, pc}

08013f98 <memset>:
 8013f98:	4402      	add	r2, r0
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	d100      	bne.n	8013fa2 <memset+0xa>
 8013fa0:	4770      	bx	lr
 8013fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8013fa6:	e7f9      	b.n	8013f9c <memset+0x4>

08013fa8 <_free_r>:
 8013fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013faa:	2900      	cmp	r1, #0
 8013fac:	d048      	beq.n	8014040 <_free_r+0x98>
 8013fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fb2:	9001      	str	r0, [sp, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8013fba:	bfb8      	it	lt
 8013fbc:	18e4      	addlt	r4, r4, r3
 8013fbe:	f000 fa41 	bl	8014444 <__malloc_lock>
 8013fc2:	4a20      	ldr	r2, [pc, #128]	; (8014044 <_free_r+0x9c>)
 8013fc4:	9801      	ldr	r0, [sp, #4]
 8013fc6:	6813      	ldr	r3, [r2, #0]
 8013fc8:	4615      	mov	r5, r2
 8013fca:	b933      	cbnz	r3, 8013fda <_free_r+0x32>
 8013fcc:	6063      	str	r3, [r4, #4]
 8013fce:	6014      	str	r4, [r2, #0]
 8013fd0:	b003      	add	sp, #12
 8013fd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fd6:	f000 ba3b 	b.w	8014450 <__malloc_unlock>
 8013fda:	42a3      	cmp	r3, r4
 8013fdc:	d90b      	bls.n	8013ff6 <_free_r+0x4e>
 8013fde:	6821      	ldr	r1, [r4, #0]
 8013fe0:	1862      	adds	r2, r4, r1
 8013fe2:	4293      	cmp	r3, r2
 8013fe4:	bf04      	itt	eq
 8013fe6:	681a      	ldreq	r2, [r3, #0]
 8013fe8:	685b      	ldreq	r3, [r3, #4]
 8013fea:	6063      	str	r3, [r4, #4]
 8013fec:	bf04      	itt	eq
 8013fee:	1852      	addeq	r2, r2, r1
 8013ff0:	6022      	streq	r2, [r4, #0]
 8013ff2:	602c      	str	r4, [r5, #0]
 8013ff4:	e7ec      	b.n	8013fd0 <_free_r+0x28>
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	b10b      	cbz	r3, 8014000 <_free_r+0x58>
 8013ffc:	42a3      	cmp	r3, r4
 8013ffe:	d9fa      	bls.n	8013ff6 <_free_r+0x4e>
 8014000:	6811      	ldr	r1, [r2, #0]
 8014002:	1855      	adds	r5, r2, r1
 8014004:	42a5      	cmp	r5, r4
 8014006:	d10b      	bne.n	8014020 <_free_r+0x78>
 8014008:	6824      	ldr	r4, [r4, #0]
 801400a:	4421      	add	r1, r4
 801400c:	1854      	adds	r4, r2, r1
 801400e:	42a3      	cmp	r3, r4
 8014010:	6011      	str	r1, [r2, #0]
 8014012:	d1dd      	bne.n	8013fd0 <_free_r+0x28>
 8014014:	681c      	ldr	r4, [r3, #0]
 8014016:	685b      	ldr	r3, [r3, #4]
 8014018:	6053      	str	r3, [r2, #4]
 801401a:	4421      	add	r1, r4
 801401c:	6011      	str	r1, [r2, #0]
 801401e:	e7d7      	b.n	8013fd0 <_free_r+0x28>
 8014020:	d902      	bls.n	8014028 <_free_r+0x80>
 8014022:	230c      	movs	r3, #12
 8014024:	6003      	str	r3, [r0, #0]
 8014026:	e7d3      	b.n	8013fd0 <_free_r+0x28>
 8014028:	6825      	ldr	r5, [r4, #0]
 801402a:	1961      	adds	r1, r4, r5
 801402c:	428b      	cmp	r3, r1
 801402e:	bf04      	itt	eq
 8014030:	6819      	ldreq	r1, [r3, #0]
 8014032:	685b      	ldreq	r3, [r3, #4]
 8014034:	6063      	str	r3, [r4, #4]
 8014036:	bf04      	itt	eq
 8014038:	1949      	addeq	r1, r1, r5
 801403a:	6021      	streq	r1, [r4, #0]
 801403c:	6054      	str	r4, [r2, #4]
 801403e:	e7c7      	b.n	8013fd0 <_free_r+0x28>
 8014040:	b003      	add	sp, #12
 8014042:	bd30      	pop	{r4, r5, pc}
 8014044:	200004e8 	.word	0x200004e8

08014048 <_malloc_r>:
 8014048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404a:	1ccd      	adds	r5, r1, #3
 801404c:	f025 0503 	bic.w	r5, r5, #3
 8014050:	3508      	adds	r5, #8
 8014052:	2d0c      	cmp	r5, #12
 8014054:	bf38      	it	cc
 8014056:	250c      	movcc	r5, #12
 8014058:	2d00      	cmp	r5, #0
 801405a:	4606      	mov	r6, r0
 801405c:	db01      	blt.n	8014062 <_malloc_r+0x1a>
 801405e:	42a9      	cmp	r1, r5
 8014060:	d903      	bls.n	801406a <_malloc_r+0x22>
 8014062:	230c      	movs	r3, #12
 8014064:	6033      	str	r3, [r6, #0]
 8014066:	2000      	movs	r0, #0
 8014068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801406a:	f000 f9eb 	bl	8014444 <__malloc_lock>
 801406e:	4921      	ldr	r1, [pc, #132]	; (80140f4 <_malloc_r+0xac>)
 8014070:	680a      	ldr	r2, [r1, #0]
 8014072:	4614      	mov	r4, r2
 8014074:	b99c      	cbnz	r4, 801409e <_malloc_r+0x56>
 8014076:	4f20      	ldr	r7, [pc, #128]	; (80140f8 <_malloc_r+0xb0>)
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	b923      	cbnz	r3, 8014086 <_malloc_r+0x3e>
 801407c:	4621      	mov	r1, r4
 801407e:	4630      	mov	r0, r6
 8014080:	f000 f894 	bl	80141ac <_sbrk_r>
 8014084:	6038      	str	r0, [r7, #0]
 8014086:	4629      	mov	r1, r5
 8014088:	4630      	mov	r0, r6
 801408a:	f000 f88f 	bl	80141ac <_sbrk_r>
 801408e:	1c43      	adds	r3, r0, #1
 8014090:	d123      	bne.n	80140da <_malloc_r+0x92>
 8014092:	230c      	movs	r3, #12
 8014094:	6033      	str	r3, [r6, #0]
 8014096:	4630      	mov	r0, r6
 8014098:	f000 f9da 	bl	8014450 <__malloc_unlock>
 801409c:	e7e3      	b.n	8014066 <_malloc_r+0x1e>
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	1b5b      	subs	r3, r3, r5
 80140a2:	d417      	bmi.n	80140d4 <_malloc_r+0x8c>
 80140a4:	2b0b      	cmp	r3, #11
 80140a6:	d903      	bls.n	80140b0 <_malloc_r+0x68>
 80140a8:	6023      	str	r3, [r4, #0]
 80140aa:	441c      	add	r4, r3
 80140ac:	6025      	str	r5, [r4, #0]
 80140ae:	e004      	b.n	80140ba <_malloc_r+0x72>
 80140b0:	6863      	ldr	r3, [r4, #4]
 80140b2:	42a2      	cmp	r2, r4
 80140b4:	bf0c      	ite	eq
 80140b6:	600b      	streq	r3, [r1, #0]
 80140b8:	6053      	strne	r3, [r2, #4]
 80140ba:	4630      	mov	r0, r6
 80140bc:	f000 f9c8 	bl	8014450 <__malloc_unlock>
 80140c0:	f104 000b 	add.w	r0, r4, #11
 80140c4:	1d23      	adds	r3, r4, #4
 80140c6:	f020 0007 	bic.w	r0, r0, #7
 80140ca:	1ac2      	subs	r2, r0, r3
 80140cc:	d0cc      	beq.n	8014068 <_malloc_r+0x20>
 80140ce:	1a1b      	subs	r3, r3, r0
 80140d0:	50a3      	str	r3, [r4, r2]
 80140d2:	e7c9      	b.n	8014068 <_malloc_r+0x20>
 80140d4:	4622      	mov	r2, r4
 80140d6:	6864      	ldr	r4, [r4, #4]
 80140d8:	e7cc      	b.n	8014074 <_malloc_r+0x2c>
 80140da:	1cc4      	adds	r4, r0, #3
 80140dc:	f024 0403 	bic.w	r4, r4, #3
 80140e0:	42a0      	cmp	r0, r4
 80140e2:	d0e3      	beq.n	80140ac <_malloc_r+0x64>
 80140e4:	1a21      	subs	r1, r4, r0
 80140e6:	4630      	mov	r0, r6
 80140e8:	f000 f860 	bl	80141ac <_sbrk_r>
 80140ec:	3001      	adds	r0, #1
 80140ee:	d1dd      	bne.n	80140ac <_malloc_r+0x64>
 80140f0:	e7cf      	b.n	8014092 <_malloc_r+0x4a>
 80140f2:	bf00      	nop
 80140f4:	200004e8 	.word	0x200004e8
 80140f8:	200004ec 	.word	0x200004ec

080140fc <iprintf>:
 80140fc:	b40f      	push	{r0, r1, r2, r3}
 80140fe:	4b0a      	ldr	r3, [pc, #40]	; (8014128 <iprintf+0x2c>)
 8014100:	b513      	push	{r0, r1, r4, lr}
 8014102:	681c      	ldr	r4, [r3, #0]
 8014104:	b124      	cbz	r4, 8014110 <iprintf+0x14>
 8014106:	69a3      	ldr	r3, [r4, #24]
 8014108:	b913      	cbnz	r3, 8014110 <iprintf+0x14>
 801410a:	4620      	mov	r0, r4
 801410c:	f000 f8e8 	bl	80142e0 <__sinit>
 8014110:	ab05      	add	r3, sp, #20
 8014112:	9a04      	ldr	r2, [sp, #16]
 8014114:	68a1      	ldr	r1, [r4, #8]
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	4620      	mov	r0, r4
 801411a:	f000 f9c9 	bl	80144b0 <_vfiprintf_r>
 801411e:	b002      	add	sp, #8
 8014120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014124:	b004      	add	sp, #16
 8014126:	4770      	bx	lr
 8014128:	2000019c 	.word	0x2000019c

0801412c <rand>:
 801412c:	4b17      	ldr	r3, [pc, #92]	; (801418c <rand+0x60>)
 801412e:	b510      	push	{r4, lr}
 8014130:	681c      	ldr	r4, [r3, #0]
 8014132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014134:	b9b3      	cbnz	r3, 8014164 <rand+0x38>
 8014136:	2018      	movs	r0, #24
 8014138:	f7ff ff02 	bl	8013f40 <malloc>
 801413c:	63a0      	str	r0, [r4, #56]	; 0x38
 801413e:	b928      	cbnz	r0, 801414c <rand+0x20>
 8014140:	4602      	mov	r2, r0
 8014142:	4b13      	ldr	r3, [pc, #76]	; (8014190 <rand+0x64>)
 8014144:	4813      	ldr	r0, [pc, #76]	; (8014194 <rand+0x68>)
 8014146:	214e      	movs	r1, #78	; 0x4e
 8014148:	f000 f854 	bl	80141f4 <__assert_func>
 801414c:	4a12      	ldr	r2, [pc, #72]	; (8014198 <rand+0x6c>)
 801414e:	4b13      	ldr	r3, [pc, #76]	; (801419c <rand+0x70>)
 8014150:	e9c0 2300 	strd	r2, r3, [r0]
 8014154:	4b12      	ldr	r3, [pc, #72]	; (80141a0 <rand+0x74>)
 8014156:	6083      	str	r3, [r0, #8]
 8014158:	230b      	movs	r3, #11
 801415a:	8183      	strh	r3, [r0, #12]
 801415c:	2201      	movs	r2, #1
 801415e:	2300      	movs	r3, #0
 8014160:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014164:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014166:	480f      	ldr	r0, [pc, #60]	; (80141a4 <rand+0x78>)
 8014168:	690a      	ldr	r2, [r1, #16]
 801416a:	694b      	ldr	r3, [r1, #20]
 801416c:	4c0e      	ldr	r4, [pc, #56]	; (80141a8 <rand+0x7c>)
 801416e:	4350      	muls	r0, r2
 8014170:	fb04 0003 	mla	r0, r4, r3, r0
 8014174:	fba2 3404 	umull	r3, r4, r2, r4
 8014178:	1c5a      	adds	r2, r3, #1
 801417a:	4404      	add	r4, r0
 801417c:	f144 0000 	adc.w	r0, r4, #0
 8014180:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014184:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014188:	bd10      	pop	{r4, pc}
 801418a:	bf00      	nop
 801418c:	2000019c 	.word	0x2000019c
 8014190:	08017b34 	.word	0x08017b34
 8014194:	08017b4b 	.word	0x08017b4b
 8014198:	abcd330e 	.word	0xabcd330e
 801419c:	e66d1234 	.word	0xe66d1234
 80141a0:	0005deec 	.word	0x0005deec
 80141a4:	5851f42d 	.word	0x5851f42d
 80141a8:	4c957f2d 	.word	0x4c957f2d

080141ac <_sbrk_r>:
 80141ac:	b538      	push	{r3, r4, r5, lr}
 80141ae:	4d06      	ldr	r5, [pc, #24]	; (80141c8 <_sbrk_r+0x1c>)
 80141b0:	2300      	movs	r3, #0
 80141b2:	4604      	mov	r4, r0
 80141b4:	4608      	mov	r0, r1
 80141b6:	602b      	str	r3, [r5, #0]
 80141b8:	f7ec fd9c 	bl	8000cf4 <_sbrk>
 80141bc:	1c43      	adds	r3, r0, #1
 80141be:	d102      	bne.n	80141c6 <_sbrk_r+0x1a>
 80141c0:	682b      	ldr	r3, [r5, #0]
 80141c2:	b103      	cbz	r3, 80141c6 <_sbrk_r+0x1a>
 80141c4:	6023      	str	r3, [r4, #0]
 80141c6:	bd38      	pop	{r3, r4, r5, pc}
 80141c8:	200085d0 	.word	0x200085d0

080141cc <strncpy>:
 80141cc:	b510      	push	{r4, lr}
 80141ce:	3901      	subs	r1, #1
 80141d0:	4603      	mov	r3, r0
 80141d2:	b132      	cbz	r2, 80141e2 <strncpy+0x16>
 80141d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80141d8:	f803 4b01 	strb.w	r4, [r3], #1
 80141dc:	3a01      	subs	r2, #1
 80141de:	2c00      	cmp	r4, #0
 80141e0:	d1f7      	bne.n	80141d2 <strncpy+0x6>
 80141e2:	441a      	add	r2, r3
 80141e4:	2100      	movs	r1, #0
 80141e6:	4293      	cmp	r3, r2
 80141e8:	d100      	bne.n	80141ec <strncpy+0x20>
 80141ea:	bd10      	pop	{r4, pc}
 80141ec:	f803 1b01 	strb.w	r1, [r3], #1
 80141f0:	e7f9      	b.n	80141e6 <strncpy+0x1a>
	...

080141f4 <__assert_func>:
 80141f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141f6:	4614      	mov	r4, r2
 80141f8:	461a      	mov	r2, r3
 80141fa:	4b09      	ldr	r3, [pc, #36]	; (8014220 <__assert_func+0x2c>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	4605      	mov	r5, r0
 8014200:	68d8      	ldr	r0, [r3, #12]
 8014202:	b14c      	cbz	r4, 8014218 <__assert_func+0x24>
 8014204:	4b07      	ldr	r3, [pc, #28]	; (8014224 <__assert_func+0x30>)
 8014206:	9100      	str	r1, [sp, #0]
 8014208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801420c:	4906      	ldr	r1, [pc, #24]	; (8014228 <__assert_func+0x34>)
 801420e:	462b      	mov	r3, r5
 8014210:	f000 f8e4 	bl	80143dc <fiprintf>
 8014214:	f000 fd26 	bl	8014c64 <abort>
 8014218:	4b04      	ldr	r3, [pc, #16]	; (801422c <__assert_func+0x38>)
 801421a:	461c      	mov	r4, r3
 801421c:	e7f3      	b.n	8014206 <__assert_func+0x12>
 801421e:	bf00      	nop
 8014220:	2000019c 	.word	0x2000019c
 8014224:	08017baa 	.word	0x08017baa
 8014228:	08017bb7 	.word	0x08017bb7
 801422c:	08017be5 	.word	0x08017be5

08014230 <std>:
 8014230:	2300      	movs	r3, #0
 8014232:	b510      	push	{r4, lr}
 8014234:	4604      	mov	r4, r0
 8014236:	e9c0 3300 	strd	r3, r3, [r0]
 801423a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801423e:	6083      	str	r3, [r0, #8]
 8014240:	8181      	strh	r1, [r0, #12]
 8014242:	6643      	str	r3, [r0, #100]	; 0x64
 8014244:	81c2      	strh	r2, [r0, #14]
 8014246:	6183      	str	r3, [r0, #24]
 8014248:	4619      	mov	r1, r3
 801424a:	2208      	movs	r2, #8
 801424c:	305c      	adds	r0, #92	; 0x5c
 801424e:	f7ff fea3 	bl	8013f98 <memset>
 8014252:	4b05      	ldr	r3, [pc, #20]	; (8014268 <std+0x38>)
 8014254:	6263      	str	r3, [r4, #36]	; 0x24
 8014256:	4b05      	ldr	r3, [pc, #20]	; (801426c <std+0x3c>)
 8014258:	62a3      	str	r3, [r4, #40]	; 0x28
 801425a:	4b05      	ldr	r3, [pc, #20]	; (8014270 <std+0x40>)
 801425c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801425e:	4b05      	ldr	r3, [pc, #20]	; (8014274 <std+0x44>)
 8014260:	6224      	str	r4, [r4, #32]
 8014262:	6323      	str	r3, [r4, #48]	; 0x30
 8014264:	bd10      	pop	{r4, pc}
 8014266:	bf00      	nop
 8014268:	08014a39 	.word	0x08014a39
 801426c:	08014a5b 	.word	0x08014a5b
 8014270:	08014a93 	.word	0x08014a93
 8014274:	08014ab7 	.word	0x08014ab7

08014278 <_cleanup_r>:
 8014278:	4901      	ldr	r1, [pc, #4]	; (8014280 <_cleanup_r+0x8>)
 801427a:	f000 b8c1 	b.w	8014400 <_fwalk_reent>
 801427e:	bf00      	nop
 8014280:	08014da1 	.word	0x08014da1

08014284 <__sfmoreglue>:
 8014284:	b570      	push	{r4, r5, r6, lr}
 8014286:	1e4a      	subs	r2, r1, #1
 8014288:	2568      	movs	r5, #104	; 0x68
 801428a:	4355      	muls	r5, r2
 801428c:	460e      	mov	r6, r1
 801428e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014292:	f7ff fed9 	bl	8014048 <_malloc_r>
 8014296:	4604      	mov	r4, r0
 8014298:	b140      	cbz	r0, 80142ac <__sfmoreglue+0x28>
 801429a:	2100      	movs	r1, #0
 801429c:	e9c0 1600 	strd	r1, r6, [r0]
 80142a0:	300c      	adds	r0, #12
 80142a2:	60a0      	str	r0, [r4, #8]
 80142a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80142a8:	f7ff fe76 	bl	8013f98 <memset>
 80142ac:	4620      	mov	r0, r4
 80142ae:	bd70      	pop	{r4, r5, r6, pc}

080142b0 <__sfp_lock_acquire>:
 80142b0:	4801      	ldr	r0, [pc, #4]	; (80142b8 <__sfp_lock_acquire+0x8>)
 80142b2:	f000 b8c5 	b.w	8014440 <__retarget_lock_acquire_recursive>
 80142b6:	bf00      	nop
 80142b8:	200085dc 	.word	0x200085dc

080142bc <__sfp_lock_release>:
 80142bc:	4801      	ldr	r0, [pc, #4]	; (80142c4 <__sfp_lock_release+0x8>)
 80142be:	f000 b8c0 	b.w	8014442 <__retarget_lock_release_recursive>
 80142c2:	bf00      	nop
 80142c4:	200085dc 	.word	0x200085dc

080142c8 <__sinit_lock_acquire>:
 80142c8:	4801      	ldr	r0, [pc, #4]	; (80142d0 <__sinit_lock_acquire+0x8>)
 80142ca:	f000 b8b9 	b.w	8014440 <__retarget_lock_acquire_recursive>
 80142ce:	bf00      	nop
 80142d0:	200085d7 	.word	0x200085d7

080142d4 <__sinit_lock_release>:
 80142d4:	4801      	ldr	r0, [pc, #4]	; (80142dc <__sinit_lock_release+0x8>)
 80142d6:	f000 b8b4 	b.w	8014442 <__retarget_lock_release_recursive>
 80142da:	bf00      	nop
 80142dc:	200085d7 	.word	0x200085d7

080142e0 <__sinit>:
 80142e0:	b510      	push	{r4, lr}
 80142e2:	4604      	mov	r4, r0
 80142e4:	f7ff fff0 	bl	80142c8 <__sinit_lock_acquire>
 80142e8:	69a3      	ldr	r3, [r4, #24]
 80142ea:	b11b      	cbz	r3, 80142f4 <__sinit+0x14>
 80142ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142f0:	f7ff bff0 	b.w	80142d4 <__sinit_lock_release>
 80142f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80142f8:	6523      	str	r3, [r4, #80]	; 0x50
 80142fa:	4b13      	ldr	r3, [pc, #76]	; (8014348 <__sinit+0x68>)
 80142fc:	4a13      	ldr	r2, [pc, #76]	; (801434c <__sinit+0x6c>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	62a2      	str	r2, [r4, #40]	; 0x28
 8014302:	42a3      	cmp	r3, r4
 8014304:	bf04      	itt	eq
 8014306:	2301      	moveq	r3, #1
 8014308:	61a3      	streq	r3, [r4, #24]
 801430a:	4620      	mov	r0, r4
 801430c:	f000 f820 	bl	8014350 <__sfp>
 8014310:	6060      	str	r0, [r4, #4]
 8014312:	4620      	mov	r0, r4
 8014314:	f000 f81c 	bl	8014350 <__sfp>
 8014318:	60a0      	str	r0, [r4, #8]
 801431a:	4620      	mov	r0, r4
 801431c:	f000 f818 	bl	8014350 <__sfp>
 8014320:	2200      	movs	r2, #0
 8014322:	60e0      	str	r0, [r4, #12]
 8014324:	2104      	movs	r1, #4
 8014326:	6860      	ldr	r0, [r4, #4]
 8014328:	f7ff ff82 	bl	8014230 <std>
 801432c:	68a0      	ldr	r0, [r4, #8]
 801432e:	2201      	movs	r2, #1
 8014330:	2109      	movs	r1, #9
 8014332:	f7ff ff7d 	bl	8014230 <std>
 8014336:	68e0      	ldr	r0, [r4, #12]
 8014338:	2202      	movs	r2, #2
 801433a:	2112      	movs	r1, #18
 801433c:	f7ff ff78 	bl	8014230 <std>
 8014340:	2301      	movs	r3, #1
 8014342:	61a3      	str	r3, [r4, #24]
 8014344:	e7d2      	b.n	80142ec <__sinit+0xc>
 8014346:	bf00      	nop
 8014348:	08017b30 	.word	0x08017b30
 801434c:	08014279 	.word	0x08014279

08014350 <__sfp>:
 8014350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014352:	4607      	mov	r7, r0
 8014354:	f7ff ffac 	bl	80142b0 <__sfp_lock_acquire>
 8014358:	4b1e      	ldr	r3, [pc, #120]	; (80143d4 <__sfp+0x84>)
 801435a:	681e      	ldr	r6, [r3, #0]
 801435c:	69b3      	ldr	r3, [r6, #24]
 801435e:	b913      	cbnz	r3, 8014366 <__sfp+0x16>
 8014360:	4630      	mov	r0, r6
 8014362:	f7ff ffbd 	bl	80142e0 <__sinit>
 8014366:	3648      	adds	r6, #72	; 0x48
 8014368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801436c:	3b01      	subs	r3, #1
 801436e:	d503      	bpl.n	8014378 <__sfp+0x28>
 8014370:	6833      	ldr	r3, [r6, #0]
 8014372:	b30b      	cbz	r3, 80143b8 <__sfp+0x68>
 8014374:	6836      	ldr	r6, [r6, #0]
 8014376:	e7f7      	b.n	8014368 <__sfp+0x18>
 8014378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801437c:	b9d5      	cbnz	r5, 80143b4 <__sfp+0x64>
 801437e:	4b16      	ldr	r3, [pc, #88]	; (80143d8 <__sfp+0x88>)
 8014380:	60e3      	str	r3, [r4, #12]
 8014382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014386:	6665      	str	r5, [r4, #100]	; 0x64
 8014388:	f000 f859 	bl	801443e <__retarget_lock_init_recursive>
 801438c:	f7ff ff96 	bl	80142bc <__sfp_lock_release>
 8014390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014398:	6025      	str	r5, [r4, #0]
 801439a:	61a5      	str	r5, [r4, #24]
 801439c:	2208      	movs	r2, #8
 801439e:	4629      	mov	r1, r5
 80143a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80143a4:	f7ff fdf8 	bl	8013f98 <memset>
 80143a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80143ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80143b0:	4620      	mov	r0, r4
 80143b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b4:	3468      	adds	r4, #104	; 0x68
 80143b6:	e7d9      	b.n	801436c <__sfp+0x1c>
 80143b8:	2104      	movs	r1, #4
 80143ba:	4638      	mov	r0, r7
 80143bc:	f7ff ff62 	bl	8014284 <__sfmoreglue>
 80143c0:	4604      	mov	r4, r0
 80143c2:	6030      	str	r0, [r6, #0]
 80143c4:	2800      	cmp	r0, #0
 80143c6:	d1d5      	bne.n	8014374 <__sfp+0x24>
 80143c8:	f7ff ff78 	bl	80142bc <__sfp_lock_release>
 80143cc:	230c      	movs	r3, #12
 80143ce:	603b      	str	r3, [r7, #0]
 80143d0:	e7ee      	b.n	80143b0 <__sfp+0x60>
 80143d2:	bf00      	nop
 80143d4:	08017b30 	.word	0x08017b30
 80143d8:	ffff0001 	.word	0xffff0001

080143dc <fiprintf>:
 80143dc:	b40e      	push	{r1, r2, r3}
 80143de:	b503      	push	{r0, r1, lr}
 80143e0:	4601      	mov	r1, r0
 80143e2:	ab03      	add	r3, sp, #12
 80143e4:	4805      	ldr	r0, [pc, #20]	; (80143fc <fiprintf+0x20>)
 80143e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80143ea:	6800      	ldr	r0, [r0, #0]
 80143ec:	9301      	str	r3, [sp, #4]
 80143ee:	f000 f85f 	bl	80144b0 <_vfiprintf_r>
 80143f2:	b002      	add	sp, #8
 80143f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80143f8:	b003      	add	sp, #12
 80143fa:	4770      	bx	lr
 80143fc:	2000019c 	.word	0x2000019c

08014400 <_fwalk_reent>:
 8014400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014404:	4606      	mov	r6, r0
 8014406:	4688      	mov	r8, r1
 8014408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801440c:	2700      	movs	r7, #0
 801440e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014412:	f1b9 0901 	subs.w	r9, r9, #1
 8014416:	d505      	bpl.n	8014424 <_fwalk_reent+0x24>
 8014418:	6824      	ldr	r4, [r4, #0]
 801441a:	2c00      	cmp	r4, #0
 801441c:	d1f7      	bne.n	801440e <_fwalk_reent+0xe>
 801441e:	4638      	mov	r0, r7
 8014420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014424:	89ab      	ldrh	r3, [r5, #12]
 8014426:	2b01      	cmp	r3, #1
 8014428:	d907      	bls.n	801443a <_fwalk_reent+0x3a>
 801442a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801442e:	3301      	adds	r3, #1
 8014430:	d003      	beq.n	801443a <_fwalk_reent+0x3a>
 8014432:	4629      	mov	r1, r5
 8014434:	4630      	mov	r0, r6
 8014436:	47c0      	blx	r8
 8014438:	4307      	orrs	r7, r0
 801443a:	3568      	adds	r5, #104	; 0x68
 801443c:	e7e9      	b.n	8014412 <_fwalk_reent+0x12>

0801443e <__retarget_lock_init_recursive>:
 801443e:	4770      	bx	lr

08014440 <__retarget_lock_acquire_recursive>:
 8014440:	4770      	bx	lr

08014442 <__retarget_lock_release_recursive>:
 8014442:	4770      	bx	lr

08014444 <__malloc_lock>:
 8014444:	4801      	ldr	r0, [pc, #4]	; (801444c <__malloc_lock+0x8>)
 8014446:	f7ff bffb 	b.w	8014440 <__retarget_lock_acquire_recursive>
 801444a:	bf00      	nop
 801444c:	200085d8 	.word	0x200085d8

08014450 <__malloc_unlock>:
 8014450:	4801      	ldr	r0, [pc, #4]	; (8014458 <__malloc_unlock+0x8>)
 8014452:	f7ff bff6 	b.w	8014442 <__retarget_lock_release_recursive>
 8014456:	bf00      	nop
 8014458:	200085d8 	.word	0x200085d8

0801445c <__sfputc_r>:
 801445c:	6893      	ldr	r3, [r2, #8]
 801445e:	3b01      	subs	r3, #1
 8014460:	2b00      	cmp	r3, #0
 8014462:	b410      	push	{r4}
 8014464:	6093      	str	r3, [r2, #8]
 8014466:	da08      	bge.n	801447a <__sfputc_r+0x1e>
 8014468:	6994      	ldr	r4, [r2, #24]
 801446a:	42a3      	cmp	r3, r4
 801446c:	db01      	blt.n	8014472 <__sfputc_r+0x16>
 801446e:	290a      	cmp	r1, #10
 8014470:	d103      	bne.n	801447a <__sfputc_r+0x1e>
 8014472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014476:	f000 bb23 	b.w	8014ac0 <__swbuf_r>
 801447a:	6813      	ldr	r3, [r2, #0]
 801447c:	1c58      	adds	r0, r3, #1
 801447e:	6010      	str	r0, [r2, #0]
 8014480:	7019      	strb	r1, [r3, #0]
 8014482:	4608      	mov	r0, r1
 8014484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014488:	4770      	bx	lr

0801448a <__sfputs_r>:
 801448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	4614      	mov	r4, r2
 8014492:	18d5      	adds	r5, r2, r3
 8014494:	42ac      	cmp	r4, r5
 8014496:	d101      	bne.n	801449c <__sfputs_r+0x12>
 8014498:	2000      	movs	r0, #0
 801449a:	e007      	b.n	80144ac <__sfputs_r+0x22>
 801449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a0:	463a      	mov	r2, r7
 80144a2:	4630      	mov	r0, r6
 80144a4:	f7ff ffda 	bl	801445c <__sfputc_r>
 80144a8:	1c43      	adds	r3, r0, #1
 80144aa:	d1f3      	bne.n	8014494 <__sfputs_r+0xa>
 80144ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144b0 <_vfiprintf_r>:
 80144b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b4:	460d      	mov	r5, r1
 80144b6:	b09d      	sub	sp, #116	; 0x74
 80144b8:	4614      	mov	r4, r2
 80144ba:	4698      	mov	r8, r3
 80144bc:	4606      	mov	r6, r0
 80144be:	b118      	cbz	r0, 80144c8 <_vfiprintf_r+0x18>
 80144c0:	6983      	ldr	r3, [r0, #24]
 80144c2:	b90b      	cbnz	r3, 80144c8 <_vfiprintf_r+0x18>
 80144c4:	f7ff ff0c 	bl	80142e0 <__sinit>
 80144c8:	4b89      	ldr	r3, [pc, #548]	; (80146f0 <_vfiprintf_r+0x240>)
 80144ca:	429d      	cmp	r5, r3
 80144cc:	d11b      	bne.n	8014506 <_vfiprintf_r+0x56>
 80144ce:	6875      	ldr	r5, [r6, #4]
 80144d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144d2:	07d9      	lsls	r1, r3, #31
 80144d4:	d405      	bmi.n	80144e2 <_vfiprintf_r+0x32>
 80144d6:	89ab      	ldrh	r3, [r5, #12]
 80144d8:	059a      	lsls	r2, r3, #22
 80144da:	d402      	bmi.n	80144e2 <_vfiprintf_r+0x32>
 80144dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144de:	f7ff ffaf 	bl	8014440 <__retarget_lock_acquire_recursive>
 80144e2:	89ab      	ldrh	r3, [r5, #12]
 80144e4:	071b      	lsls	r3, r3, #28
 80144e6:	d501      	bpl.n	80144ec <_vfiprintf_r+0x3c>
 80144e8:	692b      	ldr	r3, [r5, #16]
 80144ea:	b9eb      	cbnz	r3, 8014528 <_vfiprintf_r+0x78>
 80144ec:	4629      	mov	r1, r5
 80144ee:	4630      	mov	r0, r6
 80144f0:	f000 fb4a 	bl	8014b88 <__swsetup_r>
 80144f4:	b1c0      	cbz	r0, 8014528 <_vfiprintf_r+0x78>
 80144f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144f8:	07dc      	lsls	r4, r3, #31
 80144fa:	d50e      	bpl.n	801451a <_vfiprintf_r+0x6a>
 80144fc:	f04f 30ff 	mov.w	r0, #4294967295
 8014500:	b01d      	add	sp, #116	; 0x74
 8014502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014506:	4b7b      	ldr	r3, [pc, #492]	; (80146f4 <_vfiprintf_r+0x244>)
 8014508:	429d      	cmp	r5, r3
 801450a:	d101      	bne.n	8014510 <_vfiprintf_r+0x60>
 801450c:	68b5      	ldr	r5, [r6, #8]
 801450e:	e7df      	b.n	80144d0 <_vfiprintf_r+0x20>
 8014510:	4b79      	ldr	r3, [pc, #484]	; (80146f8 <_vfiprintf_r+0x248>)
 8014512:	429d      	cmp	r5, r3
 8014514:	bf08      	it	eq
 8014516:	68f5      	ldreq	r5, [r6, #12]
 8014518:	e7da      	b.n	80144d0 <_vfiprintf_r+0x20>
 801451a:	89ab      	ldrh	r3, [r5, #12]
 801451c:	0598      	lsls	r0, r3, #22
 801451e:	d4ed      	bmi.n	80144fc <_vfiprintf_r+0x4c>
 8014520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014522:	f7ff ff8e 	bl	8014442 <__retarget_lock_release_recursive>
 8014526:	e7e9      	b.n	80144fc <_vfiprintf_r+0x4c>
 8014528:	2300      	movs	r3, #0
 801452a:	9309      	str	r3, [sp, #36]	; 0x24
 801452c:	2320      	movs	r3, #32
 801452e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014532:	f8cd 800c 	str.w	r8, [sp, #12]
 8014536:	2330      	movs	r3, #48	; 0x30
 8014538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80146fc <_vfiprintf_r+0x24c>
 801453c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014540:	f04f 0901 	mov.w	r9, #1
 8014544:	4623      	mov	r3, r4
 8014546:	469a      	mov	sl, r3
 8014548:	f813 2b01 	ldrb.w	r2, [r3], #1
 801454c:	b10a      	cbz	r2, 8014552 <_vfiprintf_r+0xa2>
 801454e:	2a25      	cmp	r2, #37	; 0x25
 8014550:	d1f9      	bne.n	8014546 <_vfiprintf_r+0x96>
 8014552:	ebba 0b04 	subs.w	fp, sl, r4
 8014556:	d00b      	beq.n	8014570 <_vfiprintf_r+0xc0>
 8014558:	465b      	mov	r3, fp
 801455a:	4622      	mov	r2, r4
 801455c:	4629      	mov	r1, r5
 801455e:	4630      	mov	r0, r6
 8014560:	f7ff ff93 	bl	801448a <__sfputs_r>
 8014564:	3001      	adds	r0, #1
 8014566:	f000 80aa 	beq.w	80146be <_vfiprintf_r+0x20e>
 801456a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801456c:	445a      	add	r2, fp
 801456e:	9209      	str	r2, [sp, #36]	; 0x24
 8014570:	f89a 3000 	ldrb.w	r3, [sl]
 8014574:	2b00      	cmp	r3, #0
 8014576:	f000 80a2 	beq.w	80146be <_vfiprintf_r+0x20e>
 801457a:	2300      	movs	r3, #0
 801457c:	f04f 32ff 	mov.w	r2, #4294967295
 8014580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014584:	f10a 0a01 	add.w	sl, sl, #1
 8014588:	9304      	str	r3, [sp, #16]
 801458a:	9307      	str	r3, [sp, #28]
 801458c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014590:	931a      	str	r3, [sp, #104]	; 0x68
 8014592:	4654      	mov	r4, sl
 8014594:	2205      	movs	r2, #5
 8014596:	f814 1b01 	ldrb.w	r1, [r4], #1
 801459a:	4858      	ldr	r0, [pc, #352]	; (80146fc <_vfiprintf_r+0x24c>)
 801459c:	f7eb fe50 	bl	8000240 <memchr>
 80145a0:	9a04      	ldr	r2, [sp, #16]
 80145a2:	b9d8      	cbnz	r0, 80145dc <_vfiprintf_r+0x12c>
 80145a4:	06d1      	lsls	r1, r2, #27
 80145a6:	bf44      	itt	mi
 80145a8:	2320      	movmi	r3, #32
 80145aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145ae:	0713      	lsls	r3, r2, #28
 80145b0:	bf44      	itt	mi
 80145b2:	232b      	movmi	r3, #43	; 0x2b
 80145b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145b8:	f89a 3000 	ldrb.w	r3, [sl]
 80145bc:	2b2a      	cmp	r3, #42	; 0x2a
 80145be:	d015      	beq.n	80145ec <_vfiprintf_r+0x13c>
 80145c0:	9a07      	ldr	r2, [sp, #28]
 80145c2:	4654      	mov	r4, sl
 80145c4:	2000      	movs	r0, #0
 80145c6:	f04f 0c0a 	mov.w	ip, #10
 80145ca:	4621      	mov	r1, r4
 80145cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145d0:	3b30      	subs	r3, #48	; 0x30
 80145d2:	2b09      	cmp	r3, #9
 80145d4:	d94e      	bls.n	8014674 <_vfiprintf_r+0x1c4>
 80145d6:	b1b0      	cbz	r0, 8014606 <_vfiprintf_r+0x156>
 80145d8:	9207      	str	r2, [sp, #28]
 80145da:	e014      	b.n	8014606 <_vfiprintf_r+0x156>
 80145dc:	eba0 0308 	sub.w	r3, r0, r8
 80145e0:	fa09 f303 	lsl.w	r3, r9, r3
 80145e4:	4313      	orrs	r3, r2
 80145e6:	9304      	str	r3, [sp, #16]
 80145e8:	46a2      	mov	sl, r4
 80145ea:	e7d2      	b.n	8014592 <_vfiprintf_r+0xe2>
 80145ec:	9b03      	ldr	r3, [sp, #12]
 80145ee:	1d19      	adds	r1, r3, #4
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	9103      	str	r1, [sp, #12]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	bfbb      	ittet	lt
 80145f8:	425b      	neglt	r3, r3
 80145fa:	f042 0202 	orrlt.w	r2, r2, #2
 80145fe:	9307      	strge	r3, [sp, #28]
 8014600:	9307      	strlt	r3, [sp, #28]
 8014602:	bfb8      	it	lt
 8014604:	9204      	strlt	r2, [sp, #16]
 8014606:	7823      	ldrb	r3, [r4, #0]
 8014608:	2b2e      	cmp	r3, #46	; 0x2e
 801460a:	d10c      	bne.n	8014626 <_vfiprintf_r+0x176>
 801460c:	7863      	ldrb	r3, [r4, #1]
 801460e:	2b2a      	cmp	r3, #42	; 0x2a
 8014610:	d135      	bne.n	801467e <_vfiprintf_r+0x1ce>
 8014612:	9b03      	ldr	r3, [sp, #12]
 8014614:	1d1a      	adds	r2, r3, #4
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	9203      	str	r2, [sp, #12]
 801461a:	2b00      	cmp	r3, #0
 801461c:	bfb8      	it	lt
 801461e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014622:	3402      	adds	r4, #2
 8014624:	9305      	str	r3, [sp, #20]
 8014626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801470c <_vfiprintf_r+0x25c>
 801462a:	7821      	ldrb	r1, [r4, #0]
 801462c:	2203      	movs	r2, #3
 801462e:	4650      	mov	r0, sl
 8014630:	f7eb fe06 	bl	8000240 <memchr>
 8014634:	b140      	cbz	r0, 8014648 <_vfiprintf_r+0x198>
 8014636:	2340      	movs	r3, #64	; 0x40
 8014638:	eba0 000a 	sub.w	r0, r0, sl
 801463c:	fa03 f000 	lsl.w	r0, r3, r0
 8014640:	9b04      	ldr	r3, [sp, #16]
 8014642:	4303      	orrs	r3, r0
 8014644:	3401      	adds	r4, #1
 8014646:	9304      	str	r3, [sp, #16]
 8014648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801464c:	482c      	ldr	r0, [pc, #176]	; (8014700 <_vfiprintf_r+0x250>)
 801464e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014652:	2206      	movs	r2, #6
 8014654:	f7eb fdf4 	bl	8000240 <memchr>
 8014658:	2800      	cmp	r0, #0
 801465a:	d03f      	beq.n	80146dc <_vfiprintf_r+0x22c>
 801465c:	4b29      	ldr	r3, [pc, #164]	; (8014704 <_vfiprintf_r+0x254>)
 801465e:	bb1b      	cbnz	r3, 80146a8 <_vfiprintf_r+0x1f8>
 8014660:	9b03      	ldr	r3, [sp, #12]
 8014662:	3307      	adds	r3, #7
 8014664:	f023 0307 	bic.w	r3, r3, #7
 8014668:	3308      	adds	r3, #8
 801466a:	9303      	str	r3, [sp, #12]
 801466c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801466e:	443b      	add	r3, r7
 8014670:	9309      	str	r3, [sp, #36]	; 0x24
 8014672:	e767      	b.n	8014544 <_vfiprintf_r+0x94>
 8014674:	fb0c 3202 	mla	r2, ip, r2, r3
 8014678:	460c      	mov	r4, r1
 801467a:	2001      	movs	r0, #1
 801467c:	e7a5      	b.n	80145ca <_vfiprintf_r+0x11a>
 801467e:	2300      	movs	r3, #0
 8014680:	3401      	adds	r4, #1
 8014682:	9305      	str	r3, [sp, #20]
 8014684:	4619      	mov	r1, r3
 8014686:	f04f 0c0a 	mov.w	ip, #10
 801468a:	4620      	mov	r0, r4
 801468c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014690:	3a30      	subs	r2, #48	; 0x30
 8014692:	2a09      	cmp	r2, #9
 8014694:	d903      	bls.n	801469e <_vfiprintf_r+0x1ee>
 8014696:	2b00      	cmp	r3, #0
 8014698:	d0c5      	beq.n	8014626 <_vfiprintf_r+0x176>
 801469a:	9105      	str	r1, [sp, #20]
 801469c:	e7c3      	b.n	8014626 <_vfiprintf_r+0x176>
 801469e:	fb0c 2101 	mla	r1, ip, r1, r2
 80146a2:	4604      	mov	r4, r0
 80146a4:	2301      	movs	r3, #1
 80146a6:	e7f0      	b.n	801468a <_vfiprintf_r+0x1da>
 80146a8:	ab03      	add	r3, sp, #12
 80146aa:	9300      	str	r3, [sp, #0]
 80146ac:	462a      	mov	r2, r5
 80146ae:	4b16      	ldr	r3, [pc, #88]	; (8014708 <_vfiprintf_r+0x258>)
 80146b0:	a904      	add	r1, sp, #16
 80146b2:	4630      	mov	r0, r6
 80146b4:	f3af 8000 	nop.w
 80146b8:	4607      	mov	r7, r0
 80146ba:	1c78      	adds	r0, r7, #1
 80146bc:	d1d6      	bne.n	801466c <_vfiprintf_r+0x1bc>
 80146be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146c0:	07d9      	lsls	r1, r3, #31
 80146c2:	d405      	bmi.n	80146d0 <_vfiprintf_r+0x220>
 80146c4:	89ab      	ldrh	r3, [r5, #12]
 80146c6:	059a      	lsls	r2, r3, #22
 80146c8:	d402      	bmi.n	80146d0 <_vfiprintf_r+0x220>
 80146ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146cc:	f7ff feb9 	bl	8014442 <__retarget_lock_release_recursive>
 80146d0:	89ab      	ldrh	r3, [r5, #12]
 80146d2:	065b      	lsls	r3, r3, #25
 80146d4:	f53f af12 	bmi.w	80144fc <_vfiprintf_r+0x4c>
 80146d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146da:	e711      	b.n	8014500 <_vfiprintf_r+0x50>
 80146dc:	ab03      	add	r3, sp, #12
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	462a      	mov	r2, r5
 80146e2:	4b09      	ldr	r3, [pc, #36]	; (8014708 <_vfiprintf_r+0x258>)
 80146e4:	a904      	add	r1, sp, #16
 80146e6:	4630      	mov	r0, r6
 80146e8:	f000 f880 	bl	80147ec <_printf_i>
 80146ec:	e7e4      	b.n	80146b8 <_vfiprintf_r+0x208>
 80146ee:	bf00      	nop
 80146f0:	08017c08 	.word	0x08017c08
 80146f4:	08017c28 	.word	0x08017c28
 80146f8:	08017be8 	.word	0x08017be8
 80146fc:	08017c48 	.word	0x08017c48
 8014700:	08017c52 	.word	0x08017c52
 8014704:	00000000 	.word	0x00000000
 8014708:	0801448b 	.word	0x0801448b
 801470c:	08017c4e 	.word	0x08017c4e

08014710 <_printf_common>:
 8014710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014714:	4616      	mov	r6, r2
 8014716:	4699      	mov	r9, r3
 8014718:	688a      	ldr	r2, [r1, #8]
 801471a:	690b      	ldr	r3, [r1, #16]
 801471c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014720:	4293      	cmp	r3, r2
 8014722:	bfb8      	it	lt
 8014724:	4613      	movlt	r3, r2
 8014726:	6033      	str	r3, [r6, #0]
 8014728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801472c:	4607      	mov	r7, r0
 801472e:	460c      	mov	r4, r1
 8014730:	b10a      	cbz	r2, 8014736 <_printf_common+0x26>
 8014732:	3301      	adds	r3, #1
 8014734:	6033      	str	r3, [r6, #0]
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	0699      	lsls	r1, r3, #26
 801473a:	bf42      	ittt	mi
 801473c:	6833      	ldrmi	r3, [r6, #0]
 801473e:	3302      	addmi	r3, #2
 8014740:	6033      	strmi	r3, [r6, #0]
 8014742:	6825      	ldr	r5, [r4, #0]
 8014744:	f015 0506 	ands.w	r5, r5, #6
 8014748:	d106      	bne.n	8014758 <_printf_common+0x48>
 801474a:	f104 0a19 	add.w	sl, r4, #25
 801474e:	68e3      	ldr	r3, [r4, #12]
 8014750:	6832      	ldr	r2, [r6, #0]
 8014752:	1a9b      	subs	r3, r3, r2
 8014754:	42ab      	cmp	r3, r5
 8014756:	dc26      	bgt.n	80147a6 <_printf_common+0x96>
 8014758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801475c:	1e13      	subs	r3, r2, #0
 801475e:	6822      	ldr	r2, [r4, #0]
 8014760:	bf18      	it	ne
 8014762:	2301      	movne	r3, #1
 8014764:	0692      	lsls	r2, r2, #26
 8014766:	d42b      	bmi.n	80147c0 <_printf_common+0xb0>
 8014768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801476c:	4649      	mov	r1, r9
 801476e:	4638      	mov	r0, r7
 8014770:	47c0      	blx	r8
 8014772:	3001      	adds	r0, #1
 8014774:	d01e      	beq.n	80147b4 <_printf_common+0xa4>
 8014776:	6823      	ldr	r3, [r4, #0]
 8014778:	68e5      	ldr	r5, [r4, #12]
 801477a:	6832      	ldr	r2, [r6, #0]
 801477c:	f003 0306 	and.w	r3, r3, #6
 8014780:	2b04      	cmp	r3, #4
 8014782:	bf08      	it	eq
 8014784:	1aad      	subeq	r5, r5, r2
 8014786:	68a3      	ldr	r3, [r4, #8]
 8014788:	6922      	ldr	r2, [r4, #16]
 801478a:	bf0c      	ite	eq
 801478c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014790:	2500      	movne	r5, #0
 8014792:	4293      	cmp	r3, r2
 8014794:	bfc4      	itt	gt
 8014796:	1a9b      	subgt	r3, r3, r2
 8014798:	18ed      	addgt	r5, r5, r3
 801479a:	2600      	movs	r6, #0
 801479c:	341a      	adds	r4, #26
 801479e:	42b5      	cmp	r5, r6
 80147a0:	d11a      	bne.n	80147d8 <_printf_common+0xc8>
 80147a2:	2000      	movs	r0, #0
 80147a4:	e008      	b.n	80147b8 <_printf_common+0xa8>
 80147a6:	2301      	movs	r3, #1
 80147a8:	4652      	mov	r2, sl
 80147aa:	4649      	mov	r1, r9
 80147ac:	4638      	mov	r0, r7
 80147ae:	47c0      	blx	r8
 80147b0:	3001      	adds	r0, #1
 80147b2:	d103      	bne.n	80147bc <_printf_common+0xac>
 80147b4:	f04f 30ff 	mov.w	r0, #4294967295
 80147b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147bc:	3501      	adds	r5, #1
 80147be:	e7c6      	b.n	801474e <_printf_common+0x3e>
 80147c0:	18e1      	adds	r1, r4, r3
 80147c2:	1c5a      	adds	r2, r3, #1
 80147c4:	2030      	movs	r0, #48	; 0x30
 80147c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80147ca:	4422      	add	r2, r4
 80147cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80147d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80147d4:	3302      	adds	r3, #2
 80147d6:	e7c7      	b.n	8014768 <_printf_common+0x58>
 80147d8:	2301      	movs	r3, #1
 80147da:	4622      	mov	r2, r4
 80147dc:	4649      	mov	r1, r9
 80147de:	4638      	mov	r0, r7
 80147e0:	47c0      	blx	r8
 80147e2:	3001      	adds	r0, #1
 80147e4:	d0e6      	beq.n	80147b4 <_printf_common+0xa4>
 80147e6:	3601      	adds	r6, #1
 80147e8:	e7d9      	b.n	801479e <_printf_common+0x8e>
	...

080147ec <_printf_i>:
 80147ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147f0:	460c      	mov	r4, r1
 80147f2:	4691      	mov	r9, r2
 80147f4:	7e27      	ldrb	r7, [r4, #24]
 80147f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80147f8:	2f78      	cmp	r7, #120	; 0x78
 80147fa:	4680      	mov	r8, r0
 80147fc:	469a      	mov	sl, r3
 80147fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014802:	d807      	bhi.n	8014814 <_printf_i+0x28>
 8014804:	2f62      	cmp	r7, #98	; 0x62
 8014806:	d80a      	bhi.n	801481e <_printf_i+0x32>
 8014808:	2f00      	cmp	r7, #0
 801480a:	f000 80d8 	beq.w	80149be <_printf_i+0x1d2>
 801480e:	2f58      	cmp	r7, #88	; 0x58
 8014810:	f000 80a3 	beq.w	801495a <_printf_i+0x16e>
 8014814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801481c:	e03a      	b.n	8014894 <_printf_i+0xa8>
 801481e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014822:	2b15      	cmp	r3, #21
 8014824:	d8f6      	bhi.n	8014814 <_printf_i+0x28>
 8014826:	a001      	add	r0, pc, #4	; (adr r0, 801482c <_printf_i+0x40>)
 8014828:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801482c:	08014885 	.word	0x08014885
 8014830:	08014899 	.word	0x08014899
 8014834:	08014815 	.word	0x08014815
 8014838:	08014815 	.word	0x08014815
 801483c:	08014815 	.word	0x08014815
 8014840:	08014815 	.word	0x08014815
 8014844:	08014899 	.word	0x08014899
 8014848:	08014815 	.word	0x08014815
 801484c:	08014815 	.word	0x08014815
 8014850:	08014815 	.word	0x08014815
 8014854:	08014815 	.word	0x08014815
 8014858:	080149a5 	.word	0x080149a5
 801485c:	080148c9 	.word	0x080148c9
 8014860:	08014987 	.word	0x08014987
 8014864:	08014815 	.word	0x08014815
 8014868:	08014815 	.word	0x08014815
 801486c:	080149c7 	.word	0x080149c7
 8014870:	08014815 	.word	0x08014815
 8014874:	080148c9 	.word	0x080148c9
 8014878:	08014815 	.word	0x08014815
 801487c:	08014815 	.word	0x08014815
 8014880:	0801498f 	.word	0x0801498f
 8014884:	680b      	ldr	r3, [r1, #0]
 8014886:	1d1a      	adds	r2, r3, #4
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	600a      	str	r2, [r1, #0]
 801488c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014894:	2301      	movs	r3, #1
 8014896:	e0a3      	b.n	80149e0 <_printf_i+0x1f4>
 8014898:	6825      	ldr	r5, [r4, #0]
 801489a:	6808      	ldr	r0, [r1, #0]
 801489c:	062e      	lsls	r6, r5, #24
 801489e:	f100 0304 	add.w	r3, r0, #4
 80148a2:	d50a      	bpl.n	80148ba <_printf_i+0xce>
 80148a4:	6805      	ldr	r5, [r0, #0]
 80148a6:	600b      	str	r3, [r1, #0]
 80148a8:	2d00      	cmp	r5, #0
 80148aa:	da03      	bge.n	80148b4 <_printf_i+0xc8>
 80148ac:	232d      	movs	r3, #45	; 0x2d
 80148ae:	426d      	negs	r5, r5
 80148b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148b4:	485e      	ldr	r0, [pc, #376]	; (8014a30 <_printf_i+0x244>)
 80148b6:	230a      	movs	r3, #10
 80148b8:	e019      	b.n	80148ee <_printf_i+0x102>
 80148ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80148be:	6805      	ldr	r5, [r0, #0]
 80148c0:	600b      	str	r3, [r1, #0]
 80148c2:	bf18      	it	ne
 80148c4:	b22d      	sxthne	r5, r5
 80148c6:	e7ef      	b.n	80148a8 <_printf_i+0xbc>
 80148c8:	680b      	ldr	r3, [r1, #0]
 80148ca:	6825      	ldr	r5, [r4, #0]
 80148cc:	1d18      	adds	r0, r3, #4
 80148ce:	6008      	str	r0, [r1, #0]
 80148d0:	0628      	lsls	r0, r5, #24
 80148d2:	d501      	bpl.n	80148d8 <_printf_i+0xec>
 80148d4:	681d      	ldr	r5, [r3, #0]
 80148d6:	e002      	b.n	80148de <_printf_i+0xf2>
 80148d8:	0669      	lsls	r1, r5, #25
 80148da:	d5fb      	bpl.n	80148d4 <_printf_i+0xe8>
 80148dc:	881d      	ldrh	r5, [r3, #0]
 80148de:	4854      	ldr	r0, [pc, #336]	; (8014a30 <_printf_i+0x244>)
 80148e0:	2f6f      	cmp	r7, #111	; 0x6f
 80148e2:	bf0c      	ite	eq
 80148e4:	2308      	moveq	r3, #8
 80148e6:	230a      	movne	r3, #10
 80148e8:	2100      	movs	r1, #0
 80148ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80148ee:	6866      	ldr	r6, [r4, #4]
 80148f0:	60a6      	str	r6, [r4, #8]
 80148f2:	2e00      	cmp	r6, #0
 80148f4:	bfa2      	ittt	ge
 80148f6:	6821      	ldrge	r1, [r4, #0]
 80148f8:	f021 0104 	bicge.w	r1, r1, #4
 80148fc:	6021      	strge	r1, [r4, #0]
 80148fe:	b90d      	cbnz	r5, 8014904 <_printf_i+0x118>
 8014900:	2e00      	cmp	r6, #0
 8014902:	d04d      	beq.n	80149a0 <_printf_i+0x1b4>
 8014904:	4616      	mov	r6, r2
 8014906:	fbb5 f1f3 	udiv	r1, r5, r3
 801490a:	fb03 5711 	mls	r7, r3, r1, r5
 801490e:	5dc7      	ldrb	r7, [r0, r7]
 8014910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014914:	462f      	mov	r7, r5
 8014916:	42bb      	cmp	r3, r7
 8014918:	460d      	mov	r5, r1
 801491a:	d9f4      	bls.n	8014906 <_printf_i+0x11a>
 801491c:	2b08      	cmp	r3, #8
 801491e:	d10b      	bne.n	8014938 <_printf_i+0x14c>
 8014920:	6823      	ldr	r3, [r4, #0]
 8014922:	07df      	lsls	r7, r3, #31
 8014924:	d508      	bpl.n	8014938 <_printf_i+0x14c>
 8014926:	6923      	ldr	r3, [r4, #16]
 8014928:	6861      	ldr	r1, [r4, #4]
 801492a:	4299      	cmp	r1, r3
 801492c:	bfde      	ittt	le
 801492e:	2330      	movle	r3, #48	; 0x30
 8014930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014938:	1b92      	subs	r2, r2, r6
 801493a:	6122      	str	r2, [r4, #16]
 801493c:	f8cd a000 	str.w	sl, [sp]
 8014940:	464b      	mov	r3, r9
 8014942:	aa03      	add	r2, sp, #12
 8014944:	4621      	mov	r1, r4
 8014946:	4640      	mov	r0, r8
 8014948:	f7ff fee2 	bl	8014710 <_printf_common>
 801494c:	3001      	adds	r0, #1
 801494e:	d14c      	bne.n	80149ea <_printf_i+0x1fe>
 8014950:	f04f 30ff 	mov.w	r0, #4294967295
 8014954:	b004      	add	sp, #16
 8014956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801495a:	4835      	ldr	r0, [pc, #212]	; (8014a30 <_printf_i+0x244>)
 801495c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014960:	6823      	ldr	r3, [r4, #0]
 8014962:	680e      	ldr	r6, [r1, #0]
 8014964:	061f      	lsls	r7, r3, #24
 8014966:	f856 5b04 	ldr.w	r5, [r6], #4
 801496a:	600e      	str	r6, [r1, #0]
 801496c:	d514      	bpl.n	8014998 <_printf_i+0x1ac>
 801496e:	07d9      	lsls	r1, r3, #31
 8014970:	bf44      	itt	mi
 8014972:	f043 0320 	orrmi.w	r3, r3, #32
 8014976:	6023      	strmi	r3, [r4, #0]
 8014978:	b91d      	cbnz	r5, 8014982 <_printf_i+0x196>
 801497a:	6823      	ldr	r3, [r4, #0]
 801497c:	f023 0320 	bic.w	r3, r3, #32
 8014980:	6023      	str	r3, [r4, #0]
 8014982:	2310      	movs	r3, #16
 8014984:	e7b0      	b.n	80148e8 <_printf_i+0xfc>
 8014986:	6823      	ldr	r3, [r4, #0]
 8014988:	f043 0320 	orr.w	r3, r3, #32
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	2378      	movs	r3, #120	; 0x78
 8014990:	4828      	ldr	r0, [pc, #160]	; (8014a34 <_printf_i+0x248>)
 8014992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014996:	e7e3      	b.n	8014960 <_printf_i+0x174>
 8014998:	065e      	lsls	r6, r3, #25
 801499a:	bf48      	it	mi
 801499c:	b2ad      	uxthmi	r5, r5
 801499e:	e7e6      	b.n	801496e <_printf_i+0x182>
 80149a0:	4616      	mov	r6, r2
 80149a2:	e7bb      	b.n	801491c <_printf_i+0x130>
 80149a4:	680b      	ldr	r3, [r1, #0]
 80149a6:	6826      	ldr	r6, [r4, #0]
 80149a8:	6960      	ldr	r0, [r4, #20]
 80149aa:	1d1d      	adds	r5, r3, #4
 80149ac:	600d      	str	r5, [r1, #0]
 80149ae:	0635      	lsls	r5, r6, #24
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	d501      	bpl.n	80149b8 <_printf_i+0x1cc>
 80149b4:	6018      	str	r0, [r3, #0]
 80149b6:	e002      	b.n	80149be <_printf_i+0x1d2>
 80149b8:	0671      	lsls	r1, r6, #25
 80149ba:	d5fb      	bpl.n	80149b4 <_printf_i+0x1c8>
 80149bc:	8018      	strh	r0, [r3, #0]
 80149be:	2300      	movs	r3, #0
 80149c0:	6123      	str	r3, [r4, #16]
 80149c2:	4616      	mov	r6, r2
 80149c4:	e7ba      	b.n	801493c <_printf_i+0x150>
 80149c6:	680b      	ldr	r3, [r1, #0]
 80149c8:	1d1a      	adds	r2, r3, #4
 80149ca:	600a      	str	r2, [r1, #0]
 80149cc:	681e      	ldr	r6, [r3, #0]
 80149ce:	6862      	ldr	r2, [r4, #4]
 80149d0:	2100      	movs	r1, #0
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7eb fc34 	bl	8000240 <memchr>
 80149d8:	b108      	cbz	r0, 80149de <_printf_i+0x1f2>
 80149da:	1b80      	subs	r0, r0, r6
 80149dc:	6060      	str	r0, [r4, #4]
 80149de:	6863      	ldr	r3, [r4, #4]
 80149e0:	6123      	str	r3, [r4, #16]
 80149e2:	2300      	movs	r3, #0
 80149e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149e8:	e7a8      	b.n	801493c <_printf_i+0x150>
 80149ea:	6923      	ldr	r3, [r4, #16]
 80149ec:	4632      	mov	r2, r6
 80149ee:	4649      	mov	r1, r9
 80149f0:	4640      	mov	r0, r8
 80149f2:	47d0      	blx	sl
 80149f4:	3001      	adds	r0, #1
 80149f6:	d0ab      	beq.n	8014950 <_printf_i+0x164>
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	079b      	lsls	r3, r3, #30
 80149fc:	d413      	bmi.n	8014a26 <_printf_i+0x23a>
 80149fe:	68e0      	ldr	r0, [r4, #12]
 8014a00:	9b03      	ldr	r3, [sp, #12]
 8014a02:	4298      	cmp	r0, r3
 8014a04:	bfb8      	it	lt
 8014a06:	4618      	movlt	r0, r3
 8014a08:	e7a4      	b.n	8014954 <_printf_i+0x168>
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	4632      	mov	r2, r6
 8014a0e:	4649      	mov	r1, r9
 8014a10:	4640      	mov	r0, r8
 8014a12:	47d0      	blx	sl
 8014a14:	3001      	adds	r0, #1
 8014a16:	d09b      	beq.n	8014950 <_printf_i+0x164>
 8014a18:	3501      	adds	r5, #1
 8014a1a:	68e3      	ldr	r3, [r4, #12]
 8014a1c:	9903      	ldr	r1, [sp, #12]
 8014a1e:	1a5b      	subs	r3, r3, r1
 8014a20:	42ab      	cmp	r3, r5
 8014a22:	dcf2      	bgt.n	8014a0a <_printf_i+0x21e>
 8014a24:	e7eb      	b.n	80149fe <_printf_i+0x212>
 8014a26:	2500      	movs	r5, #0
 8014a28:	f104 0619 	add.w	r6, r4, #25
 8014a2c:	e7f5      	b.n	8014a1a <_printf_i+0x22e>
 8014a2e:	bf00      	nop
 8014a30:	08017c59 	.word	0x08017c59
 8014a34:	08017c6a 	.word	0x08017c6a

08014a38 <__sread>:
 8014a38:	b510      	push	{r4, lr}
 8014a3a:	460c      	mov	r4, r1
 8014a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a40:	f000 fa60 	bl	8014f04 <_read_r>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	bfab      	itete	ge
 8014a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8014a4c:	181b      	addge	r3, r3, r0
 8014a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a52:	bfac      	ite	ge
 8014a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a56:	81a3      	strhlt	r3, [r4, #12]
 8014a58:	bd10      	pop	{r4, pc}

08014a5a <__swrite>:
 8014a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a5e:	461f      	mov	r7, r3
 8014a60:	898b      	ldrh	r3, [r1, #12]
 8014a62:	05db      	lsls	r3, r3, #23
 8014a64:	4605      	mov	r5, r0
 8014a66:	460c      	mov	r4, r1
 8014a68:	4616      	mov	r6, r2
 8014a6a:	d505      	bpl.n	8014a78 <__swrite+0x1e>
 8014a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a70:	2302      	movs	r3, #2
 8014a72:	2200      	movs	r2, #0
 8014a74:	f000 f9d0 	bl	8014e18 <_lseek_r>
 8014a78:	89a3      	ldrh	r3, [r4, #12]
 8014a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a82:	81a3      	strh	r3, [r4, #12]
 8014a84:	4632      	mov	r2, r6
 8014a86:	463b      	mov	r3, r7
 8014a88:	4628      	mov	r0, r5
 8014a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a8e:	f000 b869 	b.w	8014b64 <_write_r>

08014a92 <__sseek>:
 8014a92:	b510      	push	{r4, lr}
 8014a94:	460c      	mov	r4, r1
 8014a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9a:	f000 f9bd 	bl	8014e18 <_lseek_r>
 8014a9e:	1c43      	adds	r3, r0, #1
 8014aa0:	89a3      	ldrh	r3, [r4, #12]
 8014aa2:	bf15      	itete	ne
 8014aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014aae:	81a3      	strheq	r3, [r4, #12]
 8014ab0:	bf18      	it	ne
 8014ab2:	81a3      	strhne	r3, [r4, #12]
 8014ab4:	bd10      	pop	{r4, pc}

08014ab6 <__sclose>:
 8014ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014aba:	f000 b8db 	b.w	8014c74 <_close_r>
	...

08014ac0 <__swbuf_r>:
 8014ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ac2:	460e      	mov	r6, r1
 8014ac4:	4614      	mov	r4, r2
 8014ac6:	4605      	mov	r5, r0
 8014ac8:	b118      	cbz	r0, 8014ad2 <__swbuf_r+0x12>
 8014aca:	6983      	ldr	r3, [r0, #24]
 8014acc:	b90b      	cbnz	r3, 8014ad2 <__swbuf_r+0x12>
 8014ace:	f7ff fc07 	bl	80142e0 <__sinit>
 8014ad2:	4b21      	ldr	r3, [pc, #132]	; (8014b58 <__swbuf_r+0x98>)
 8014ad4:	429c      	cmp	r4, r3
 8014ad6:	d12b      	bne.n	8014b30 <__swbuf_r+0x70>
 8014ad8:	686c      	ldr	r4, [r5, #4]
 8014ada:	69a3      	ldr	r3, [r4, #24]
 8014adc:	60a3      	str	r3, [r4, #8]
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	071a      	lsls	r2, r3, #28
 8014ae2:	d52f      	bpl.n	8014b44 <__swbuf_r+0x84>
 8014ae4:	6923      	ldr	r3, [r4, #16]
 8014ae6:	b36b      	cbz	r3, 8014b44 <__swbuf_r+0x84>
 8014ae8:	6923      	ldr	r3, [r4, #16]
 8014aea:	6820      	ldr	r0, [r4, #0]
 8014aec:	1ac0      	subs	r0, r0, r3
 8014aee:	6963      	ldr	r3, [r4, #20]
 8014af0:	b2f6      	uxtb	r6, r6
 8014af2:	4283      	cmp	r3, r0
 8014af4:	4637      	mov	r7, r6
 8014af6:	dc04      	bgt.n	8014b02 <__swbuf_r+0x42>
 8014af8:	4621      	mov	r1, r4
 8014afa:	4628      	mov	r0, r5
 8014afc:	f000 f950 	bl	8014da0 <_fflush_r>
 8014b00:	bb30      	cbnz	r0, 8014b50 <__swbuf_r+0x90>
 8014b02:	68a3      	ldr	r3, [r4, #8]
 8014b04:	3b01      	subs	r3, #1
 8014b06:	60a3      	str	r3, [r4, #8]
 8014b08:	6823      	ldr	r3, [r4, #0]
 8014b0a:	1c5a      	adds	r2, r3, #1
 8014b0c:	6022      	str	r2, [r4, #0]
 8014b0e:	701e      	strb	r6, [r3, #0]
 8014b10:	6963      	ldr	r3, [r4, #20]
 8014b12:	3001      	adds	r0, #1
 8014b14:	4283      	cmp	r3, r0
 8014b16:	d004      	beq.n	8014b22 <__swbuf_r+0x62>
 8014b18:	89a3      	ldrh	r3, [r4, #12]
 8014b1a:	07db      	lsls	r3, r3, #31
 8014b1c:	d506      	bpl.n	8014b2c <__swbuf_r+0x6c>
 8014b1e:	2e0a      	cmp	r6, #10
 8014b20:	d104      	bne.n	8014b2c <__swbuf_r+0x6c>
 8014b22:	4621      	mov	r1, r4
 8014b24:	4628      	mov	r0, r5
 8014b26:	f000 f93b 	bl	8014da0 <_fflush_r>
 8014b2a:	b988      	cbnz	r0, 8014b50 <__swbuf_r+0x90>
 8014b2c:	4638      	mov	r0, r7
 8014b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b30:	4b0a      	ldr	r3, [pc, #40]	; (8014b5c <__swbuf_r+0x9c>)
 8014b32:	429c      	cmp	r4, r3
 8014b34:	d101      	bne.n	8014b3a <__swbuf_r+0x7a>
 8014b36:	68ac      	ldr	r4, [r5, #8]
 8014b38:	e7cf      	b.n	8014ada <__swbuf_r+0x1a>
 8014b3a:	4b09      	ldr	r3, [pc, #36]	; (8014b60 <__swbuf_r+0xa0>)
 8014b3c:	429c      	cmp	r4, r3
 8014b3e:	bf08      	it	eq
 8014b40:	68ec      	ldreq	r4, [r5, #12]
 8014b42:	e7ca      	b.n	8014ada <__swbuf_r+0x1a>
 8014b44:	4621      	mov	r1, r4
 8014b46:	4628      	mov	r0, r5
 8014b48:	f000 f81e 	bl	8014b88 <__swsetup_r>
 8014b4c:	2800      	cmp	r0, #0
 8014b4e:	d0cb      	beq.n	8014ae8 <__swbuf_r+0x28>
 8014b50:	f04f 37ff 	mov.w	r7, #4294967295
 8014b54:	e7ea      	b.n	8014b2c <__swbuf_r+0x6c>
 8014b56:	bf00      	nop
 8014b58:	08017c08 	.word	0x08017c08
 8014b5c:	08017c28 	.word	0x08017c28
 8014b60:	08017be8 	.word	0x08017be8

08014b64 <_write_r>:
 8014b64:	b538      	push	{r3, r4, r5, lr}
 8014b66:	4d07      	ldr	r5, [pc, #28]	; (8014b84 <_write_r+0x20>)
 8014b68:	4604      	mov	r4, r0
 8014b6a:	4608      	mov	r0, r1
 8014b6c:	4611      	mov	r1, r2
 8014b6e:	2200      	movs	r2, #0
 8014b70:	602a      	str	r2, [r5, #0]
 8014b72:	461a      	mov	r2, r3
 8014b74:	f7ec f86d 	bl	8000c52 <_write>
 8014b78:	1c43      	adds	r3, r0, #1
 8014b7a:	d102      	bne.n	8014b82 <_write_r+0x1e>
 8014b7c:	682b      	ldr	r3, [r5, #0]
 8014b7e:	b103      	cbz	r3, 8014b82 <_write_r+0x1e>
 8014b80:	6023      	str	r3, [r4, #0]
 8014b82:	bd38      	pop	{r3, r4, r5, pc}
 8014b84:	200085d0 	.word	0x200085d0

08014b88 <__swsetup_r>:
 8014b88:	4b32      	ldr	r3, [pc, #200]	; (8014c54 <__swsetup_r+0xcc>)
 8014b8a:	b570      	push	{r4, r5, r6, lr}
 8014b8c:	681d      	ldr	r5, [r3, #0]
 8014b8e:	4606      	mov	r6, r0
 8014b90:	460c      	mov	r4, r1
 8014b92:	b125      	cbz	r5, 8014b9e <__swsetup_r+0x16>
 8014b94:	69ab      	ldr	r3, [r5, #24]
 8014b96:	b913      	cbnz	r3, 8014b9e <__swsetup_r+0x16>
 8014b98:	4628      	mov	r0, r5
 8014b9a:	f7ff fba1 	bl	80142e0 <__sinit>
 8014b9e:	4b2e      	ldr	r3, [pc, #184]	; (8014c58 <__swsetup_r+0xd0>)
 8014ba0:	429c      	cmp	r4, r3
 8014ba2:	d10f      	bne.n	8014bc4 <__swsetup_r+0x3c>
 8014ba4:	686c      	ldr	r4, [r5, #4]
 8014ba6:	89a3      	ldrh	r3, [r4, #12]
 8014ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bac:	0719      	lsls	r1, r3, #28
 8014bae:	d42c      	bmi.n	8014c0a <__swsetup_r+0x82>
 8014bb0:	06dd      	lsls	r5, r3, #27
 8014bb2:	d411      	bmi.n	8014bd8 <__swsetup_r+0x50>
 8014bb4:	2309      	movs	r3, #9
 8014bb6:	6033      	str	r3, [r6, #0]
 8014bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014bbc:	81a3      	strh	r3, [r4, #12]
 8014bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc2:	e03e      	b.n	8014c42 <__swsetup_r+0xba>
 8014bc4:	4b25      	ldr	r3, [pc, #148]	; (8014c5c <__swsetup_r+0xd4>)
 8014bc6:	429c      	cmp	r4, r3
 8014bc8:	d101      	bne.n	8014bce <__swsetup_r+0x46>
 8014bca:	68ac      	ldr	r4, [r5, #8]
 8014bcc:	e7eb      	b.n	8014ba6 <__swsetup_r+0x1e>
 8014bce:	4b24      	ldr	r3, [pc, #144]	; (8014c60 <__swsetup_r+0xd8>)
 8014bd0:	429c      	cmp	r4, r3
 8014bd2:	bf08      	it	eq
 8014bd4:	68ec      	ldreq	r4, [r5, #12]
 8014bd6:	e7e6      	b.n	8014ba6 <__swsetup_r+0x1e>
 8014bd8:	0758      	lsls	r0, r3, #29
 8014bda:	d512      	bpl.n	8014c02 <__swsetup_r+0x7a>
 8014bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bde:	b141      	cbz	r1, 8014bf2 <__swsetup_r+0x6a>
 8014be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014be4:	4299      	cmp	r1, r3
 8014be6:	d002      	beq.n	8014bee <__swsetup_r+0x66>
 8014be8:	4630      	mov	r0, r6
 8014bea:	f7ff f9dd 	bl	8013fa8 <_free_r>
 8014bee:	2300      	movs	r3, #0
 8014bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8014bf2:	89a3      	ldrh	r3, [r4, #12]
 8014bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bf8:	81a3      	strh	r3, [r4, #12]
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	6063      	str	r3, [r4, #4]
 8014bfe:	6923      	ldr	r3, [r4, #16]
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	89a3      	ldrh	r3, [r4, #12]
 8014c04:	f043 0308 	orr.w	r3, r3, #8
 8014c08:	81a3      	strh	r3, [r4, #12]
 8014c0a:	6923      	ldr	r3, [r4, #16]
 8014c0c:	b94b      	cbnz	r3, 8014c22 <__swsetup_r+0x9a>
 8014c0e:	89a3      	ldrh	r3, [r4, #12]
 8014c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c18:	d003      	beq.n	8014c22 <__swsetup_r+0x9a>
 8014c1a:	4621      	mov	r1, r4
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f000 f931 	bl	8014e84 <__smakebuf_r>
 8014c22:	89a0      	ldrh	r0, [r4, #12]
 8014c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c28:	f010 0301 	ands.w	r3, r0, #1
 8014c2c:	d00a      	beq.n	8014c44 <__swsetup_r+0xbc>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	60a3      	str	r3, [r4, #8]
 8014c32:	6963      	ldr	r3, [r4, #20]
 8014c34:	425b      	negs	r3, r3
 8014c36:	61a3      	str	r3, [r4, #24]
 8014c38:	6923      	ldr	r3, [r4, #16]
 8014c3a:	b943      	cbnz	r3, 8014c4e <__swsetup_r+0xc6>
 8014c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c40:	d1ba      	bne.n	8014bb8 <__swsetup_r+0x30>
 8014c42:	bd70      	pop	{r4, r5, r6, pc}
 8014c44:	0781      	lsls	r1, r0, #30
 8014c46:	bf58      	it	pl
 8014c48:	6963      	ldrpl	r3, [r4, #20]
 8014c4a:	60a3      	str	r3, [r4, #8]
 8014c4c:	e7f4      	b.n	8014c38 <__swsetup_r+0xb0>
 8014c4e:	2000      	movs	r0, #0
 8014c50:	e7f7      	b.n	8014c42 <__swsetup_r+0xba>
 8014c52:	bf00      	nop
 8014c54:	2000019c 	.word	0x2000019c
 8014c58:	08017c08 	.word	0x08017c08
 8014c5c:	08017c28 	.word	0x08017c28
 8014c60:	08017be8 	.word	0x08017be8

08014c64 <abort>:
 8014c64:	b508      	push	{r3, lr}
 8014c66:	2006      	movs	r0, #6
 8014c68:	f000 f986 	bl	8014f78 <raise>
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	f7eb ffc9 	bl	8000c04 <_exit>
	...

08014c74 <_close_r>:
 8014c74:	b538      	push	{r3, r4, r5, lr}
 8014c76:	4d06      	ldr	r5, [pc, #24]	; (8014c90 <_close_r+0x1c>)
 8014c78:	2300      	movs	r3, #0
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	4608      	mov	r0, r1
 8014c7e:	602b      	str	r3, [r5, #0]
 8014c80:	f7ec f803 	bl	8000c8a <_close>
 8014c84:	1c43      	adds	r3, r0, #1
 8014c86:	d102      	bne.n	8014c8e <_close_r+0x1a>
 8014c88:	682b      	ldr	r3, [r5, #0]
 8014c8a:	b103      	cbz	r3, 8014c8e <_close_r+0x1a>
 8014c8c:	6023      	str	r3, [r4, #0]
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
 8014c90:	200085d0 	.word	0x200085d0

08014c94 <__sflush_r>:
 8014c94:	898a      	ldrh	r2, [r1, #12]
 8014c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9a:	4605      	mov	r5, r0
 8014c9c:	0710      	lsls	r0, r2, #28
 8014c9e:	460c      	mov	r4, r1
 8014ca0:	d458      	bmi.n	8014d54 <__sflush_r+0xc0>
 8014ca2:	684b      	ldr	r3, [r1, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	dc05      	bgt.n	8014cb4 <__sflush_r+0x20>
 8014ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	dc02      	bgt.n	8014cb4 <__sflush_r+0x20>
 8014cae:	2000      	movs	r0, #0
 8014cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cb6:	2e00      	cmp	r6, #0
 8014cb8:	d0f9      	beq.n	8014cae <__sflush_r+0x1a>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cc0:	682f      	ldr	r7, [r5, #0]
 8014cc2:	602b      	str	r3, [r5, #0]
 8014cc4:	d032      	beq.n	8014d2c <__sflush_r+0x98>
 8014cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014cc8:	89a3      	ldrh	r3, [r4, #12]
 8014cca:	075a      	lsls	r2, r3, #29
 8014ccc:	d505      	bpl.n	8014cda <__sflush_r+0x46>
 8014cce:	6863      	ldr	r3, [r4, #4]
 8014cd0:	1ac0      	subs	r0, r0, r3
 8014cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cd4:	b10b      	cbz	r3, 8014cda <__sflush_r+0x46>
 8014cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014cd8:	1ac0      	subs	r0, r0, r3
 8014cda:	2300      	movs	r3, #0
 8014cdc:	4602      	mov	r2, r0
 8014cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ce0:	6a21      	ldr	r1, [r4, #32]
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	47b0      	blx	r6
 8014ce6:	1c43      	adds	r3, r0, #1
 8014ce8:	89a3      	ldrh	r3, [r4, #12]
 8014cea:	d106      	bne.n	8014cfa <__sflush_r+0x66>
 8014cec:	6829      	ldr	r1, [r5, #0]
 8014cee:	291d      	cmp	r1, #29
 8014cf0:	d82c      	bhi.n	8014d4c <__sflush_r+0xb8>
 8014cf2:	4a2a      	ldr	r2, [pc, #168]	; (8014d9c <__sflush_r+0x108>)
 8014cf4:	40ca      	lsrs	r2, r1
 8014cf6:	07d6      	lsls	r6, r2, #31
 8014cf8:	d528      	bpl.n	8014d4c <__sflush_r+0xb8>
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	6062      	str	r2, [r4, #4]
 8014cfe:	04d9      	lsls	r1, r3, #19
 8014d00:	6922      	ldr	r2, [r4, #16]
 8014d02:	6022      	str	r2, [r4, #0]
 8014d04:	d504      	bpl.n	8014d10 <__sflush_r+0x7c>
 8014d06:	1c42      	adds	r2, r0, #1
 8014d08:	d101      	bne.n	8014d0e <__sflush_r+0x7a>
 8014d0a:	682b      	ldr	r3, [r5, #0]
 8014d0c:	b903      	cbnz	r3, 8014d10 <__sflush_r+0x7c>
 8014d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8014d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d12:	602f      	str	r7, [r5, #0]
 8014d14:	2900      	cmp	r1, #0
 8014d16:	d0ca      	beq.n	8014cae <__sflush_r+0x1a>
 8014d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d1c:	4299      	cmp	r1, r3
 8014d1e:	d002      	beq.n	8014d26 <__sflush_r+0x92>
 8014d20:	4628      	mov	r0, r5
 8014d22:	f7ff f941 	bl	8013fa8 <_free_r>
 8014d26:	2000      	movs	r0, #0
 8014d28:	6360      	str	r0, [r4, #52]	; 0x34
 8014d2a:	e7c1      	b.n	8014cb0 <__sflush_r+0x1c>
 8014d2c:	6a21      	ldr	r1, [r4, #32]
 8014d2e:	2301      	movs	r3, #1
 8014d30:	4628      	mov	r0, r5
 8014d32:	47b0      	blx	r6
 8014d34:	1c41      	adds	r1, r0, #1
 8014d36:	d1c7      	bne.n	8014cc8 <__sflush_r+0x34>
 8014d38:	682b      	ldr	r3, [r5, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d0c4      	beq.n	8014cc8 <__sflush_r+0x34>
 8014d3e:	2b1d      	cmp	r3, #29
 8014d40:	d001      	beq.n	8014d46 <__sflush_r+0xb2>
 8014d42:	2b16      	cmp	r3, #22
 8014d44:	d101      	bne.n	8014d4a <__sflush_r+0xb6>
 8014d46:	602f      	str	r7, [r5, #0]
 8014d48:	e7b1      	b.n	8014cae <__sflush_r+0x1a>
 8014d4a:	89a3      	ldrh	r3, [r4, #12]
 8014d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d50:	81a3      	strh	r3, [r4, #12]
 8014d52:	e7ad      	b.n	8014cb0 <__sflush_r+0x1c>
 8014d54:	690f      	ldr	r7, [r1, #16]
 8014d56:	2f00      	cmp	r7, #0
 8014d58:	d0a9      	beq.n	8014cae <__sflush_r+0x1a>
 8014d5a:	0793      	lsls	r3, r2, #30
 8014d5c:	680e      	ldr	r6, [r1, #0]
 8014d5e:	bf08      	it	eq
 8014d60:	694b      	ldreq	r3, [r1, #20]
 8014d62:	600f      	str	r7, [r1, #0]
 8014d64:	bf18      	it	ne
 8014d66:	2300      	movne	r3, #0
 8014d68:	eba6 0807 	sub.w	r8, r6, r7
 8014d6c:	608b      	str	r3, [r1, #8]
 8014d6e:	f1b8 0f00 	cmp.w	r8, #0
 8014d72:	dd9c      	ble.n	8014cae <__sflush_r+0x1a>
 8014d74:	6a21      	ldr	r1, [r4, #32]
 8014d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d78:	4643      	mov	r3, r8
 8014d7a:	463a      	mov	r2, r7
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b0      	blx	r6
 8014d80:	2800      	cmp	r0, #0
 8014d82:	dc06      	bgt.n	8014d92 <__sflush_r+0xfe>
 8014d84:	89a3      	ldrh	r3, [r4, #12]
 8014d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d8a:	81a3      	strh	r3, [r4, #12]
 8014d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d90:	e78e      	b.n	8014cb0 <__sflush_r+0x1c>
 8014d92:	4407      	add	r7, r0
 8014d94:	eba8 0800 	sub.w	r8, r8, r0
 8014d98:	e7e9      	b.n	8014d6e <__sflush_r+0xda>
 8014d9a:	bf00      	nop
 8014d9c:	20400001 	.word	0x20400001

08014da0 <_fflush_r>:
 8014da0:	b538      	push	{r3, r4, r5, lr}
 8014da2:	690b      	ldr	r3, [r1, #16]
 8014da4:	4605      	mov	r5, r0
 8014da6:	460c      	mov	r4, r1
 8014da8:	b913      	cbnz	r3, 8014db0 <_fflush_r+0x10>
 8014daa:	2500      	movs	r5, #0
 8014dac:	4628      	mov	r0, r5
 8014dae:	bd38      	pop	{r3, r4, r5, pc}
 8014db0:	b118      	cbz	r0, 8014dba <_fflush_r+0x1a>
 8014db2:	6983      	ldr	r3, [r0, #24]
 8014db4:	b90b      	cbnz	r3, 8014dba <_fflush_r+0x1a>
 8014db6:	f7ff fa93 	bl	80142e0 <__sinit>
 8014dba:	4b14      	ldr	r3, [pc, #80]	; (8014e0c <_fflush_r+0x6c>)
 8014dbc:	429c      	cmp	r4, r3
 8014dbe:	d11b      	bne.n	8014df8 <_fflush_r+0x58>
 8014dc0:	686c      	ldr	r4, [r5, #4]
 8014dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d0ef      	beq.n	8014daa <_fflush_r+0xa>
 8014dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014dcc:	07d0      	lsls	r0, r2, #31
 8014dce:	d404      	bmi.n	8014dda <_fflush_r+0x3a>
 8014dd0:	0599      	lsls	r1, r3, #22
 8014dd2:	d402      	bmi.n	8014dda <_fflush_r+0x3a>
 8014dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dd6:	f7ff fb33 	bl	8014440 <__retarget_lock_acquire_recursive>
 8014dda:	4628      	mov	r0, r5
 8014ddc:	4621      	mov	r1, r4
 8014dde:	f7ff ff59 	bl	8014c94 <__sflush_r>
 8014de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014de4:	07da      	lsls	r2, r3, #31
 8014de6:	4605      	mov	r5, r0
 8014de8:	d4e0      	bmi.n	8014dac <_fflush_r+0xc>
 8014dea:	89a3      	ldrh	r3, [r4, #12]
 8014dec:	059b      	lsls	r3, r3, #22
 8014dee:	d4dd      	bmi.n	8014dac <_fflush_r+0xc>
 8014df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014df2:	f7ff fb26 	bl	8014442 <__retarget_lock_release_recursive>
 8014df6:	e7d9      	b.n	8014dac <_fflush_r+0xc>
 8014df8:	4b05      	ldr	r3, [pc, #20]	; (8014e10 <_fflush_r+0x70>)
 8014dfa:	429c      	cmp	r4, r3
 8014dfc:	d101      	bne.n	8014e02 <_fflush_r+0x62>
 8014dfe:	68ac      	ldr	r4, [r5, #8]
 8014e00:	e7df      	b.n	8014dc2 <_fflush_r+0x22>
 8014e02:	4b04      	ldr	r3, [pc, #16]	; (8014e14 <_fflush_r+0x74>)
 8014e04:	429c      	cmp	r4, r3
 8014e06:	bf08      	it	eq
 8014e08:	68ec      	ldreq	r4, [r5, #12]
 8014e0a:	e7da      	b.n	8014dc2 <_fflush_r+0x22>
 8014e0c:	08017c08 	.word	0x08017c08
 8014e10:	08017c28 	.word	0x08017c28
 8014e14:	08017be8 	.word	0x08017be8

08014e18 <_lseek_r>:
 8014e18:	b538      	push	{r3, r4, r5, lr}
 8014e1a:	4d07      	ldr	r5, [pc, #28]	; (8014e38 <_lseek_r+0x20>)
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	4608      	mov	r0, r1
 8014e20:	4611      	mov	r1, r2
 8014e22:	2200      	movs	r2, #0
 8014e24:	602a      	str	r2, [r5, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	f7eb ff56 	bl	8000cd8 <_lseek>
 8014e2c:	1c43      	adds	r3, r0, #1
 8014e2e:	d102      	bne.n	8014e36 <_lseek_r+0x1e>
 8014e30:	682b      	ldr	r3, [r5, #0]
 8014e32:	b103      	cbz	r3, 8014e36 <_lseek_r+0x1e>
 8014e34:	6023      	str	r3, [r4, #0]
 8014e36:	bd38      	pop	{r3, r4, r5, pc}
 8014e38:	200085d0 	.word	0x200085d0

08014e3c <__swhatbuf_r>:
 8014e3c:	b570      	push	{r4, r5, r6, lr}
 8014e3e:	460e      	mov	r6, r1
 8014e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e44:	2900      	cmp	r1, #0
 8014e46:	b096      	sub	sp, #88	; 0x58
 8014e48:	4614      	mov	r4, r2
 8014e4a:	461d      	mov	r5, r3
 8014e4c:	da07      	bge.n	8014e5e <__swhatbuf_r+0x22>
 8014e4e:	2300      	movs	r3, #0
 8014e50:	602b      	str	r3, [r5, #0]
 8014e52:	89b3      	ldrh	r3, [r6, #12]
 8014e54:	061a      	lsls	r2, r3, #24
 8014e56:	d410      	bmi.n	8014e7a <__swhatbuf_r+0x3e>
 8014e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e5c:	e00e      	b.n	8014e7c <__swhatbuf_r+0x40>
 8014e5e:	466a      	mov	r2, sp
 8014e60:	f000 f8a6 	bl	8014fb0 <_fstat_r>
 8014e64:	2800      	cmp	r0, #0
 8014e66:	dbf2      	blt.n	8014e4e <__swhatbuf_r+0x12>
 8014e68:	9a01      	ldr	r2, [sp, #4]
 8014e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014e72:	425a      	negs	r2, r3
 8014e74:	415a      	adcs	r2, r3
 8014e76:	602a      	str	r2, [r5, #0]
 8014e78:	e7ee      	b.n	8014e58 <__swhatbuf_r+0x1c>
 8014e7a:	2340      	movs	r3, #64	; 0x40
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	6023      	str	r3, [r4, #0]
 8014e80:	b016      	add	sp, #88	; 0x58
 8014e82:	bd70      	pop	{r4, r5, r6, pc}

08014e84 <__smakebuf_r>:
 8014e84:	898b      	ldrh	r3, [r1, #12]
 8014e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e88:	079d      	lsls	r5, r3, #30
 8014e8a:	4606      	mov	r6, r0
 8014e8c:	460c      	mov	r4, r1
 8014e8e:	d507      	bpl.n	8014ea0 <__smakebuf_r+0x1c>
 8014e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e94:	6023      	str	r3, [r4, #0]
 8014e96:	6123      	str	r3, [r4, #16]
 8014e98:	2301      	movs	r3, #1
 8014e9a:	6163      	str	r3, [r4, #20]
 8014e9c:	b002      	add	sp, #8
 8014e9e:	bd70      	pop	{r4, r5, r6, pc}
 8014ea0:	ab01      	add	r3, sp, #4
 8014ea2:	466a      	mov	r2, sp
 8014ea4:	f7ff ffca 	bl	8014e3c <__swhatbuf_r>
 8014ea8:	9900      	ldr	r1, [sp, #0]
 8014eaa:	4605      	mov	r5, r0
 8014eac:	4630      	mov	r0, r6
 8014eae:	f7ff f8cb 	bl	8014048 <_malloc_r>
 8014eb2:	b948      	cbnz	r0, 8014ec8 <__smakebuf_r+0x44>
 8014eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb8:	059a      	lsls	r2, r3, #22
 8014eba:	d4ef      	bmi.n	8014e9c <__smakebuf_r+0x18>
 8014ebc:	f023 0303 	bic.w	r3, r3, #3
 8014ec0:	f043 0302 	orr.w	r3, r3, #2
 8014ec4:	81a3      	strh	r3, [r4, #12]
 8014ec6:	e7e3      	b.n	8014e90 <__smakebuf_r+0xc>
 8014ec8:	4b0d      	ldr	r3, [pc, #52]	; (8014f00 <__smakebuf_r+0x7c>)
 8014eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ecc:	89a3      	ldrh	r3, [r4, #12]
 8014ece:	6020      	str	r0, [r4, #0]
 8014ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ed4:	81a3      	strh	r3, [r4, #12]
 8014ed6:	9b00      	ldr	r3, [sp, #0]
 8014ed8:	6163      	str	r3, [r4, #20]
 8014eda:	9b01      	ldr	r3, [sp, #4]
 8014edc:	6120      	str	r0, [r4, #16]
 8014ede:	b15b      	cbz	r3, 8014ef8 <__smakebuf_r+0x74>
 8014ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	f000 f875 	bl	8014fd4 <_isatty_r>
 8014eea:	b128      	cbz	r0, 8014ef8 <__smakebuf_r+0x74>
 8014eec:	89a3      	ldrh	r3, [r4, #12]
 8014eee:	f023 0303 	bic.w	r3, r3, #3
 8014ef2:	f043 0301 	orr.w	r3, r3, #1
 8014ef6:	81a3      	strh	r3, [r4, #12]
 8014ef8:	89a0      	ldrh	r0, [r4, #12]
 8014efa:	4305      	orrs	r5, r0
 8014efc:	81a5      	strh	r5, [r4, #12]
 8014efe:	e7cd      	b.n	8014e9c <__smakebuf_r+0x18>
 8014f00:	08014279 	.word	0x08014279

08014f04 <_read_r>:
 8014f04:	b538      	push	{r3, r4, r5, lr}
 8014f06:	4d07      	ldr	r5, [pc, #28]	; (8014f24 <_read_r+0x20>)
 8014f08:	4604      	mov	r4, r0
 8014f0a:	4608      	mov	r0, r1
 8014f0c:	4611      	mov	r1, r2
 8014f0e:	2200      	movs	r2, #0
 8014f10:	602a      	str	r2, [r5, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	f7eb fe80 	bl	8000c18 <_read>
 8014f18:	1c43      	adds	r3, r0, #1
 8014f1a:	d102      	bne.n	8014f22 <_read_r+0x1e>
 8014f1c:	682b      	ldr	r3, [r5, #0]
 8014f1e:	b103      	cbz	r3, 8014f22 <_read_r+0x1e>
 8014f20:	6023      	str	r3, [r4, #0]
 8014f22:	bd38      	pop	{r3, r4, r5, pc}
 8014f24:	200085d0 	.word	0x200085d0

08014f28 <_raise_r>:
 8014f28:	291f      	cmp	r1, #31
 8014f2a:	b538      	push	{r3, r4, r5, lr}
 8014f2c:	4604      	mov	r4, r0
 8014f2e:	460d      	mov	r5, r1
 8014f30:	d904      	bls.n	8014f3c <_raise_r+0x14>
 8014f32:	2316      	movs	r3, #22
 8014f34:	6003      	str	r3, [r0, #0]
 8014f36:	f04f 30ff 	mov.w	r0, #4294967295
 8014f3a:	bd38      	pop	{r3, r4, r5, pc}
 8014f3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014f3e:	b112      	cbz	r2, 8014f46 <_raise_r+0x1e>
 8014f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f44:	b94b      	cbnz	r3, 8014f5a <_raise_r+0x32>
 8014f46:	4620      	mov	r0, r4
 8014f48:	f000 f830 	bl	8014fac <_getpid_r>
 8014f4c:	462a      	mov	r2, r5
 8014f4e:	4601      	mov	r1, r0
 8014f50:	4620      	mov	r0, r4
 8014f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f56:	f000 b817 	b.w	8014f88 <_kill_r>
 8014f5a:	2b01      	cmp	r3, #1
 8014f5c:	d00a      	beq.n	8014f74 <_raise_r+0x4c>
 8014f5e:	1c59      	adds	r1, r3, #1
 8014f60:	d103      	bne.n	8014f6a <_raise_r+0x42>
 8014f62:	2316      	movs	r3, #22
 8014f64:	6003      	str	r3, [r0, #0]
 8014f66:	2001      	movs	r0, #1
 8014f68:	e7e7      	b.n	8014f3a <_raise_r+0x12>
 8014f6a:	2400      	movs	r4, #0
 8014f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f70:	4628      	mov	r0, r5
 8014f72:	4798      	blx	r3
 8014f74:	2000      	movs	r0, #0
 8014f76:	e7e0      	b.n	8014f3a <_raise_r+0x12>

08014f78 <raise>:
 8014f78:	4b02      	ldr	r3, [pc, #8]	; (8014f84 <raise+0xc>)
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	6818      	ldr	r0, [r3, #0]
 8014f7e:	f7ff bfd3 	b.w	8014f28 <_raise_r>
 8014f82:	bf00      	nop
 8014f84:	2000019c 	.word	0x2000019c

08014f88 <_kill_r>:
 8014f88:	b538      	push	{r3, r4, r5, lr}
 8014f8a:	4d07      	ldr	r5, [pc, #28]	; (8014fa8 <_kill_r+0x20>)
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	4604      	mov	r4, r0
 8014f90:	4608      	mov	r0, r1
 8014f92:	4611      	mov	r1, r2
 8014f94:	602b      	str	r3, [r5, #0]
 8014f96:	f7eb fe23 	bl	8000be0 <_kill>
 8014f9a:	1c43      	adds	r3, r0, #1
 8014f9c:	d102      	bne.n	8014fa4 <_kill_r+0x1c>
 8014f9e:	682b      	ldr	r3, [r5, #0]
 8014fa0:	b103      	cbz	r3, 8014fa4 <_kill_r+0x1c>
 8014fa2:	6023      	str	r3, [r4, #0]
 8014fa4:	bd38      	pop	{r3, r4, r5, pc}
 8014fa6:	bf00      	nop
 8014fa8:	200085d0 	.word	0x200085d0

08014fac <_getpid_r>:
 8014fac:	f7eb be10 	b.w	8000bd0 <_getpid>

08014fb0 <_fstat_r>:
 8014fb0:	b538      	push	{r3, r4, r5, lr}
 8014fb2:	4d07      	ldr	r5, [pc, #28]	; (8014fd0 <_fstat_r+0x20>)
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	4608      	mov	r0, r1
 8014fba:	4611      	mov	r1, r2
 8014fbc:	602b      	str	r3, [r5, #0]
 8014fbe:	f7eb fe70 	bl	8000ca2 <_fstat>
 8014fc2:	1c43      	adds	r3, r0, #1
 8014fc4:	d102      	bne.n	8014fcc <_fstat_r+0x1c>
 8014fc6:	682b      	ldr	r3, [r5, #0]
 8014fc8:	b103      	cbz	r3, 8014fcc <_fstat_r+0x1c>
 8014fca:	6023      	str	r3, [r4, #0]
 8014fcc:	bd38      	pop	{r3, r4, r5, pc}
 8014fce:	bf00      	nop
 8014fd0:	200085d0 	.word	0x200085d0

08014fd4 <_isatty_r>:
 8014fd4:	b538      	push	{r3, r4, r5, lr}
 8014fd6:	4d06      	ldr	r5, [pc, #24]	; (8014ff0 <_isatty_r+0x1c>)
 8014fd8:	2300      	movs	r3, #0
 8014fda:	4604      	mov	r4, r0
 8014fdc:	4608      	mov	r0, r1
 8014fde:	602b      	str	r3, [r5, #0]
 8014fe0:	f7eb fe6f 	bl	8000cc2 <_isatty>
 8014fe4:	1c43      	adds	r3, r0, #1
 8014fe6:	d102      	bne.n	8014fee <_isatty_r+0x1a>
 8014fe8:	682b      	ldr	r3, [r5, #0]
 8014fea:	b103      	cbz	r3, 8014fee <_isatty_r+0x1a>
 8014fec:	6023      	str	r3, [r4, #0]
 8014fee:	bd38      	pop	{r3, r4, r5, pc}
 8014ff0:	200085d0 	.word	0x200085d0

08014ff4 <_init>:
 8014ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ff6:	bf00      	nop
 8014ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014ffa:	bc08      	pop	{r3}
 8014ffc:	469e      	mov	lr, r3
 8014ffe:	4770      	bx	lr

08015000 <_fini>:
 8015000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015002:	bf00      	nop
 8015004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015006:	bc08      	pop	{r3}
 8015008:	469e      	mov	lr, r3
 801500a:	4770      	bx	lr
